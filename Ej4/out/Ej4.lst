
TP3/Ej4/out/Ej4.elf:     file format elf32-littlearm
TP3/Ej4/out/Ej4.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a000569

Program Header:
0x70000001 off    0x00013bd8 vaddr 0x1a003bd8 paddr 0x1a003bd8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000000 vaddr 0x10000000 paddr 0x10000000 align 2**16
         filesz 0x000000b4 memsz 0x000001c0 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00003be0 memsz 0x00003be0 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a003be0 align 2**16
         filesz 0x000000ec memsz 0x000000ec flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         000000ec  10000000  1a003be0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  000200ec  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  000200ec  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  000200ec  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  000200ec  2**2
                  CONTENTS
  6 .bss          000000d0  100000f0  100000f0  000000f0  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  000200ec  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  000200ec  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  000200ec  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  000200ec  2**2
                  CONTENTS
 11 .init_array   00000004  1a000300  1a000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .text         000038c8  1a000310  1a000310  00010310  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .ARM.exidx    00000008  1a003bd8  1a003bd8  00013bd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .uninit_RESERVED 00000000  10000000  10000000  000200ec  2**2
                  CONTENTS
 15 .noinit_RAM2  00000000  10080000  10080000  000200ec  2**2
                  CONTENTS
 16 .noinit_RAM3  00000000  20000000  20000000  000200ec  2**2
                  CONTENTS
 17 .noinit_RAM4  00000000  20008000  20008000  000200ec  2**2
                  CONTENTS
 18 .noinit_RAM5  00000000  2000c000  2000c000  000200ec  2**2
                  CONTENTS
 19 .noinit       00000000  100001c0  100001c0  00000000  2**2
                  ALLOC
 20 .debug_info   000192c2  00000000  00000000  000200ec  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00004424  00000000  00000000  000393ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 00005ddc  00000000  00000000  0003d7d2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00000b50  00000000  00000000  000435b0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 0000090b  00000000  00000000  00044100  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  0000e773  00000000  00000000  00044a0b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   000130cb  00000000  00000000  0005317e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    0002b3f5  00000000  00000000  00066249  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      0000001e  00000000  00000000  0009163e  2**0
                  CONTENTS, READONLY
 29 .ARM.attributes 00000032  00000000  00000000  0009165c  2**0
                  CONTENTS, READONLY
 30 .debug_frame  0000218c  00000000  00000000  00091690  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 0000004e  00000000  00000000  0009381c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
100000f0 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a000300 l    d  .init_array	00000000 .init_array
1a000310 l    d  .text	00000000 .text
1a003bd8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
100001c0 l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 sapi_uart.c
1a0019dc l     F .text	000000c8 uartProcessIRQ
10000114 l     O .bss	00000004 rxIsrCallbackUART0
10000118 l     O .bss	00000004 rxIsrCallbackUART0Params
1000011c l     O .bss	00000004 rxIsrCallbackUART2
10000120 l     O .bss	00000004 rxIsrCallbackUART2Params
10000124 l     O .bss	00000004 rxIsrCallbackUART3
10000128 l     O .bss	00000004 rxIsrCallbackUART3Params
1000012c l     O .bss	00000004 txIsrCallbackUART0
10000130 l     O .bss	00000004 txIsrCallbackUART0Params
10000134 l     O .bss	00000004 txIsrCallbackUART2
10000138 l     O .bss	00000004 txIsrCallbackUART2Params
1000013c l     O .bss	00000004 txIsrCallbackUART3
10000140 l     O .bss	00000004 txIsrCallbackUART3Params
1a003ae4 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 Ej4.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000004 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
1000003c l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10000104 l     O .bss	00000004 callBackFuncParams
10000108 l     O .bss	00000008 tickCounter
10000110 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 sapi_timer.c
1a0017c4 l     F .text	00000002 errorOcurred
1a0017c6 l     F .text	00000002 doNothing
10000048 l     O .data	00000040 timer_dd
1a003ab4 l     O .text	00000030 timer_sd
00000000 l    df *ABS*	00000000 impure.c
1000008c l     O .data	00000060 impure_data
00000000 l    df *ABS*	00000000 system.c
100000f4 l     O .bss	00000004 heap_end.0
00000000 l    df *ABS*	00000000 board.c
1a0006bc l     F .text	00000048 Board_LED_Init
1a000704 l     F .text	00000044 Board_TEC_Init
1a000748 l     F .text	00000044 Board_GPIO_Init
1a00078c l     F .text	00000030 Board_ADC_Init
1a0007bc l     F .text	00000038 Board_SPI_Init
1a0007f4 l     F .text	00000024 Board_I2C_Init
1a00385c l     O .text	00000008 GpioButtons
1a003864 l     O .text	0000000c GpioLeds
1a003870 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a003888 l     O .text	00000004 InitClkStates
1a00388c l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a00095c l     F .text	00000014 Chip_ADC_GetClockIndex
1a000970 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a000a38 l     F .text	000000a8 pll_calc_divs
1a000ae0 l     F .text	00000110 pll_get_frac
1a000bf0 l     F .text	00000054 Chip_Clock_FindBaseClock
1a000e68 l     F .text	00000022 Chip_Clock_GetDivRate
100000fc l     O .bss	00000008 audio_usb_pll_freq
1a003908 l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a001060 l     F .text	00000014 Chip_SSP_GetClockIndex
1a001074 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a003974 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 timer_18xx_43xx.c
1a001270 l     F .text	0000002c Chip_TIMER_GetClockIndex
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a0012c0 l     F .text	0000002c Chip_UART_GetIndex
1a0039bc l     O .text	00000008 UART_BClock
1a0039c4 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0014b0 l     F .text	00000038 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000144 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 sapi_stdio.c
1a001df0 l     F .text	0000000e uartfd_write
1a001dfe l     F .text	0000002e uartfd_read
1a003b30 l     O .text	00000010 uartfd_vtable
00000000 l    df *ABS*	00000000 sapi_rgb.c
1a001e7c l     F .text	000000b4 StabilizePwmValues
1a001f30 l     F .text	00000058 InitRgbFirstTime
1a001f88 l     F .text	00000140 UpdateLedsStates
1000014c l     O .bss	00000063 RgbLeds
100001af l     O .bss	00000001 rgbInitialized.1
100001b0 l     O .bss	00000004 ticksCounter.0
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 fclose.c
00000000 l    df *ABS*	00000000 fflush.c
00000000 l    df *ABS*	00000000 findfp.c
1a002804 l     F .text	00000048 std
00000000 l    df *ABS*	00000000 fopencookie.c
1a0029b0 l     F .text	00000050 fcwriter
1a002a00 l     F .text	00000038 fccloser
1a002a38 l     F .text	00000036 fcseeker
1a002a6e l     F .text	00000036 fcreader
00000000 l    df *ABS*	00000000 fwalk.c
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 lock.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-mallocr.c
00000000 l    df *ABS*	00000000 nano-vfprintf.c
1a002da4 l     F .text	0000002e __sfputc_r
00000000 l    df *ABS*	00000000 stdio.c
00000000 l    df *ABS*	00000000 wbuf.c
00000000 l    df *ABS*	00000000 wsetup.c
00000000 l    df *ABS*	00000000 errno.c
00000000 l    df *ABS*	00000000 flags.c
00000000 l    df *ABS*	00000000 makebuf.c
00000000 l    df *ABS*	00000000 lib_a-memchr.o
00000000 l    df *ABS*	00000000 mlock.c
00000000 l    df *ABS*	00000000 nano-vfprintf_i.c
00000000 l    df *ABS*	00000000 
1a000304 l       .init_array	00000000 __init_array_end
1a000300 l       .bss_RAM5	00000000 __preinit_array_end
1a000300 l       .init_array	00000000 __init_array_start
1a000300 l       .bss_RAM5	00000000 __preinit_array_start
1a000c90 g     F .text	0000001c Chip_Clock_GetDividerSource
1a000608 g     F .text	00000012 _isatty_r
1a001954 g     F .text	00000044 TIMER2_IRQHandler
1a001c20 g     F .text	00000014 uartRxRead
1a001cf8 g     F .text	0000001c uartWriteByteArray
1a00061a g     F .text	0000000a _lseek_r
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a003280 g     F .text	0000006c __sflags
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a001cc4 g     F .text	0000001a uartReadByte
1a0008ae g     F .text	00000008 __stdio_init
1a0030c6 g     F .text	00000024 __sseek
1a0028b4 g     F .text	00000070 __sinit
1a0030f4 g     F .text	000000a4 __swbuf_r
1a00017a  w    F .text	00000002 HardFault_Handler
1a002858 g     F .text	0000002c __sfmoreglue
1a000000 g       *ABS*	00000000 __vectors_start__
1a000a16 g     F .text	0000000c Chip_ADC_SetResolution
1a00224c g     F .text	00000014 rgbReadDutyGreen
1a00346c g     F .text	0000000c __malloc_unlock
1a001798 g     F .text	0000002c SysTick_Handler
1a001340 g     F .text	00000040 Chip_UART_SetBaud
1a000564  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a000850 g     F .text	0000001c Board_UARTGetChar
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a003be0 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a003274 g     F .text	0000000c __errno
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
1a0005fe g     F .text	0000000a _fstat_r
53ff7326 g       *ABS*	00000000 __valid_user_code_checksum
1a003be0 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a001998 g     F .text	00000044 TIMER3_IRQHandler
1a000f10 g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001bc g     F .text	0000000a UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0012a8 g     F .text	00000018 Chip_TIMER_Reset
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a00284c g     F .text	0000000c _cleanup_r
1a0022e8 g     F .text	00000000 .hidden __aeabi_uldivmod
100001c0 g       .noinit	00000000 _noinit
100000f8 g     O .bss	00000004 SystemCoreClock
1a0012ec g     F .text	00000054 Chip_UART_Init
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000180  w    F .text	00000002 UsageFault_Handler
1a000f8c g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a0008e4 g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a002318 g     F .text	0000027a .hidden __udivmoddi4
1a00069c g     F .text	00000020 _sbrk_r
1a003858 g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
100000f0 g     O .bss	00000001 flagToggle
1a000624 g     F .text	0000004e _read_r
1a002b80 g     F .text	00000038 fopencookie
1a002598 g     F .text	000000d8 _fclose_r
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001bf0 g     F .text	00000018 uartRxReady
1a003bd8 g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
100001b6 g     O .bss	00000001 __lock___sinit_recursive_mutex
1a003ba0 g     O .text	00000004 _global_impure_ptr
1a002bf8 g     F .text	00000048 __libc_init_array
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a00086c g     F .text	00000030 Board_Init
1a0005f2  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
100001c0 g       .bss	00000000 _ebss
1a0018d4 g     F .text	00000040 TIMER0_IRQHandler
1a000568 g     F .text	00000088 Reset_Handler
1a001724 g     F .text	00000074 tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a001024 g     F .text	0000003c Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000c44 g     F .text	0000004c Chip_Clock_EnableCrystal
100001b4 g     O .bss	00000001 __lock___malloc_recursive_mutex
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a001914 g     F .text	00000040 TIMER1_IRQHandler
1a003b40 g     O .text	00000020 __sf_fake_stderr
1a000ffc g     F .text	00000028 Chip_I2C_Init
1a002c46 g     F .text	00000002 __retarget_lock_release_recursive
1a001d14 g     F .text	0000000a UART2_IRQHandler
1a000e00 g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a0039cc g     O .text	000000e6 gpioPinsInit
1a001aa4 g     F .text	00000090 uartInterrupt
1a001cde g     F .text	0000001a uartWriteByte
1a00108c g     F .text	00000012 Chip_SSP_SetClockRate
1a002274 g     F .text	00000074 rgbToggleLed
1a002dd2 g     F .text	00000024 __sfputs_r
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a002884 g     F .text	0000000c __sfp_lock_acquire
1a0033c0 g     F .text	00000000 memchr
1a0017c8 g     F .text	00000104 Timer_Init
1a002c58 g     F .text	00000098 _free_r
1a0018cc g     F .text	00000008 Timer_microsecondsToTicks
1a000ee8 g     F .text	00000028 Chip_Clock_GetBaseClock
100000f0 g       .bss	00000000 _bss
1a0009e4 g     F .text	00000032 Chip_ADC_SetSampleRate
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a00109e g     F .text	00000042 Chip_SSP_SetBitRate
1a000fd8 g     F .text	00000002 Chip_GPIO_Init
1a003884 g     O .text	00000004 OscRateIn
1a001c48 g     F .text	0000007c uartInit
100001c0 g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a00129c g     F .text	0000000c Chip_TIMER_Init
1a000178 g       .text	00000000 __bss_section_table_end
1a0005f4 g     F .text	0000000a _close_r
1a0014e8 g     F .text	000001ac gpioInit
1a002c42 g     F .text	00000002 __retarget_lock_close_recursive
1a003198 g     F .text	000000dc __swsetup_r
1a002594  w    F .text	00000002 .hidden __aeabi_ldiv0
1a002924 g     F .text	0000008c __sfp
1a0028a8 g     F .text	0000000c __sinit_lock_release
1a00306c g     F .text	00000022 __sread
1a001d28 g     F .text	0000001c USB0_IRQHandler
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a003460 g     F .text	0000000c __malloc_lock
1a00083c g     F .text	00000014 Board_UARTPutChar
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a00278c g     F .text	00000078 _fflush_r
1a003b60 g     O .text	00000020 __sf_fake_stdin
1a000cac g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a002238 g     F .text	00000014 rgbReadDutyRed
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a002c44 g     F .text	00000002 __retarget_lock_acquire_recursive
1a002c48 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000498 g     F .text	000000cc main
1a0020c8 g     F .text	0000004c rgbInit
1a002c40 g     F .text	00000002 __retarget_lock_init_recursive
1a002260 g     F .text	00000014 rgbReadDutyBlue
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0030ea g     F .text	00000008 __sclose
1a002670 g     F .text	00000010 fclose
1a002cf0 g     F .text	000000b4 _malloc_r
1a001c08 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000f1c g     F .text	0000003c Chip_Clock_EnableOpts
1a0008a6 g     F .text	00000008 __stdio_getchar
1a000cc8 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000d80 g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a003058 g     F .text	00000014 vfiprintf
1a00145c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a001db8 g     F .text	00000038 delay
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a001694 g     F .text	0000006a gpioWrite
1a0005f0  w    F .text	00000002 _fini
1a0009a4 g     F .text	00000040 Chip_ADC_Init
10000148 g     O .bss	00000004 g_pUsbApi
1a0008b8 g     F .text	0000002c Board_SetupMuxing
1a001380 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001700 g     F .text	0000000c tickRead
1a000672 g     F .text	00000028 _write_r
10000040 g     O .data	00000008 tickRateMS
10000000 g     O .data	00000001 led_act
1a0001ba  w    F .text	00000002 ETH_IRQHandler
1a003478 g     F .text	000000da _printf_common
10000088 g     O .data	00000004 _impure_ptr
1a002680 g     F .text	0000010c __sflush_r
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1b000000 g       .text	00000000 __core_m0app_START__
1a001c34 g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1a002aa4 g     F .text	000000dc _fopencookie_r
100001c0 g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a0010e0 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a0032ec g     F .text	0000004a __swhatbuf_r
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000818 g     F .text	00000024 Board_Debug_Init
1a00089c g     F .text	0000000a __stdio_putchar
100000ec g       .data	00000000 _edata
1a000fdc g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001118 g     F .text	00000158 Chip_SetupCoreClock
1a00308e g     F .text	00000038 __swrite
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a002df8 g     F .text	00000260 _vfiprintf_r
1a000000 g     O .text	00000040 g_pfnVectors
1a00220c g     F .text	0000002c rgbWriteRaw
1a002bb8 g     F .text	0000003e _fwalk_reent
1a000a24 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a002890 g     F .text	0000000c __sfp_lock_release
1a003b80 g     O .text	00000020 __sf_fake_stdout
1a002594  w    F .text	00000002 .hidden __aeabi_idiv0
1a001b34 g     F .text	000000bc uartCallbackSet
1a00017e  w    F .text	00000002 BusFault_Handler
1a003338 g     F .text	00000080 __smakebuf_r
1a003554 g     F .text	0000024c _printf_i
1a000f58 g     F .text	00000034 Chip_Clock_Enable
1a001d1e g     F .text	0000000a UART3_IRQHandler
100001bc g     O .bss	00000004 __malloc_sbrk_start
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a001e2c g     F .text	00000050 stdioPrintf
1a001d44 g     F .text	00000074 boardInit
100001b8 g     O .bss	00000004 __malloc_free_list
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a002df8 g     F .text	00000260 _vfprintf_r
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00170c g     F .text	00000016 tickPowerSet
1a000e8c g     F .text	0000005c Chip_Clock_SetBaseClock
1a003058 g     F .text	00000014 vfprintf
1a001494 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a002114 g     F .text	000000f8 rgbWriteColor
100001b5 g     O .bss	00000001 __lock___sfp_recursive_mutex
1a000310 g     F .text	00000188 uartUSBreadHook
1a00289c g     F .text	0000000c __sinit_lock_acquire
1a000950 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 69 05 00 1a 79 01 00 1a 7b 01 00 1a     ....i...y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 26 73 ff 53     }...........&s.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	99 17 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	29 1d 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     )...............
1a000070:	d5 18 00 1a 15 19 00 1a 55 19 00 1a 99 19 00 1a     ........U.......
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bd 01 00 1a bb 01 00 1a 15 1d 00 1a 1f 1d 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a003be0 	.word	0x1a003be0
1a000118:	10000000 	.word	0x10000000
1a00011c:	000000ec 	.word	0x000000ec
1a000120:	1a003be0 	.word	0x1a003be0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a003be0 	.word	0x1a003be0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a003be0 	.word	0x1a003be0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a003be0 	.word	0x1a003be0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	100000f0 	.word	0x100000f0
1a000154:	000000d0 	.word	0x000000d0
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:

}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>

1a0001bc <UART0_IRQHandler>:
__attribute__ ((section(".after_vectors")))

// UART0 (GPIO1 y GPIO2 or RS485/Profibus)
// 0x28 0x000000A0 - Handler for ISR UART0 (IRQ 24)
void UART0_IRQHandler(void)
{
1a0001bc:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_GPIO );
1a0001be:	2000      	movs	r0, #0
1a0001c0:	f001 fc0c 	bl	1a0019dc <uartProcessIRQ>
}
1a0001c4:	bd08      	pop	{r3, pc}
1a0001c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fe:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000202:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000206:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000212:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000216:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000222:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000226:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000232:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000236:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000242:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000246:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000252:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000256:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000262:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000266:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000272:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000276:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000282:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000286:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000292:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000296:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029a:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029e:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002aa:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ae:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ba:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002be:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ca:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ce:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002da:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002de:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ea:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ee:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f2:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f6:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002fa:	Address 0x000000001a0002fa is out of bounds.


1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

Disassembly of section .text:

1a000310 <uartUSBreadHook>:


/*==================[declaraciones de funciones internas]====================*/

void uartUSBreadHook(void *noUsado)
{
1a000310:	b530      	push	{r4, r5, lr}
1a000312:	b083      	sub	sp, #12
	char dataUart;

	 if (uartReadByte(UART_USB, &dataUart)) {
1a000314:	f10d 0107 	add.w	r1, sp, #7
1a000318:	2003      	movs	r0, #3
1a00031a:	f001 fcd3 	bl	1a001cc4 <uartReadByte>
1a00031e:	b368      	cbz	r0, 1a00037c <uartUSBreadHook+0x6c>
	 if (dataUart == 'R')
1a000320:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a000324:	2b52      	cmp	r3, #82	; 0x52
1a000326:	d01c      	beq.n	1a000362 <uartUSBreadHook+0x52>
	 {
	      	 rgbWriteColor(RGB_1, RED);
	      	 led_act = 'R';
	 }
	 else if (dataUart == 'G')
1a000328:	3b2b      	subs	r3, #43	; 0x2b
1a00032a:	2b2e      	cmp	r3, #46	; 0x2e
1a00032c:	d820      	bhi.n	1a000370 <uartUSBreadHook+0x60>
1a00032e:	e8df f003 	tbb	[pc, r3]
1a000332:	1f63      	.short	0x1f63
1a000334:	5c1f1f87 	.word	0x5c1f1f87
1a000338:	1f1f1f1f 	.word	0x1f1f1f1f
1a00033c:	1f1f1f1f 	.word	0x1f1f1f1f
1a000340:	1f1f1f1f 	.word	0x1f1f1f1f
1a000344:	1f1f1f1f 	.word	0x1f1f1f1f
1a000348:	1f4c2f1f 	.word	0x1f4c2f1f
1a00034c:	1f271f1f 	.word	0x1f271f1f
1a000350:	1f1f1f1f 	.word	0x1f1f1f1f
1a000354:	1f1f541f 	.word	0x1f1f541f
1a000358:	1f1f1f1f 	.word	0x1f1f1f1f
1a00035c:	1f44341f 	.word	0x1f44341f
1a000360:	3c          	.byte	0x3c
1a000361:	00          	.byte	0x00
	      	 rgbWriteColor(RGB_1, RED);
1a000362:	2103      	movs	r1, #3
1a000364:	2000      	movs	r0, #0
1a000366:	f001 fed5 	bl	1a002114 <rgbWriteColor>
	      	 led_act = 'R';
1a00036a:	4b48      	ldr	r3, [pc, #288]	; (1a00048c <uartUSBreadHook+0x17c>)
1a00036c:	2252      	movs	r2, #82	; 0x52
1a00036e:	701a      	strb	r2, [r3, #0]
		 {
			 rgbWriteRaw(RGB_1, rgbReadDutyRed(RGB_1)/2, rgbReadDutyGreen(RGB_1)/2, rgbReadDutyBlue(RGB_1)/2);
		 }
	 }
	 //rgbWriteBright(RGB_1, brightness);
	 stdioPrintf(UART_USB, "%c\n\r", dataUart);
1a000370:	f89d 2007 	ldrb.w	r2, [sp, #7]
1a000374:	4946      	ldr	r1, [pc, #280]	; (1a000490 <uartUSBreadHook+0x180>)
1a000376:	2003      	movs	r0, #3
1a000378:	f001 fd58 	bl	1a001e2c <stdioPrintf>
	 }
}
1a00037c:	b003      	add	sp, #12
1a00037e:	bd30      	pop	{r4, r5, pc}
		 rgbWriteColor(RGB_1, GREEN);
1a000380:	2107      	movs	r1, #7
1a000382:	2000      	movs	r0, #0
1a000384:	f001 fec6 	bl	1a002114 <rgbWriteColor>
		 led_act = 'G';
1a000388:	4b40      	ldr	r3, [pc, #256]	; (1a00048c <uartUSBreadHook+0x17c>)
1a00038a:	2247      	movs	r2, #71	; 0x47
1a00038c:	701a      	strb	r2, [r3, #0]
1a00038e:	e7ef      	b.n	1a000370 <uartUSBreadHook+0x60>
		 rgbWriteColor(RGB_1, BLUE);
1a000390:	2105      	movs	r1, #5
1a000392:	2000      	movs	r0, #0
1a000394:	f001 febe 	bl	1a002114 <rgbWriteColor>
1a000398:	e7ea      	b.n	1a000370 <uartUSBreadHook+0x60>
		 rgbWriteColor(RGB_1, VIOLET);
1a00039a:	2102      	movs	r1, #2
1a00039c:	2000      	movs	r0, #0
1a00039e:	f001 feb9 	bl	1a002114 <rgbWriteColor>
		 led_act = 'V';
1a0003a2:	4b3a      	ldr	r3, [pc, #232]	; (1a00048c <uartUSBreadHook+0x17c>)
1a0003a4:	2256      	movs	r2, #86	; 0x56
1a0003a6:	701a      	strb	r2, [r3, #0]
1a0003a8:	e7e2      	b.n	1a000370 <uartUSBreadHook+0x60>
		 rgbWriteColor(RGB_1, YELLOW);
1a0003aa:	2106      	movs	r1, #6
1a0003ac:	2000      	movs	r0, #0
1a0003ae:	f001 feb1 	bl	1a002114 <rgbWriteColor>
		 led_act = 'Y';
1a0003b2:	4b36      	ldr	r3, [pc, #216]	; (1a00048c <uartUSBreadHook+0x17c>)
1a0003b4:	2259      	movs	r2, #89	; 0x59
1a0003b6:	701a      	strb	r2, [r3, #0]
1a0003b8:	e7da      	b.n	1a000370 <uartUSBreadHook+0x60>
		 rgbWriteColor(RGB_1, WHITE);
1a0003ba:	2101      	movs	r1, #1
1a0003bc:	2000      	movs	r0, #0
1a0003be:	f001 fea9 	bl	1a002114 <rgbWriteColor>
		 led_act = 'W';
1a0003c2:	4b32      	ldr	r3, [pc, #200]	; (1a00048c <uartUSBreadHook+0x17c>)
1a0003c4:	2257      	movs	r2, #87	; 0x57
1a0003c6:	701a      	strb	r2, [r3, #0]
1a0003c8:	e7d2      	b.n	1a000370 <uartUSBreadHook+0x60>
		 rgbWriteColor(RGB_1, CYAN);
1a0003ca:	2104      	movs	r1, #4
1a0003cc:	2000      	movs	r0, #0
1a0003ce:	f001 fea1 	bl	1a002114 <rgbWriteColor>
		 led_act = 'C';
1a0003d2:	4b2e      	ldr	r3, [pc, #184]	; (1a00048c <uartUSBreadHook+0x17c>)
1a0003d4:	2243      	movs	r2, #67	; 0x43
1a0003d6:	701a      	strb	r2, [r3, #0]
1a0003d8:	e7ca      	b.n	1a000370 <uartUSBreadHook+0x60>
		 rgbWriteColor(RGB_1, BLACK);
1a0003da:	2100      	movs	r1, #0
1a0003dc:	4608      	mov	r0, r1
1a0003de:	f001 fe99 	bl	1a002114 <rgbWriteColor>
		 led_act = 'N';
1a0003e2:	4b2a      	ldr	r3, [pc, #168]	; (1a00048c <uartUSBreadHook+0x17c>)
1a0003e4:	224e      	movs	r2, #78	; 0x4e
1a0003e6:	701a      	strb	r2, [r3, #0]
1a0003e8:	e7c2      	b.n	1a000370 <uartUSBreadHook+0x60>
		 flagToggle = !flagToggle;
1a0003ea:	4a2a      	ldr	r2, [pc, #168]	; (1a000494 <uartUSBreadHook+0x184>)
1a0003ec:	7813      	ldrb	r3, [r2, #0]
1a0003ee:	fab3 f383 	clz	r3, r3
1a0003f2:	095b      	lsrs	r3, r3, #5
1a0003f4:	7013      	strb	r3, [r2, #0]
1a0003f6:	e7bb      	b.n	1a000370 <uartUSBreadHook+0x60>
		 if(rgbReadDutyRed(RGB_1) < 255 && rgbReadDutyBlue(RGB_1) < 255 && rgbReadDutyGreen(RGB_1) < 255)
1a0003f8:	2000      	movs	r0, #0
1a0003fa:	f001 ff1d 	bl	1a002238 <rgbReadDutyRed>
1a0003fe:	28ff      	cmp	r0, #255	; 0xff
1a000400:	d0b6      	beq.n	1a000370 <uartUSBreadHook+0x60>
1a000402:	2000      	movs	r0, #0
1a000404:	f001 ff2c 	bl	1a002260 <rgbReadDutyBlue>
1a000408:	28ff      	cmp	r0, #255	; 0xff
1a00040a:	d0b1      	beq.n	1a000370 <uartUSBreadHook+0x60>
1a00040c:	2000      	movs	r0, #0
1a00040e:	f001 ff1d 	bl	1a00224c <rgbReadDutyGreen>
1a000412:	28ff      	cmp	r0, #255	; 0xff
1a000414:	d0ac      	beq.n	1a000370 <uartUSBreadHook+0x60>
			 rgbWriteRaw(RGB_1, rgbReadDutyRed(RGB_1)*2, rgbReadDutyGreen(RGB_1)*2, rgbReadDutyBlue(RGB_1)*2);
1a000416:	2000      	movs	r0, #0
1a000418:	f001 ff0e 	bl	1a002238 <rgbReadDutyRed>
1a00041c:	4604      	mov	r4, r0
1a00041e:	2000      	movs	r0, #0
1a000420:	f001 ff14 	bl	1a00224c <rgbReadDutyGreen>
1a000424:	4605      	mov	r5, r0
1a000426:	2000      	movs	r0, #0
1a000428:	f001 ff1a 	bl	1a002260 <rgbReadDutyBlue>
1a00042c:	0043      	lsls	r3, r0, #1
1a00042e:	006a      	lsls	r2, r5, #1
1a000430:	0061      	lsls	r1, r4, #1
1a000432:	b25b      	sxtb	r3, r3
1a000434:	b252      	sxtb	r2, r2
1a000436:	b249      	sxtb	r1, r1
1a000438:	2000      	movs	r0, #0
1a00043a:	f001 fee7 	bl	1a00220c <rgbWriteRaw>
1a00043e:	e797      	b.n	1a000370 <uartUSBreadHook+0x60>
		 if(rgbReadDutyRed(RGB_1) > 1 || rgbReadDutyBlue(RGB_1) > 1 || rgbReadDutyGreen(RGB_1) > 1)
1a000440:	2000      	movs	r0, #0
1a000442:	f001 fef9 	bl	1a002238 <rgbReadDutyRed>
1a000446:	2801      	cmp	r0, #1
1a000448:	d914      	bls.n	1a000474 <uartUSBreadHook+0x164>
			 rgbWriteRaw(RGB_1, rgbReadDutyRed(RGB_1)/2, rgbReadDutyGreen(RGB_1)/2, rgbReadDutyBlue(RGB_1)/2);
1a00044a:	2000      	movs	r0, #0
1a00044c:	f001 fef4 	bl	1a002238 <rgbReadDutyRed>
1a000450:	4604      	mov	r4, r0
1a000452:	2000      	movs	r0, #0
1a000454:	f001 fefa 	bl	1a00224c <rgbReadDutyGreen>
1a000458:	4605      	mov	r5, r0
1a00045a:	2000      	movs	r0, #0
1a00045c:	f001 ff00 	bl	1a002260 <rgbReadDutyBlue>
1a000460:	f340 0347 	sbfx	r3, r0, #1, #8
1a000464:	f345 0247 	sbfx	r2, r5, #1, #8
1a000468:	f344 0147 	sbfx	r1, r4, #1, #8
1a00046c:	2000      	movs	r0, #0
1a00046e:	f001 fecd 	bl	1a00220c <rgbWriteRaw>
1a000472:	e77d      	b.n	1a000370 <uartUSBreadHook+0x60>
		 if(rgbReadDutyRed(RGB_1) > 1 || rgbReadDutyBlue(RGB_1) > 1 || rgbReadDutyGreen(RGB_1) > 1)
1a000474:	2000      	movs	r0, #0
1a000476:	f001 fef3 	bl	1a002260 <rgbReadDutyBlue>
1a00047a:	2801      	cmp	r0, #1
1a00047c:	d8e5      	bhi.n	1a00044a <uartUSBreadHook+0x13a>
1a00047e:	2000      	movs	r0, #0
1a000480:	f001 fee4 	bl	1a00224c <rgbReadDutyGreen>
1a000484:	2801      	cmp	r0, #1
1a000486:	d8e0      	bhi.n	1a00044a <uartUSBreadHook+0x13a>
1a000488:	e772      	b.n	1a000370 <uartUSBreadHook+0x60>
1a00048a:	bf00      	nop
1a00048c:	10000000 	.word	0x10000000
1a000490:	1a0037a0 	.word	0x1a0037a0
1a000494:	100000f0 	.word	0x100000f0

1a000498 <main>:

/*==================[funcion principal]======================================*/

// FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE ENCENDIDO O RESET.
int main( void )
{
1a000498:	b508      	push	{r3, lr}
   uint8_t dataUart;
   // ---------- CONFIGURACIONES ------------------------------

   // Inicializar y configurar la plataforma
   boardConfig();
1a00049a:	f001 fc53 	bl	1a001d44 <boardInit>

   // Inicializar UART_USB como salida de consola
   uartConfig(UART_USB, 115200);
1a00049e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a0004a2:	2003      	movs	r0, #3
1a0004a4:	f001 fbd0 	bl	1a001c48 <uartInit>

   // Mensaje de bienvenida y modo de uso
   stdioPrintf(UART_USB, "Bienvenido al controlador RGB por UART.\n\r");
1a0004a8:	4922      	ldr	r1, [pc, #136]	; (1a000534 <main+0x9c>)
1a0004aa:	2003      	movs	r0, #3
1a0004ac:	f001 fcbe 	bl	1a001e2c <stdioPrintf>
   stdioPrintf(UART_USB, "R = ROJO\n\r");
1a0004b0:	4921      	ldr	r1, [pc, #132]	; (1a000538 <main+0xa0>)
1a0004b2:	2003      	movs	r0, #3
1a0004b4:	f001 fcba 	bl	1a001e2c <stdioPrintf>
   stdioPrintf(UART_USB, "G = VERDE\n\r");
1a0004b8:	4920      	ldr	r1, [pc, #128]	; (1a00053c <main+0xa4>)
1a0004ba:	2003      	movs	r0, #3
1a0004bc:	f001 fcb6 	bl	1a001e2c <stdioPrintf>
   stdioPrintf(UART_USB, "B = AZUL\n\r");
1a0004c0:	491f      	ldr	r1, [pc, #124]	; (1a000540 <main+0xa8>)
1a0004c2:	2003      	movs	r0, #3
1a0004c4:	f001 fcb2 	bl	1a001e2c <stdioPrintf>
   stdioPrintf(UART_USB, "V = VIOLETA\n\r");
1a0004c8:	491e      	ldr	r1, [pc, #120]	; (1a000544 <main+0xac>)
1a0004ca:	2003      	movs	r0, #3
1a0004cc:	f001 fcae 	bl	1a001e2c <stdioPrintf>
   stdioPrintf(UART_USB, "Y = AMARILLO\n\r");
1a0004d0:	491d      	ldr	r1, [pc, #116]	; (1a000548 <main+0xb0>)
1a0004d2:	2003      	movs	r0, #3
1a0004d4:	f001 fcaa 	bl	1a001e2c <stdioPrintf>
   stdioPrintf(UART_USB, "W = BLANCO\n\r");
1a0004d8:	491c      	ldr	r1, [pc, #112]	; (1a00054c <main+0xb4>)
1a0004da:	2003      	movs	r0, #3
1a0004dc:	f001 fca6 	bl	1a001e2c <stdioPrintf>
   stdioPrintf(UART_USB, "C = CELESTE\n\r");
1a0004e0:	491b      	ldr	r1, [pc, #108]	; (1a000550 <main+0xb8>)
1a0004e2:	2003      	movs	r0, #3
1a0004e4:	f001 fca2 	bl	1a001e2c <stdioPrintf>
   stdioPrintf(UART_USB, "N = NEGRO\n\r");
1a0004e8:	491a      	ldr	r1, [pc, #104]	; (1a000554 <main+0xbc>)
1a0004ea:	2003      	movs	r0, #3
1a0004ec:	f001 fc9e 	bl	1a001e2c <stdioPrintf>
   stdioPrintf(UART_USB, "0 = TOGGLE LED\n\r");
1a0004f0:	4919      	ldr	r1, [pc, #100]	; (1a000558 <main+0xc0>)
1a0004f2:	2003      	movs	r0, #3
1a0004f4:	f001 fc9a 	bl	1a001e2c <stdioPrintf>

   // En la configuracion del driver RGB se le deben pasar los pines
   // En este caso se pasan los pines del LED RGB, pero pueden ser cuales quiera.
   rgbConfig (RGB_1, LEDR, LEDG, LEDB);
1a0004f8:	232a      	movs	r3, #42	; 0x2a
1a0004fa:	2229      	movs	r2, #41	; 0x29
1a0004fc:	2128      	movs	r1, #40	; 0x28
1a0004fe:	2000      	movs	r0, #0
1a000500:	f001 fde2 	bl	1a0020c8 <rgbInit>

   // Seteo un callback al evento de recepcion y habilito su interrupcion
    uartCallbackSet(UART_USB, UART_RECEIVE, uartUSBreadHook, NULL);
1a000504:	2300      	movs	r3, #0
1a000506:	4a15      	ldr	r2, [pc, #84]	; (1a00055c <main+0xc4>)
1a000508:	4619      	mov	r1, r3
1a00050a:	2003      	movs	r0, #3
1a00050c:	f001 fb12 	bl	1a001b34 <uartCallbackSet>

    // Habilito todas las interrupciones de UART_USB
    uartInterrupt(UART_USB, true);
1a000510:	2101      	movs	r1, #1
1a000512:	2003      	movs	r0, #3
1a000514:	f001 fac6 	bl	1a001aa4 <uartInterrupt>
   // ---------- REPETIR POR SIEMPRE --------------------------
   while( TRUE )
   {

      // Si desde la UART activaron el toggle se togglea el LED con el ultimo color guardado.
      if (flagToggle)
1a000518:	4b11      	ldr	r3, [pc, #68]	; (1a000560 <main+0xc8>)
1a00051a:	781b      	ldrb	r3, [r3, #0]
1a00051c:	2b00      	cmp	r3, #0
1a00051e:	d0fb      	beq.n	1a000518 <main+0x80>
      {
         rgbToggleLed(RGB_1);
1a000520:	2000      	movs	r0, #0
1a000522:	f001 fea7 	bl	1a002274 <rgbToggleLed>
         delay (500);
1a000526:	f44f 70fa 	mov.w	r0, #500	; 0x1f4
1a00052a:	2100      	movs	r1, #0
1a00052c:	f001 fc44 	bl	1a001db8 <delay>
1a000530:	e7f2      	b.n	1a000518 <main+0x80>
1a000532:	bf00      	nop
1a000534:	1a0037a8 	.word	0x1a0037a8
1a000538:	1a0037d4 	.word	0x1a0037d4
1a00053c:	1a0037e0 	.word	0x1a0037e0
1a000540:	1a0037ec 	.word	0x1a0037ec
1a000544:	1a0037f8 	.word	0x1a0037f8
1a000548:	1a003808 	.word	0x1a003808
1a00054c:	1a003818 	.word	0x1a003818
1a000550:	1a003828 	.word	0x1a003828
1a000554:	1a003838 	.word	0x1a003838
1a000558:	1a003844 	.word	0x1a003844
1a00055c:	1a000311 	.word	0x1a000311
1a000560:	100000f0 	.word	0x100000f0

1a000564 <initialise_monitor_handles>:
}
1a000564:	4770      	bx	lr
	...

1a000568 <Reset_Handler>:
void Reset_Handler(void) {
1a000568:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00056a:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a00056c:	4b19      	ldr	r3, [pc, #100]	; (1a0005d4 <Reset_Handler+0x6c>)
1a00056e:	4a1a      	ldr	r2, [pc, #104]	; (1a0005d8 <Reset_Handler+0x70>)
1a000570:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000574:	4a19      	ldr	r2, [pc, #100]	; (1a0005dc <Reset_Handler+0x74>)
1a000576:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00057a:	2300      	movs	r3, #0
1a00057c:	e005      	b.n	1a00058a <Reset_Handler+0x22>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a00057e:	4a18      	ldr	r2, [pc, #96]	; (1a0005e0 <Reset_Handler+0x78>)
1a000580:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000584:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a000588:	3301      	adds	r3, #1
1a00058a:	2b07      	cmp	r3, #7
1a00058c:	d9f7      	bls.n	1a00057e <Reset_Handler+0x16>
    __asm__ volatile("cpsie i");
1a00058e:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000590:	4b14      	ldr	r3, [pc, #80]	; (1a0005e4 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000592:	e007      	b.n	1a0005a4 <Reset_Handler+0x3c>
        SectionLen = *SectionTableAddr++;
1a000594:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a000598:	689a      	ldr	r2, [r3, #8]
1a00059a:	6859      	ldr	r1, [r3, #4]
1a00059c:	6818      	ldr	r0, [r3, #0]
1a00059e:	f7ff fdf4 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a0005a2:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a0005a4:	4a10      	ldr	r2, [pc, #64]	; (1a0005e8 <Reset_Handler+0x80>)
1a0005a6:	4293      	cmp	r3, r2
1a0005a8:	d3f4      	bcc.n	1a000594 <Reset_Handler+0x2c>
1a0005aa:	e006      	b.n	1a0005ba <Reset_Handler+0x52>
        ExeAddr = *SectionTableAddr++;
1a0005ac:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a0005ae:	6859      	ldr	r1, [r3, #4]
1a0005b0:	f854 0b08 	ldr.w	r0, [r4], #8
1a0005b4:	f7ff fdf8 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a0005b8:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a0005ba:	4a0c      	ldr	r2, [pc, #48]	; (1a0005ec <Reset_Handler+0x84>)
1a0005bc:	4293      	cmp	r3, r2
1a0005be:	d3f5      	bcc.n	1a0005ac <Reset_Handler+0x44>
    SystemInit();
1a0005c0:	f000 ff4c 	bl	1a00145c <SystemInit>
    __libc_init_array();
1a0005c4:	f002 fb18 	bl	1a002bf8 <__libc_init_array>
    initialise_monitor_handles();
1a0005c8:	f7ff ffcc 	bl	1a000564 <initialise_monitor_handles>
    main();
1a0005cc:	f7ff ff64 	bl	1a000498 <main>
        __asm__ volatile("wfi");
1a0005d0:	bf30      	wfi
    while (1) {
1a0005d2:	e7fd      	b.n	1a0005d0 <Reset_Handler+0x68>
1a0005d4:	40053000 	.word	0x40053000
1a0005d8:	10df1000 	.word	0x10df1000
1a0005dc:	01dff7ff 	.word	0x01dff7ff
1a0005e0:	e000e280 	.word	0xe000e280
1a0005e4:	1a000114 	.word	0x1a000114
1a0005e8:	1a000150 	.word	0x1a000150
1a0005ec:	1a000178 	.word	0x1a000178

1a0005f0 <_fini>:
void _fini(void) {}
1a0005f0:	4770      	bx	lr

1a0005f2 <_init>:
void _init(void) {}
1a0005f2:	4770      	bx	lr

1a0005f4 <_close_r>:
   (void) __params__;
}

USED int _close_r(struct _reent *r, int fd) {
   UNUSED(fd);
   SET_ERR(EBADF);
1a0005f4:	2309      	movs	r3, #9
1a0005f6:	6003      	str	r3, [r0, #0]
   return -1;
}
1a0005f8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0005fc:	4770      	bx	lr

1a0005fe <_fstat_r>:
}

USED int _fstat_r(struct _reent *r, int fd, struct stat *st) {
   UNUSED(fd);
   UNUSED(st);
   SET_ERR(ENOSYS);
1a0005fe:	2358      	movs	r3, #88	; 0x58
1a000600:	6003      	str	r3, [r0, #0]
   return -1;
}
1a000602:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000606:	4770      	bx	lr

1a000608 <_isatty_r>:
   UNUSED(r);
   return 1;
}

USED int _isatty_r(struct _reent *r, int fd) {
   switch (fd) {
1a000608:	2902      	cmp	r1, #2
1a00060a:	d904      	bls.n	1a000616 <_isatty_r+0xe>
   case 0:
   case 1:
   case 2:
       return 1;
   default:
       SET_ERR(EBADF);
1a00060c:	2309      	movs	r3, #9
1a00060e:	6003      	str	r3, [r0, #0]
       return -1;
1a000610:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000614:	4770      	bx	lr
       return 1;
1a000616:	2001      	movs	r0, #1
   }
}
1a000618:	4770      	bx	lr

1a00061a <_lseek_r>:

USED _off_t _lseek_r(struct _reent *r, int fd, _off_t off, int w) {
   UNUSED(fd);
   UNUSED(off);
   UNUSED(w);
   SET_ERR(ENOSYS);
1a00061a:	2358      	movs	r3, #88	; 0x58
1a00061c:	6003      	str	r3, [r0, #0]
   return -1;
}
1a00061e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000622:	4770      	bx	lr

1a000624 <_read_r>:
       SET_ERR(ENODEV);
       return -1;
   }
}
*/
USED _ssize_t _read_r(struct _reent *r, int fd, void *b, size_t n) {
1a000624:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000628:	4606      	mov	r6, r0
  size_t i = 0;
  switch (fd) {
1a00062a:	2902      	cmp	r1, #2
1a00062c:	d81c      	bhi.n	1a000668 <_read_r+0x44>
1a00062e:	4617      	mov	r7, r2
1a000630:	461d      	mov	r5, r3
  size_t i = 0;
1a000632:	2400      	movs	r4, #0
  case 0:
  case 1:
  case 2:
      while( i < n ){
1a000634:	42ac      	cmp	r4, r5
1a000636:	d211      	bcs.n	1a00065c <_read_r+0x38>
         int c = __stdio_getchar();
1a000638:	f000 f935 	bl	1a0008a6 <__stdio_getchar>
         if( c != -1 ){
1a00063c:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a000640:	d0f8      	beq.n	1a000634 <_read_r+0x10>
            ((char*) b)[i++] = (char) c;
1a000642:	f104 0801 	add.w	r8, r4, #1
1a000646:	5538      	strb	r0, [r7, r4]
            if( c == '\r' || c == '\n' ){
1a000648:	280d      	cmp	r0, #13
1a00064a:	d003      	beq.n	1a000654 <_read_r+0x30>
1a00064c:	280a      	cmp	r0, #10
1a00064e:	d001      	beq.n	1a000654 <_read_r+0x30>
            ((char*) b)[i++] = (char) c;
1a000650:	4644      	mov	r4, r8
1a000652:	e7ef      	b.n	1a000634 <_read_r+0x10>
               // read anotherone to prevent \r\n
               (void) __stdio_getchar();
1a000654:	f000 f927 	bl	1a0008a6 <__stdio_getchar>
               return i;
1a000658:	4640      	mov	r0, r8
1a00065a:	e003      	b.n	1a000664 <_read_r+0x40>
            }
         }
      }
      SET_ERR(ENODEV);
1a00065c:	2313      	movs	r3, #19
1a00065e:	6033      	str	r3, [r6, #0]
      return -1;
1a000660:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
  default:
      SET_ERR(ENODEV);
      return -1;
  }
}
1a000664:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      SET_ERR(ENODEV);
1a000668:	2313      	movs	r3, #19
1a00066a:	6003      	str	r3, [r0, #0]
      return -1;
1a00066c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000670:	e7f8      	b.n	1a000664 <_read_r+0x40>

1a000672 <_write_r>:
   return -1;
}

USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
   size_t i;
   switch (fd) {
1a000672:	2902      	cmp	r1, #2
1a000674:	d80c      	bhi.n	1a000690 <_write_r+0x1e>
USED _ssize_t _write_r(struct _reent *r, int fd, const void *b, size_t n) {
1a000676:	b570      	push	{r4, r5, r6, lr}
1a000678:	4616      	mov	r6, r2
1a00067a:	461d      	mov	r5, r3
   case 0:
   case 1:
   case 2:
       for (i = 0; i < n; i++)
1a00067c:	2400      	movs	r4, #0
1a00067e:	e003      	b.n	1a000688 <_write_r+0x16>
           __stdio_putchar(((char*) b)[i]);
1a000680:	5d30      	ldrb	r0, [r6, r4]
1a000682:	f000 f90b 	bl	1a00089c <__stdio_putchar>
       for (i = 0; i < n; i++)
1a000686:	3401      	adds	r4, #1
1a000688:	42ac      	cmp	r4, r5
1a00068a:	d3f9      	bcc.n	1a000680 <_write_r+0xe>
       return n;
1a00068c:	4628      	mov	r0, r5
   default:
       SET_ERR(ENODEV);
       return -1;
   }
}
1a00068e:	bd70      	pop	{r4, r5, r6, pc}
       SET_ERR(ENODEV);
1a000690:	2313      	movs	r3, #19
1a000692:	6003      	str	r3, [r0, #0]
       return -1;
1a000694:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000698:	4770      	bx	lr
	...

1a00069c <_sbrk_r>:

USED void *_sbrk_r(struct _reent *r, ptrdiff_t incr) {
   extern int _pvHeapStart;
   static void *heap_end;
   void *prev_heap_end;
   if (heap_end == 0) {
1a00069c:	4b05      	ldr	r3, [pc, #20]	; (1a0006b4 <_sbrk_r+0x18>)
1a00069e:	681b      	ldr	r3, [r3, #0]
1a0006a0:	b123      	cbz	r3, 1a0006ac <_sbrk_r+0x10>
       heap_end = &_pvHeapStart;
   }
   prev_heap_end = heap_end;
1a0006a2:	4b04      	ldr	r3, [pc, #16]	; (1a0006b4 <_sbrk_r+0x18>)
1a0006a4:	6818      	ldr	r0, [r3, #0]
   heap_end += incr;
1a0006a6:	4401      	add	r1, r0
1a0006a8:	6019      	str	r1, [r3, #0]
   return prev_heap_end;
}
1a0006aa:	4770      	bx	lr
       heap_end = &_pvHeapStart;
1a0006ac:	4b01      	ldr	r3, [pc, #4]	; (1a0006b4 <_sbrk_r+0x18>)
1a0006ae:	4a02      	ldr	r2, [pc, #8]	; (1a0006b8 <_sbrk_r+0x1c>)
1a0006b0:	601a      	str	r2, [r3, #0]
1a0006b2:	e7f6      	b.n	1a0006a2 <_sbrk_r+0x6>
1a0006b4:	100000f4 	.word	0x100000f4
1a0006b8:	100001c0 	.word	0x100001c0

1a0006bc <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0006bc:	2200      	movs	r2, #0
1a0006be:	2a05      	cmp	r2, #5
1a0006c0:	d81b      	bhi.n	1a0006fa <Board_LED_Init+0x3e>
{
1a0006c2:	b510      	push	{r4, lr}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0006c4:	4b0d      	ldr	r3, [pc, #52]	; (1a0006fc <Board_LED_Init+0x40>)
1a0006c6:	f813 e012 	ldrb.w	lr, [r3, r2, lsl #1]
1a0006ca:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a0006ce:	f893 c001 	ldrb.w	ip, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0006d2:	4b0b      	ldr	r3, [pc, #44]	; (1a000700 <Board_LED_Init+0x44>)
1a0006d4:	f50e 6400 	add.w	r4, lr, #2048	; 0x800
1a0006d8:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
1a0006dc:	2001      	movs	r0, #1
1a0006de:	fa00 f00c 	lsl.w	r0, r0, ip
1a0006e2:	4301      	orrs	r1, r0
1a0006e4:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0006e8:	eb03 134e 	add.w	r3, r3, lr, lsl #5
1a0006ec:	2100      	movs	r1, #0
1a0006ee:	f803 100c 	strb.w	r1, [r3, ip]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0006f2:	3201      	adds	r2, #1
1a0006f4:	2a05      	cmp	r2, #5
1a0006f6:	d9e5      	bls.n	1a0006c4 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0006f8:	bd10      	pop	{r4, pc}
1a0006fa:	4770      	bx	lr
1a0006fc:	1a003864 	.word	0x1a003864
1a000700:	400f4000 	.word	0x400f4000

1a000704 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000704:	2300      	movs	r3, #0
1a000706:	2b03      	cmp	r3, #3
1a000708:	d819      	bhi.n	1a00073e <Board_TEC_Init+0x3a>
{
1a00070a:	b410      	push	{r4}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00070c:	490c      	ldr	r1, [pc, #48]	; (1a000740 <Board_TEC_Init+0x3c>)
1a00070e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000712:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000716:	f891 c001 	ldrb.w	ip, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a00071a:	4c0a      	ldr	r4, [pc, #40]	; (1a000744 <Board_TEC_Init+0x40>)
1a00071c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000720:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000724:	2001      	movs	r0, #1
1a000726:	fa00 f00c 	lsl.w	r0, r0, ip
1a00072a:	ea21 0100 	bic.w	r1, r1, r0
1a00072e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a000732:	3301      	adds	r3, #1
1a000734:	2b03      	cmp	r3, #3
1a000736:	d9e9      	bls.n	1a00070c <Board_TEC_Init+0x8>
   }
}
1a000738:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00073c:	4770      	bx	lr
1a00073e:	4770      	bx	lr
1a000740:	1a00385c 	.word	0x1a00385c
1a000744:	400f4000 	.word	0x400f4000

1a000748 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000748:	2300      	movs	r3, #0
1a00074a:	2b08      	cmp	r3, #8
1a00074c:	d819      	bhi.n	1a000782 <Board_GPIO_Init+0x3a>
{
1a00074e:	b410      	push	{r4}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a000750:	490c      	ldr	r1, [pc, #48]	; (1a000784 <Board_GPIO_Init+0x3c>)
1a000752:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000756:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a00075a:	f891 c001 	ldrb.w	ip, [r1, #1]
1a00075e:	4c0a      	ldr	r4, [pc, #40]	; (1a000788 <Board_GPIO_Init+0x40>)
1a000760:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000764:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000768:	2001      	movs	r0, #1
1a00076a:	fa00 f00c 	lsl.w	r0, r0, ip
1a00076e:	ea21 0100 	bic.w	r1, r1, r0
1a000772:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000776:	3301      	adds	r3, #1
1a000778:	2b08      	cmp	r3, #8
1a00077a:	d9e9      	bls.n	1a000750 <Board_GPIO_Init+0x8>
   }
}
1a00077c:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000780:	4770      	bx	lr
1a000782:	4770      	bx	lr
1a000784:	1a003870 	.word	0x1a003870
1a000788:	400f4000 	.word	0x400f4000

1a00078c <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a00078c:	b510      	push	{r4, lr}
1a00078e:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a000790:	4c08      	ldr	r4, [pc, #32]	; (1a0007b4 <Board_ADC_Init+0x28>)
1a000792:	4669      	mov	r1, sp
1a000794:	4620      	mov	r0, r4
1a000796:	f000 f905 	bl	1a0009a4 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a00079a:	4a07      	ldr	r2, [pc, #28]	; (1a0007b8 <Board_ADC_Init+0x2c>)
1a00079c:	4669      	mov	r1, sp
1a00079e:	4620      	mov	r0, r4
1a0007a0:	f000 f920 	bl	1a0009e4 <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a0007a4:	2200      	movs	r2, #0
1a0007a6:	4669      	mov	r1, sp
1a0007a8:	4620      	mov	r0, r4
1a0007aa:	f000 f934 	bl	1a000a16 <Chip_ADC_SetResolution>
}
1a0007ae:	b002      	add	sp, #8
1a0007b0:	bd10      	pop	{r4, pc}
1a0007b2:	bf00      	nop
1a0007b4:	400e3000 	.word	0x400e3000
1a0007b8:	00061a80 	.word	0x00061a80

1a0007bc <Board_SPI_Init>:
{
1a0007bc:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0007be:	4c0b      	ldr	r4, [pc, #44]	; (1a0007ec <Board_SPI_Init+0x30>)
1a0007c0:	4620      	mov	r0, r4
1a0007c2:	f000 fc8d 	bl	1a0010e0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0007c6:	6863      	ldr	r3, [r4, #4]
1a0007c8:	f023 0304 	bic.w	r3, r3, #4
1a0007cc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0007ce:	6823      	ldr	r3, [r4, #0]
1a0007d0:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0007d4:	f043 0307 	orr.w	r3, r3, #7
1a0007d8:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0007da:	4905      	ldr	r1, [pc, #20]	; (1a0007f0 <Board_SPI_Init+0x34>)
1a0007dc:	4620      	mov	r0, r4
1a0007de:	f000 fc5e 	bl	1a00109e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0007e2:	6863      	ldr	r3, [r4, #4]
1a0007e4:	f043 0302 	orr.w	r3, r3, #2
1a0007e8:	6063      	str	r3, [r4, #4]
}
1a0007ea:	bd10      	pop	{r4, pc}
1a0007ec:	400c5000 	.word	0x400c5000
1a0007f0:	000186a0 	.word	0x000186a0

1a0007f4 <Board_I2C_Init>:
{
1a0007f4:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0007f6:	2000      	movs	r0, #0
1a0007f8:	f000 fc00 	bl	1a000ffc <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0007fc:	4b04      	ldr	r3, [pc, #16]	; (1a000810 <Board_I2C_Init+0x1c>)
1a0007fe:	f640 0208 	movw	r2, #2056	; 0x808
1a000802:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a000806:	4903      	ldr	r1, [pc, #12]	; (1a000814 <Board_I2C_Init+0x20>)
1a000808:	2000      	movs	r0, #0
1a00080a:	f000 fc0b 	bl	1a001024 <Chip_I2C_SetClockRate>
}
1a00080e:	bd08      	pop	{r3, pc}
1a000810:	40086000 	.word	0x40086000
1a000814:	000f4240 	.word	0x000f4240

1a000818 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000818:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a00081a:	4c07      	ldr	r4, [pc, #28]	; (1a000838 <Board_Debug_Init+0x20>)
1a00081c:	4620      	mov	r0, r4
1a00081e:	f000 fd65 	bl	1a0012ec <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a000822:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000826:	4620      	mov	r0, r4
1a000828:	f000 fdaa 	bl	1a001380 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a00082c:	2303      	movs	r3, #3
1a00082e:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a000830:	2301      	movs	r3, #1
1a000832:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000834:	bd10      	pop	{r4, pc}
1a000836:	bf00      	nop
1a000838:	400c1000 	.word	0x400c1000

1a00083c <Board_UARTPutChar>:
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a00083c:	4b03      	ldr	r3, [pc, #12]	; (1a00084c <Board_UARTPutChar+0x10>)
1a00083e:	695b      	ldr	r3, [r3, #20]


void Board_UARTPutChar(char ch)
{
   while ( !(Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_THRE));
1a000840:	f013 0f20 	tst.w	r3, #32
1a000844:	d0fa      	beq.n	1a00083c <Board_UARTPutChar>
	pUART->THR = (uint32_t) data;
1a000846:	4b01      	ldr	r3, [pc, #4]	; (1a00084c <Board_UARTPutChar+0x10>)
1a000848:	6018      	str	r0, [r3, #0]
   Chip_UART_SendByte(DEBUG_UART, (uint8_t) ch);
}
1a00084a:	4770      	bx	lr
1a00084c:	400c1000 	.word	0x400c1000

1a000850 <Board_UARTGetChar>:
	return pUART->LSR;
1a000850:	4b05      	ldr	r3, [pc, #20]	; (1a000868 <Board_UARTGetChar+0x18>)
1a000852:	695b      	ldr	r3, [r3, #20]


int Board_UARTGetChar(void)
{
   if (Chip_UART_ReadLineStatus(DEBUG_UART) & UART_LSR_RDR) {
1a000854:	f013 0f01 	tst.w	r3, #1
1a000858:	d003      	beq.n	1a000862 <Board_UARTGetChar+0x12>
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a00085a:	4b03      	ldr	r3, [pc, #12]	; (1a000868 <Board_UARTGetChar+0x18>)
1a00085c:	6818      	ldr	r0, [r3, #0]
      return (int) Chip_UART_ReadByte(DEBUG_UART);
1a00085e:	b2c0      	uxtb	r0, r0
1a000860:	4770      	bx	lr
   }
   return EOF;
1a000862:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
}
1a000866:	4770      	bx	lr
1a000868:	400c1000 	.word	0x400c1000

1a00086c <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a00086c:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00086e:	f7ff ffd3 	bl	1a000818 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a000872:	4809      	ldr	r0, [pc, #36]	; (1a000898 <Board_Init+0x2c>)
1a000874:	f000 fbb0 	bl	1a000fd8 <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000878:	f7ff ff66 	bl	1a000748 <Board_GPIO_Init>
   Board_ADC_Init();
1a00087c:	f7ff ff86 	bl	1a00078c <Board_ADC_Init>
   Board_SPI_Init();
1a000880:	f7ff ff9c 	bl	1a0007bc <Board_SPI_Init>
   Board_I2C_Init();
1a000884:	f7ff ffb6 	bl	1a0007f4 <Board_I2C_Init>

   Board_LED_Init();
1a000888:	f7ff ff18 	bl	1a0006bc <Board_LED_Init>
   Board_TEC_Init();
1a00088c:	f7ff ff3a 	bl	1a000704 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a000890:	f000 f8c8 	bl	1a000a24 <SystemCoreClockUpdate>
}
1a000894:	bd08      	pop	{r3, pc}
1a000896:	bf00      	nop
1a000898:	400f4000 	.word	0x400f4000

1a00089c <__stdio_putchar>:
   curADCChannel = 0xFF;
   return data;
}

void __stdio_putchar(int c)
{
1a00089c:	b508      	push	{r3, lr}
   Board_UARTPutChar(c);
1a00089e:	b2c0      	uxtb	r0, r0
1a0008a0:	f7ff ffcc 	bl	1a00083c <Board_UARTPutChar>
}
1a0008a4:	bd08      	pop	{r3, pc}

1a0008a6 <__stdio_getchar>:

int __stdio_getchar()
{
1a0008a6:	b508      	push	{r3, lr}
   return Board_UARTGetChar();;
1a0008a8:	f7ff ffd2 	bl	1a000850 <Board_UARTGetChar>
}
1a0008ac:	bd08      	pop	{r3, pc}

1a0008ae <__stdio_init>:

void __stdio_init()
{
1a0008ae:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a0008b0:	f7ff ffb2 	bl	1a000818 <Board_Debug_Init>
1a0008b4:	bd08      	pop	{r3, pc}
	...

1a0008b8 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0008b8:	2300      	movs	r3, #0
1a0008ba:	e00c      	b.n	1a0008d6 <Board_SetupMuxing+0x1e>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a0008bc:	4a07      	ldr	r2, [pc, #28]	; (1a0008dc <Board_SetupMuxing+0x24>)
1a0008be:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a0008c2:	f812 c023 	ldrb.w	ip, [r2, r3, lsl #2]
1a0008c6:	784a      	ldrb	r2, [r1, #1]
1a0008c8:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a0008ca:	eb02 124c 	add.w	r2, r2, ip, lsl #5
1a0008ce:	4904      	ldr	r1, [pc, #16]	; (1a0008e0 <Board_SetupMuxing+0x28>)
1a0008d0:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a0008d4:	3301      	adds	r3, #1
1a0008d6:	2b1c      	cmp	r3, #28
1a0008d8:	d9f0      	bls.n	1a0008bc <Board_SetupMuxing+0x4>


void Board_SetupMuxing(void)
{
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a0008da:	4770      	bx	lr
1a0008dc:	1a00388c 	.word	0x1a00388c
1a0008e0:	40086000 	.word	0x40086000

1a0008e4 <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a0008e4:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a0008e6:	4a17      	ldr	r2, [pc, #92]	; (1a000944 <Board_SetupClocking+0x60>)
1a0008e8:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a0008ec:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0008f0:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0008f4:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0008f8:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0008fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000900:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a000904:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a000908:	2201      	movs	r2, #1
1a00090a:	490f      	ldr	r1, [pc, #60]	; (1a000948 <Board_SetupClocking+0x64>)
1a00090c:	2006      	movs	r0, #6
1a00090e:	f000 fc03 	bl	1a001118 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a000912:	2400      	movs	r4, #0
1a000914:	b14c      	cbz	r4, 1a00092a <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a000916:	4b0b      	ldr	r3, [pc, #44]	; (1a000944 <Board_SetupClocking+0x60>)
1a000918:	685a      	ldr	r2, [r3, #4]
1a00091a:	f022 020c 	bic.w	r2, r2, #12
1a00091e:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a000920:	685a      	ldr	r2, [r3, #4]
1a000922:	f042 0203 	orr.w	r2, r2, #3
1a000926:	605a      	str	r2, [r3, #4]
}
1a000928:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a00092a:	4808      	ldr	r0, [pc, #32]	; (1a00094c <Board_SetupClocking+0x68>)
1a00092c:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a000930:	2301      	movs	r3, #1
1a000932:	788a      	ldrb	r2, [r1, #2]
1a000934:	7849      	ldrb	r1, [r1, #1]
1a000936:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a00093a:	f000 faa7 	bl	1a000e8c <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a00093e:	3401      	adds	r4, #1
1a000940:	e7e8      	b.n	1a000914 <Board_SetupClocking+0x30>
1a000942:	bf00      	nop
1a000944:	40043000 	.word	0x40043000
1a000948:	0c28cb00 	.word	0x0c28cb00
1a00094c:	1a003888 	.word	0x1a003888

1a000950 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a000950:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a000952:	f7ff ffb1 	bl	1a0008b8 <Board_SetupMuxing>
    Board_SetupClocking();
1a000956:	f7ff ffc5 	bl	1a0008e4 <Board_SetupClocking>
}
1a00095a:	bd08      	pop	{r3, pc}

1a00095c <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a00095c:	4b03      	ldr	r3, [pc, #12]	; (1a00096c <Chip_ADC_GetClockIndex+0x10>)
1a00095e:	4298      	cmp	r0, r3
1a000960:	d001      	beq.n	1a000966 <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a000962:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a000964:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a000966:	2004      	movs	r0, #4
1a000968:	4770      	bx	lr
1a00096a:	bf00      	nop
1a00096c:	400e4000 	.word	0x400e4000

1a000970 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000970:	b570      	push	{r4, r5, r6, lr}
1a000972:	460d      	mov	r5, r1
1a000974:	4614      	mov	r4, r2
1a000976:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000978:	f7ff fff0 	bl	1a00095c <Chip_ADC_GetClockIndex>
1a00097c:	f000 fb06 	bl	1a000f8c <Chip_Clock_GetRate>
	if (burstMode) {
1a000980:	b155      	cbz	r5, 1a000998 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a000982:	fb06 f404 	mul.w	r4, r6, r4
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a000986:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a00098a:	0064      	lsls	r4, r4, #1
1a00098c:	fbb0 f0f4 	udiv	r0, r0, r4
1a000990:	b2c0      	uxtb	r0, r0
1a000992:	3801      	subs	r0, #1
	return div;
}
1a000994:	b2c0      	uxtb	r0, r0
1a000996:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000998:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a00099c:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a0009a0:	e7f1      	b.n	1a000986 <getClkDiv+0x16>
	...

1a0009a4 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a0009a4:	b538      	push	{r3, r4, r5, lr}
1a0009a6:	4605      	mov	r5, r0
1a0009a8:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a0009aa:	f7ff ffd7 	bl	1a00095c <Chip_ADC_GetClockIndex>
1a0009ae:	2301      	movs	r3, #1
1a0009b0:	461a      	mov	r2, r3
1a0009b2:	4619      	mov	r1, r3
1a0009b4:	f000 fab2 	bl	1a000f1c <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a0009b8:	2100      	movs	r1, #0
1a0009ba:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a0009bc:	4a08      	ldr	r2, [pc, #32]	; (1a0009e0 <Chip_ADC_Init+0x3c>)
1a0009be:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a0009c0:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a0009c2:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a0009c4:	230b      	movs	r3, #11
1a0009c6:	4628      	mov	r0, r5
1a0009c8:	f7ff ffd2 	bl	1a000970 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a0009cc:	0200      	lsls	r0, r0, #8
1a0009ce:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a0009d2:	7923      	ldrb	r3, [r4, #4]
1a0009d4:	045b      	lsls	r3, r3, #17
1a0009d6:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0009da:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0009dc:	602b      	str	r3, [r5, #0]
}
1a0009de:	bd38      	pop	{r3, r4, r5, pc}
1a0009e0:	00061a80 	.word	0x00061a80

1a0009e4 <Chip_ADC_SetSampleRate>:
	setStartMode(pADC, (uint8_t) mode);
}

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a0009e4:	b570      	push	{r4, r5, r6, lr}
1a0009e6:	4605      	mov	r5, r0
1a0009e8:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a0009ea:	6804      	ldr	r4, [r0, #0]
1a0009ec:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a0009f0:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a0009f4:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a0009f6:	790b      	ldrb	r3, [r1, #4]
1a0009f8:	f1c3 030b 	rsb	r3, r3, #11
1a0009fc:	b2db      	uxtb	r3, r3
1a0009fe:	7949      	ldrb	r1, [r1, #5]
1a000a00:	f7ff ffb6 	bl	1a000970 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000a04:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000a08:	7933      	ldrb	r3, [r6, #4]
1a000a0a:	045b      	lsls	r3, r3, #17
1a000a0c:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000a10:	4323      	orrs	r3, r4
	pADC->CR = cr;
1a000a12:	602b      	str	r3, [r5, #0]
}
1a000a14:	bd70      	pop	{r4, r5, r6, pc}

1a000a16 <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a000a16:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000a18:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000a1a:	680a      	ldr	r2, [r1, #0]
1a000a1c:	f7ff ffe2 	bl	1a0009e4 <Chip_ADC_SetSampleRate>
}
1a000a20:	bd08      	pop	{r3, pc}
	...

1a000a24 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a000a24:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a000a26:	2069      	movs	r0, #105	; 0x69
1a000a28:	f000 fab0 	bl	1a000f8c <Chip_Clock_GetRate>
1a000a2c:	4b01      	ldr	r3, [pc, #4]	; (1a000a34 <SystemCoreClockUpdate+0x10>)
1a000a2e:	6018      	str	r0, [r3, #0]
}
1a000a30:	bd08      	pop	{r3, pc}
1a000a32:	bf00      	nop
1a000a34:	100000f8 	.word	0x100000f8

1a000a38 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000a38:	b570      	push	{r4, r5, r6, lr}
1a000a3a:	4686      	mov	lr, r0

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a000a3c:	680b      	ldr	r3, [r1, #0]
1a000a3e:	f013 0f80 	tst.w	r3, #128	; 0x80
1a000a42:	d002      	beq.n	1a000a4a <pll_calc_divs+0x12>
		ppll->ctrl &= ~(1 << 6);
1a000a44:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000a48:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a000a4a:	4675      	mov	r5, lr
1a000a4c:	2401      	movs	r4, #1
1a000a4e:	e03c      	b.n	1a000aca <pll_calc_divs+0x92>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a000a50:	694b      	ldr	r3, [r1, #20]
1a000a52:	fb02 f303 	mul.w	r3, r2, r3
1a000a56:	fbb3 f3f4 	udiv	r3, r3, r4
1a000a5a:	e01e      	b.n	1a000a9a <pll_calc_divs+0x62>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a000a5c:	4618      	mov	r0, r3
	if (val < 0)
1a000a5e:	ebbe 0600 	subs.w	r6, lr, r0
1a000a62:	d428      	bmi.n	1a000ab6 <pll_calc_divs+0x7e>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000a64:	42b5      	cmp	r5, r6
1a000a66:	d907      	bls.n	1a000a78 <pll_calc_divs+0x40>
					ppll->nsel = n;
1a000a68:	608c      	str	r4, [r1, #8]
					ppll->psel = p + 1;
1a000a6a:	f10c 0501 	add.w	r5, ip, #1
1a000a6e:	60cd      	str	r5, [r1, #12]
					ppll->msel = m;
1a000a70:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a000a72:	6188      	str	r0, [r1, #24]
					ppll->fcco = fcco;
1a000a74:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000a76:	4635      	mov	r5, r6
			for (m = 1; m <= 256; m++) {
1a000a78:	3201      	adds	r2, #1
1a000a7a:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a000a7e:	dc1c      	bgt.n	1a000aba <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a000a80:	680e      	ldr	r6, [r1, #0]
1a000a82:	f016 0f40 	tst.w	r6, #64	; 0x40
1a000a86:	d0e3      	beq.n	1a000a50 <pll_calc_divs+0x18>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000a88:	f10c 0301 	add.w	r3, ip, #1
1a000a8c:	fa02 f303 	lsl.w	r3, r2, r3
1a000a90:	6948      	ldr	r0, [r1, #20]
1a000a92:	fb00 f303 	mul.w	r3, r0, r3
1a000a96:	fbb3 f3f4 	udiv	r3, r3, r4
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000a9a:	480f      	ldr	r0, [pc, #60]	; (1a000ad8 <pll_calc_divs+0xa0>)
1a000a9c:	4283      	cmp	r3, r0
1a000a9e:	d9eb      	bls.n	1a000a78 <pll_calc_divs+0x40>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a000aa0:	480e      	ldr	r0, [pc, #56]	; (1a000adc <pll_calc_divs+0xa4>)
1a000aa2:	4283      	cmp	r3, r0
1a000aa4:	d809      	bhi.n	1a000aba <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000aa6:	f016 0f80 	tst.w	r6, #128	; 0x80
1a000aaa:	d1d7      	bne.n	1a000a5c <pll_calc_divs+0x24>
					fout = fcco >> (p + 1);
1a000aac:	f10c 0001 	add.w	r0, ip, #1
1a000ab0:	fa23 f000 	lsr.w	r0, r3, r0
1a000ab4:	e7d3      	b.n	1a000a5e <pll_calc_divs+0x26>
		return -val;
1a000ab6:	4276      	negs	r6, r6
1a000ab8:	e7d4      	b.n	1a000a64 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000aba:	f10c 0c01 	add.w	ip, ip, #1
1a000abe:	f1bc 0f03 	cmp.w	ip, #3
1a000ac2:	dc01      	bgt.n	1a000ac8 <pll_calc_divs+0x90>
			for (m = 1; m <= 256; m++) {
1a000ac4:	2201      	movs	r2, #1
1a000ac6:	e7d8      	b.n	1a000a7a <pll_calc_divs+0x42>
	for (n = 1; n <= 4; n++) {
1a000ac8:	3401      	adds	r4, #1
1a000aca:	2c04      	cmp	r4, #4
1a000acc:	dc02      	bgt.n	1a000ad4 <pll_calc_divs+0x9c>
		for (p = 0; p < 4; p ++) {
1a000ace:	f04f 0c00 	mov.w	ip, #0
1a000ad2:	e7f4      	b.n	1a000abe <pll_calc_divs+0x86>
				}
			}
		}
	}
}
1a000ad4:	bd70      	pop	{r4, r5, r6, pc}
1a000ad6:	bf00      	nop
1a000ad8:	094c5eff 	.word	0x094c5eff
1a000adc:	1312d000 	.word	0x1312d000

1a000ae0 <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a000ae0:	b5f0      	push	{r4, r5, r6, r7, lr}
1a000ae2:	b09d      	sub	sp, #116	; 0x74
1a000ae4:	4605      	mov	r5, r0
1a000ae6:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000ae8:	2260      	movs	r2, #96	; 0x60
1a000aea:	2100      	movs	r1, #0
1a000aec:	a801      	add	r0, sp, #4
1a000aee:	f002 f8ab 	bl	1a002c48 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a000af2:	2380      	movs	r3, #128	; 0x80
1a000af4:	9301      	str	r3, [sp, #4]
	pll[0].fin = ppll->fin;
1a000af6:	6963      	ldr	r3, [r4, #20]
1a000af8:	9306      	str	r3, [sp, #24]
	pll[0].srcin = ppll->srcin;
1a000afa:	7923      	ldrb	r3, [r4, #4]
1a000afc:	f88d 3008 	strb.w	r3, [sp, #8]
	pll_calc_divs(freq, &pll[0]);
1a000b00:	a901      	add	r1, sp, #4
1a000b02:	4628      	mov	r0, r5
1a000b04:	f7ff ff98 	bl	1a000a38 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a000b08:	9b07      	ldr	r3, [sp, #28]
1a000b0a:	42ab      	cmp	r3, r5
1a000b0c:	d02a      	beq.n	1a000b64 <pll_get_frac+0x84>
	if (val < 0)
1a000b0e:	1aeb      	subs	r3, r5, r3
1a000b10:	d431      	bmi.n	1a000b76 <pll_get_frac+0x96>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a000b12:	461e      	mov	r6, r3
1a000b14:	9319      	str	r3, [sp, #100]	; 0x64

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a000b16:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a000b18:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a000b1c:	9311      	str	r3, [sp, #68]	; 0x44
	pll[2].fin = ppll->fin;
1a000b1e:	6963      	ldr	r3, [r4, #20]
1a000b20:	9316      	str	r3, [sp, #88]	; 0x58
	pll[2].srcin = ppll->srcin;
1a000b22:	7923      	ldrb	r3, [r4, #4]
1a000b24:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	pll_calc_divs(freq, &pll[2]);
1a000b28:	a911      	add	r1, sp, #68	; 0x44
1a000b2a:	4628      	mov	r0, r5
1a000b2c:	f7ff ff84 	bl	1a000a38 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a000b30:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a000b32:	42ab      	cmp	r3, r5
1a000b34:	d021      	beq.n	1a000b7a <pll_get_frac+0x9a>
	if (val < 0)
1a000b36:	1aeb      	subs	r3, r5, r3
1a000b38:	d427      	bmi.n	1a000b8a <pll_get_frac+0xaa>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a000b3a:	461f      	mov	r7, r3
1a000b3c:	931b      	str	r3, [sp, #108]	; 0x6c
	
	if (freq <= 110000000) {
1a000b3e:	4b2b      	ldr	r3, [pc, #172]	; (1a000bec <pll_get_frac+0x10c>)
1a000b40:	429d      	cmp	r5, r3
1a000b42:	d924      	bls.n	1a000b8e <pll_get_frac+0xae>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a000b44:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (val < 0)
1a000b46:	1aed      	subs	r5, r5, r3
1a000b48:	d434      	bmi.n	1a000bb4 <pll_get_frac+0xd4>
	diff[1] = ABS(freq - pll[1].fout);
1a000b4a:	951a      	str	r5, [sp, #104]	; 0x68

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a000b4c:	42ae      	cmp	r6, r5
1a000b4e:	dc3b      	bgt.n	1a000bc8 <pll_get_frac+0xe8>
		if (diff[0] <= diff[2]) {
1a000b50:	42be      	cmp	r6, r7
1a000b52:	dc31      	bgt.n	1a000bb8 <pll_get_frac+0xd8>
			*ppll = pll[0];
1a000b54:	ad01      	add	r5, sp, #4
1a000b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000b62:	e006      	b.n	1a000b72 <pll_get_frac+0x92>
		*ppll = pll[0];
1a000b64:	ad01      	add	r5, sp, #4
1a000b66:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b68:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b6a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b6e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000b72:	b01d      	add	sp, #116	; 0x74
1a000b74:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000b76:	425b      	negs	r3, r3
1a000b78:	e7cb      	b.n	1a000b12 <pll_get_frac+0x32>
		*ppll = pll[2];
1a000b7a:	ad11      	add	r5, sp, #68	; 0x44
1a000b7c:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000b7e:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000b80:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000b84:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000b88:	e7f3      	b.n	1a000b72 <pll_get_frac+0x92>
		return -val;
1a000b8a:	425b      	negs	r3, r3
1a000b8c:	e7d5      	b.n	1a000b3a <pll_get_frac+0x5a>
		pll[1].ctrl = (1 << 6);
1a000b8e:	2340      	movs	r3, #64	; 0x40
1a000b90:	9309      	str	r3, [sp, #36]	; 0x24
		pll[1].fin = ppll->fin;
1a000b92:	6963      	ldr	r3, [r4, #20]
1a000b94:	930e      	str	r3, [sp, #56]	; 0x38
		pll_calc_divs(freq, &pll[1]);
1a000b96:	a909      	add	r1, sp, #36	; 0x24
1a000b98:	4628      	mov	r0, r5
1a000b9a:	f7ff ff4d 	bl	1a000a38 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000b9e:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a000ba0:	42ab      	cmp	r3, r5
1a000ba2:	d1cf      	bne.n	1a000b44 <pll_get_frac+0x64>
			*ppll = pll[1];
1a000ba4:	ad09      	add	r5, sp, #36	; 0x24
1a000ba6:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000ba8:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000baa:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bae:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000bb2:	e7de      	b.n	1a000b72 <pll_get_frac+0x92>
		return -val;
1a000bb4:	426d      	negs	r5, r5
1a000bb6:	e7c8      	b.n	1a000b4a <pll_get_frac+0x6a>
			*ppll = pll[2];
1a000bb8:	ad11      	add	r5, sp, #68	; 0x44
1a000bba:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000bbc:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bbe:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bc2:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000bc6:	e7d4      	b.n	1a000b72 <pll_get_frac+0x92>
		if (diff[1] <= diff[2]) {
1a000bc8:	42af      	cmp	r7, r5
1a000bca:	db07      	blt.n	1a000bdc <pll_get_frac+0xfc>
			*ppll = pll[1];
1a000bcc:	ad09      	add	r5, sp, #36	; 0x24
1a000bce:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000bd0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000bd2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000bd6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000bda:	e7ca      	b.n	1a000b72 <pll_get_frac+0x92>
			*ppll = pll[2];
1a000bdc:	ad11      	add	r5, sp, #68	; 0x44
1a000bde:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000be0:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000be2:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000be6:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000bea:	e7c2      	b.n	1a000b72 <pll_get_frac+0x92>
1a000bec:	068e7780 	.word	0x068e7780

1a000bf0 <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000bf0:	4684      	mov	ip, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000bf2:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000bf4:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000bf6:	281c      	cmp	r0, #28
1a000bf8:	d120      	bne.n	1a000c3c <Chip_Clock_FindBaseClock+0x4c>
{
1a000bfa:	b410      	push	{r4}
1a000bfc:	e002      	b.n	1a000c04 <Chip_Clock_FindBaseClock+0x14>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000bfe:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000c00:	281c      	cmp	r0, #28
1a000c02:	d118      	bne.n	1a000c36 <Chip_Clock_FindBaseClock+0x46>
1a000c04:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000c08:	4a0d      	ldr	r2, [pc, #52]	; (1a000c40 <Chip_Clock_FindBaseClock+0x50>)
1a000c0a:	eb02 0241 	add.w	r2, r2, r1, lsl #1
1a000c0e:	7911      	ldrb	r1, [r2, #4]
1a000c10:	4281      	cmp	r1, r0
1a000c12:	d010      	beq.n	1a000c36 <Chip_Clock_FindBaseClock+0x46>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000c14:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000c18:	4c09      	ldr	r4, [pc, #36]	; (1a000c40 <Chip_Clock_FindBaseClock+0x50>)
1a000c1a:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a000c1e:	4562      	cmp	r2, ip
1a000c20:	d8ed      	bhi.n	1a000bfe <Chip_Clock_FindBaseClock+0xe>
1a000c22:	eb03 0443 	add.w	r4, r3, r3, lsl #1
1a000c26:	4a06      	ldr	r2, [pc, #24]	; (1a000c40 <Chip_Clock_FindBaseClock+0x50>)
1a000c28:	eb02 0244 	add.w	r2, r2, r4, lsl #1
1a000c2c:	8852      	ldrh	r2, [r2, #2]
1a000c2e:	4562      	cmp	r2, ip
1a000c30:	d3e5      	bcc.n	1a000bfe <Chip_Clock_FindBaseClock+0xe>
			baseclk = periph_to_base[i].clkbase;
1a000c32:	4608      	mov	r0, r1
1a000c34:	e7e4      	b.n	1a000c00 <Chip_Clock_FindBaseClock+0x10>
		}
	}

	return baseclk;
}
1a000c36:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000c3a:	4770      	bx	lr
1a000c3c:	4770      	bx	lr
1a000c3e:	bf00      	nop
1a000c40:	1a003908 	.word	0x1a003908

1a000c44 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000c44:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000c46:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000c4a:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000c4c:	4a0d      	ldr	r2, [pc, #52]	; (1a000c84 <Chip_Clock_EnableCrystal+0x40>)
1a000c4e:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000c50:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000c54:	6992      	ldr	r2, [r2, #24]
1a000c56:	428a      	cmp	r2, r1
1a000c58:	d001      	beq.n	1a000c5e <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000c5a:	4a0a      	ldr	r2, [pc, #40]	; (1a000c84 <Chip_Clock_EnableCrystal+0x40>)
1a000c5c:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000c5e:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000c62:	4a09      	ldr	r2, [pc, #36]	; (1a000c88 <Chip_Clock_EnableCrystal+0x44>)
1a000c64:	6811      	ldr	r1, [r2, #0]
1a000c66:	4a09      	ldr	r2, [pc, #36]	; (1a000c8c <Chip_Clock_EnableCrystal+0x48>)
1a000c68:	4291      	cmp	r1, r2
1a000c6a:	d901      	bls.n	1a000c70 <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000c6c:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000c70:	4a04      	ldr	r2, [pc, #16]	; (1a000c84 <Chip_Clock_EnableCrystal+0x40>)
1a000c72:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000c74:	9b01      	ldr	r3, [sp, #4]
1a000c76:	1e5a      	subs	r2, r3, #1
1a000c78:	9201      	str	r2, [sp, #4]
1a000c7a:	2b00      	cmp	r3, #0
1a000c7c:	d1fa      	bne.n	1a000c74 <Chip_Clock_EnableCrystal+0x30>
}
1a000c7e:	b002      	add	sp, #8
1a000c80:	4770      	bx	lr
1a000c82:	bf00      	nop
1a000c84:	40050000 	.word	0x40050000
1a000c88:	1a003884 	.word	0x1a003884
1a000c8c:	01312cff 	.word	0x01312cff

1a000c90 <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000c90:	3012      	adds	r0, #18
1a000c92:	4b05      	ldr	r3, [pc, #20]	; (1a000ca8 <Chip_Clock_GetDividerSource+0x18>)
1a000c94:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000c98:	f010 0f01 	tst.w	r0, #1
1a000c9c:	d102      	bne.n	1a000ca4 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000c9e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000ca2:	4770      	bx	lr
		return CLKINPUT_PD;
1a000ca4:	2011      	movs	r0, #17
}
1a000ca6:	4770      	bx	lr
1a000ca8:	40050000 	.word	0x40050000

1a000cac <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000cac:	f100 0212 	add.w	r2, r0, #18
1a000cb0:	4b03      	ldr	r3, [pc, #12]	; (1a000cc0 <Chip_Clock_GetDividerDivisor+0x14>)
1a000cb2:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000cb6:	4b03      	ldr	r3, [pc, #12]	; (1a000cc4 <Chip_Clock_GetDividerDivisor+0x18>)
1a000cb8:	5c18      	ldrb	r0, [r3, r0]
}
1a000cba:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000cbe:	4770      	bx	lr
1a000cc0:	40050000 	.word	0x40050000
1a000cc4:	1a003900 	.word	0x1a003900

1a000cc8 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000cc8:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000cca:	2810      	cmp	r0, #16
1a000ccc:	d80a      	bhi.n	1a000ce4 <Chip_Clock_GetClockInputHz+0x1c>
1a000cce:	e8df f000 	tbb	[pc, r0]
1a000cd2:	0b44      	.short	0x0b44
1a000cd4:	0921180d 	.word	0x0921180d
1a000cd8:	2d2a2724 	.word	0x2d2a2724
1a000cdc:	34300909 	.word	0x34300909
1a000ce0:	3c38      	.short	0x3c38
1a000ce2:	40          	.byte	0x40
1a000ce3:	00          	.byte	0x00
1a000ce4:	2000      	movs	r0, #0
	default:
		break;
	}

	return rate;
}
1a000ce6:	bd08      	pop	{r3, pc}
		rate = CGU_IRC_FREQ;
1a000ce8:	481e      	ldr	r0, [pc, #120]	; (1a000d64 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000cea:	e7fc      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000cec:	4b1e      	ldr	r3, [pc, #120]	; (1a000d68 <Chip_Clock_GetClockInputHz+0xa0>)
1a000cee:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000cf2:	f003 0307 	and.w	r3, r3, #7
1a000cf6:	2b04      	cmp	r3, #4
1a000cf8:	d001      	beq.n	1a000cfe <Chip_Clock_GetClockInputHz+0x36>
			rate = 25000000;
1a000cfa:	481c      	ldr	r0, [pc, #112]	; (1a000d6c <Chip_Clock_GetClockInputHz+0xa4>)
1a000cfc:	e7f3      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
	uint32_t rate = 0;
1a000cfe:	2000      	movs	r0, #0
1a000d00:	e7f1      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000d02:	4b19      	ldr	r3, [pc, #100]	; (1a000d68 <Chip_Clock_GetClockInputHz+0xa0>)
1a000d04:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000d08:	f003 0307 	and.w	r3, r3, #7
1a000d0c:	2b04      	cmp	r3, #4
1a000d0e:	d027      	beq.n	1a000d60 <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000d10:	4816      	ldr	r0, [pc, #88]	; (1a000d6c <Chip_Clock_GetClockInputHz+0xa4>)
1a000d12:	e7e8      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = ExtRateIn;
1a000d14:	4b16      	ldr	r3, [pc, #88]	; (1a000d70 <Chip_Clock_GetClockInputHz+0xa8>)
1a000d16:	6818      	ldr	r0, [r3, #0]
		break;
1a000d18:	e7e5      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = OscRateIn;
1a000d1a:	4b16      	ldr	r3, [pc, #88]	; (1a000d74 <Chip_Clock_GetClockInputHz+0xac>)
1a000d1c:	6818      	ldr	r0, [r3, #0]
		break;
1a000d1e:	e7e2      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000d20:	4b15      	ldr	r3, [pc, #84]	; (1a000d78 <Chip_Clock_GetClockInputHz+0xb0>)
1a000d22:	6818      	ldr	r0, [r3, #0]
		break;
1a000d24:	e7df      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000d26:	4b14      	ldr	r3, [pc, #80]	; (1a000d78 <Chip_Clock_GetClockInputHz+0xb0>)
1a000d28:	6858      	ldr	r0, [r3, #4]
		break;
1a000d2a:	e7dc      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetMainPLLHz();
1a000d2c:	f000 f868 	bl	1a000e00 <Chip_Clock_GetMainPLLHz>
		break;
1a000d30:	e7d9      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000d32:	2100      	movs	r1, #0
1a000d34:	f000 f898 	bl	1a000e68 <Chip_Clock_GetDivRate>
		break;
1a000d38:	e7d5      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000d3a:	2101      	movs	r1, #1
1a000d3c:	f000 f894 	bl	1a000e68 <Chip_Clock_GetDivRate>
		break;
1a000d40:	e7d1      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000d42:	2102      	movs	r1, #2
1a000d44:	f000 f890 	bl	1a000e68 <Chip_Clock_GetDivRate>
		break;
1a000d48:	e7cd      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000d4a:	2103      	movs	r1, #3
1a000d4c:	f000 f88c 	bl	1a000e68 <Chip_Clock_GetDivRate>
		break;
1a000d50:	e7c9      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000d52:	2104      	movs	r1, #4
1a000d54:	f000 f888 	bl	1a000e68 <Chip_Clock_GetDivRate>
		break;
1a000d58:	e7c5      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
		rate = CRYSTAL_32K_FREQ_IN;
1a000d5a:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000d5e:	e7c2      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
			rate = 50000000; /* RMII uses 50 MHz */
1a000d60:	4806      	ldr	r0, [pc, #24]	; (1a000d7c <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000d62:	e7c0      	b.n	1a000ce6 <Chip_Clock_GetClockInputHz+0x1e>
1a000d64:	00b71b00 	.word	0x00b71b00
1a000d68:	40043000 	.word	0x40043000
1a000d6c:	017d7840 	.word	0x017d7840
1a000d70:	1a003858 	.word	0x1a003858
1a000d74:	1a003884 	.word	0x1a003884
1a000d78:	100000fc 	.word	0x100000fc
1a000d7c:	02faf080 	.word	0x02faf080

1a000d80 <Chip_Clock_CalcMainPLLValue>:
{
1a000d80:	b538      	push	{r3, r4, r5, lr}
1a000d82:	4605      	mov	r5, r0
1a000d84:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000d86:	7908      	ldrb	r0, [r1, #4]
1a000d88:	f7ff ff9e 	bl	1a000cc8 <Chip_Clock_GetClockInputHz>
1a000d8c:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000d8e:	4b19      	ldr	r3, [pc, #100]	; (1a000df4 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000d90:	442b      	add	r3, r5
1a000d92:	4a19      	ldr	r2, [pc, #100]	; (1a000df8 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000d94:	4293      	cmp	r3, r2
1a000d96:	d821      	bhi.n	1a000ddc <Chip_Clock_CalcMainPLLValue+0x5c>
1a000d98:	b318      	cbz	r0, 1a000de2 <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000d9a:	2380      	movs	r3, #128	; 0x80
1a000d9c:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000d9e:	2300      	movs	r3, #0
1a000da0:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000da2:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000da4:	fbb5 f3f0 	udiv	r3, r5, r0
1a000da8:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000daa:	4a14      	ldr	r2, [pc, #80]	; (1a000dfc <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000dac:	4295      	cmp	r5, r2
1a000dae:	d903      	bls.n	1a000db8 <Chip_Clock_CalcMainPLLValue+0x38>
1a000db0:	fb00 f303 	mul.w	r3, r0, r3
1a000db4:	42ab      	cmp	r3, r5
1a000db6:	d007      	beq.n	1a000dc8 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000db8:	4621      	mov	r1, r4
1a000dba:	4628      	mov	r0, r5
1a000dbc:	f7ff fe90 	bl	1a000ae0 <pll_get_frac>
		if (!ppll->nsel) {
1a000dc0:	68a3      	ldr	r3, [r4, #8]
1a000dc2:	b18b      	cbz	r3, 1a000de8 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000dc4:	3b01      	subs	r3, #1
1a000dc6:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000dc8:	6923      	ldr	r3, [r4, #16]
1a000dca:	b183      	cbz	r3, 1a000dee <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000dcc:	68e2      	ldr	r2, [r4, #12]
1a000dce:	b10a      	cbz	r2, 1a000dd4 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000dd0:	3a01      	subs	r2, #1
1a000dd2:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000dd4:	3b01      	subs	r3, #1
1a000dd6:	6123      	str	r3, [r4, #16]
	return 0;
1a000dd8:	2000      	movs	r0, #0
}
1a000dda:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000ddc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000de0:	e7fb      	b.n	1a000dda <Chip_Clock_CalcMainPLLValue+0x5a>
1a000de2:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000de6:	e7f8      	b.n	1a000dda <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000de8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000dec:	e7f5      	b.n	1a000dda <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000dee:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000df2:	e7f2      	b.n	1a000dda <Chip_Clock_CalcMainPLLValue+0x5a>
1a000df4:	ff6b3a10 	.word	0xff6b3a10
1a000df8:	0b940510 	.word	0x0b940510
1a000dfc:	094c5eff 	.word	0x094c5eff

1a000e00 <Chip_Clock_GetMainPLLHz>:
{
1a000e00:	b530      	push	{r4, r5, lr}
1a000e02:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000e04:	4d16      	ldr	r5, [pc, #88]	; (1a000e60 <Chip_Clock_GetMainPLLHz+0x60>)
1a000e06:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000e08:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000e0c:	f7ff ff5c 	bl	1a000cc8 <Chip_Clock_GetClockInputHz>
1a000e10:	4684      	mov	ip, r0
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000e12:	4b14      	ldr	r3, [pc, #80]	; (1a000e64 <Chip_Clock_GetMainPLLHz+0x64>)
1a000e14:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000e16:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000e18:	f010 0001 	ands.w	r0, r0, #1
1a000e1c:	d01d      	beq.n	1a000e5a <Chip_Clock_GetMainPLLHz+0x5a>
	msel = (PLLReg >> 16) & 0xFF;
1a000e1e:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000e22:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000e26:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000e2a:	f3c4 1080 	ubfx	r0, r4, #6, #1
	m = msel + 1;
1a000e2e:	3201      	adds	r2, #1
	n = nsel + 1;
1a000e30:	3301      	adds	r3, #1
	p = ptab[psel];
1a000e32:	3108      	adds	r1, #8
1a000e34:	4469      	add	r1, sp
1a000e36:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000e3a:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000e3e:	d108      	bne.n	1a000e52 <Chip_Clock_GetMainPLLHz+0x52>
1a000e40:	b938      	cbnz	r0, 1a000e52 <Chip_Clock_GetMainPLLHz+0x52>
	return (m / (2 * p)) * (freq / n);
1a000e42:	0049      	lsls	r1, r1, #1
1a000e44:	fbb2 f2f1 	udiv	r2, r2, r1
1a000e48:	fbbc f0f3 	udiv	r0, ip, r3
1a000e4c:	fb02 f000 	mul.w	r0, r2, r0
1a000e50:	e003      	b.n	1a000e5a <Chip_Clock_GetMainPLLHz+0x5a>
		return m * (freq / n);
1a000e52:	fbbc f3f3 	udiv	r3, ip, r3
1a000e56:	fb02 f003 	mul.w	r0, r2, r3
}
1a000e5a:	b003      	add	sp, #12
1a000e5c:	bd30      	pop	{r4, r5, pc}
1a000e5e:	bf00      	nop
1a000e60:	40050000 	.word	0x40050000
1a000e64:	08040201 	.word	0x08040201

1a000e68 <Chip_Clock_GetDivRate>:
{
1a000e68:	b538      	push	{r3, r4, r5, lr}
1a000e6a:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000e6c:	4608      	mov	r0, r1
1a000e6e:	f7ff ff0f 	bl	1a000c90 <Chip_Clock_GetDividerSource>
1a000e72:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000e74:	4620      	mov	r0, r4
1a000e76:	f7ff ff19 	bl	1a000cac <Chip_Clock_GetDividerDivisor>
1a000e7a:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000e7c:	4628      	mov	r0, r5
1a000e7e:	f7ff ff23 	bl	1a000cc8 <Chip_Clock_GetClockInputHz>
1a000e82:	3401      	adds	r4, #1
}
1a000e84:	fbb0 f0f4 	udiv	r0, r0, r4
1a000e88:	bd38      	pop	{r3, r4, r5, pc}
	...

1a000e8c <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000e8c:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000e8e:	f100 0c16 	add.w	ip, r0, #22
1a000e92:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
1a000e96:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
1a000e9a:	f50c 2ca0 	add.w	ip, ip, #327680	; 0x50000
1a000e9e:	f8dc 4004 	ldr.w	r4, [ip, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000ea2:	281b      	cmp	r0, #27
1a000ea4:	d813      	bhi.n	1a000ece <Chip_Clock_SetBaseClock+0x42>
		if (Input != CLKINPUT_PD) {
1a000ea6:	2911      	cmp	r1, #17
1a000ea8:	d01a      	beq.n	1a000ee0 <Chip_Clock_SetBaseClock+0x54>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000eaa:	4d0e      	ldr	r5, [pc, #56]	; (1a000ee4 <Chip_Clock_SetBaseClock+0x58>)
1a000eac:	4025      	ands	r5, r4

			if (autoblocken) {
1a000eae:	b10a      	cbz	r2, 1a000eb4 <Chip_Clock_SetBaseClock+0x28>
				reg |= (1 << 11);
1a000eb0:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000eb4:	b10b      	cbz	r3, 1a000eba <Chip_Clock_SetBaseClock+0x2e>
				reg |= (1 << 0);
1a000eb6:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000eba:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000ebe:	3016      	adds	r0, #22
1a000ec0:	0080      	lsls	r0, r0, #2
1a000ec2:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000ec6:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000eca:	6045      	str	r5, [r0, #4]
1a000ecc:	e008      	b.n	1a000ee0 <Chip_Clock_SetBaseClock+0x54>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000ece:	f044 0401 	orr.w	r4, r4, #1
1a000ed2:	3016      	adds	r0, #22
1a000ed4:	0080      	lsls	r0, r0, #2
1a000ed6:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000eda:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000ede:	6044      	str	r4, [r0, #4]
	}
}
1a000ee0:	bc30      	pop	{r4, r5}
1a000ee2:	4770      	bx	lr
1a000ee4:	e0fff7fe 	.word	0xe0fff7fe

1a000ee8 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000ee8:	281b      	cmp	r0, #27
1a000eea:	d80d      	bhi.n	1a000f08 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000eec:	f100 0316 	add.w	r3, r0, #22
1a000ef0:	009b      	lsls	r3, r3, #2
1a000ef2:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a000ef6:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a000efa:	6858      	ldr	r0, [r3, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000efc:	f010 0f01 	tst.w	r0, #1
1a000f00:	d104      	bne.n	1a000f0c <Chip_Clock_GetBaseClock+0x24>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000f02:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000f06:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f08:	2011      	movs	r0, #17
1a000f0a:	4770      	bx	lr
		return CLKINPUT_PD;
1a000f0c:	2011      	movs	r0, #17
}
1a000f0e:	4770      	bx	lr

1a000f10 <Chip_Clock_GetBaseClocktHz>:
{
1a000f10:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000f12:	f7ff ffe9 	bl	1a000ee8 <Chip_Clock_GetBaseClock>
1a000f16:	f7ff fed7 	bl	1a000cc8 <Chip_Clock_GetClockInputHz>
}
1a000f1a:	bd08      	pop	{r3, pc}

1a000f1c <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000f1c:	b971      	cbnz	r1, 1a000f3c <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000f1e:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000f20:	b10a      	cbz	r2, 1a000f26 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000f22:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000f26:	2b02      	cmp	r3, #2
1a000f28:	d00a      	beq.n	1a000f40 <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000f2a:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000f2e:	d30a      	bcc.n	1a000f46 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000f30:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000f34:	4b06      	ldr	r3, [pc, #24]	; (1a000f50 <Chip_Clock_EnableOpts+0x34>)
1a000f36:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000f3a:	4770      	bx	lr
		reg |= (1 << 1);
1a000f3c:	2103      	movs	r1, #3
1a000f3e:	e7ef      	b.n	1a000f20 <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000f40:	f041 0120 	orr.w	r1, r1, #32
1a000f44:	e7f1      	b.n	1a000f2a <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000f46:	3020      	adds	r0, #32
1a000f48:	4b02      	ldr	r3, [pc, #8]	; (1a000f54 <Chip_Clock_EnableOpts+0x38>)
1a000f4a:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000f4e:	4770      	bx	lr
1a000f50:	40052000 	.word	0x40052000
1a000f54:	40051000 	.word	0x40051000

1a000f58 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000f58:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000f5c:	d309      	bcc.n	1a000f72 <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000f5e:	4a09      	ldr	r2, [pc, #36]	; (1a000f84 <Chip_Clock_Enable+0x2c>)
1a000f60:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000f64:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000f68:	f043 0301 	orr.w	r3, r3, #1
1a000f6c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000f70:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000f72:	4a05      	ldr	r2, [pc, #20]	; (1a000f88 <Chip_Clock_Enable+0x30>)
1a000f74:	3020      	adds	r0, #32
1a000f76:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000f7a:	f043 0301 	orr.w	r3, r3, #1
1a000f7e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000f82:	4770      	bx	lr
1a000f84:	40052000 	.word	0x40052000
1a000f88:	40051000 	.word	0x40051000

1a000f8c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000f8c:	b510      	push	{r4, lr}
1a000f8e:	4603      	mov	r3, r0
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000f90:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000f94:	d308      	bcc.n	1a000fa8 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000f96:	f5a0 7291 	sub.w	r2, r0, #290	; 0x122
1a000f9a:	490d      	ldr	r1, [pc, #52]	; (1a000fd0 <Chip_Clock_GetRate+0x44>)
1a000f9c:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000fa0:	f014 0001 	ands.w	r0, r4, #1
1a000fa4:	d106      	bne.n	1a000fb4 <Chip_Clock_GetRate+0x28>
	else {
		rate = 0;
	}

	return rate;
}
1a000fa6:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000fa8:	f100 0220 	add.w	r2, r0, #32
1a000fac:	4909      	ldr	r1, [pc, #36]	; (1a000fd4 <Chip_Clock_GetRate+0x48>)
1a000fae:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a000fb2:	e7f5      	b.n	1a000fa0 <Chip_Clock_GetRate+0x14>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000fb4:	4618      	mov	r0, r3
1a000fb6:	f7ff fe1b 	bl	1a000bf0 <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000fba:	f7ff ffa9 	bl	1a000f10 <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000fbe:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000fc2:	d103      	bne.n	1a000fcc <Chip_Clock_GetRate+0x40>
			div = 1;
1a000fc4:	2301      	movs	r3, #1
		rate = rate / div;
1a000fc6:	fbb0 f0f3 	udiv	r0, r0, r3
	return rate;
1a000fca:	e7ec      	b.n	1a000fa6 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000fcc:	2302      	movs	r3, #2
1a000fce:	e7fa      	b.n	1a000fc6 <Chip_Clock_GetRate+0x3a>
1a000fd0:	40052000 	.word	0x40052000
1a000fd4:	40051000 	.word	0x40051000

1a000fd8 <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000fd8:	4770      	bx	lr
	...

1a000fdc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000fdc:	2901      	cmp	r1, #1
1a000fde:	d109      	bne.n	1a000ff4 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000fe0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000fe4:	4b04      	ldr	r3, [pc, #16]	; (1a000ff8 <Chip_I2C_EventHandler+0x1c>)
1a000fe6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
1a000fea:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000fec:	7d13      	ldrb	r3, [r2, #20]
1a000fee:	b2db      	uxtb	r3, r3
1a000ff0:	2b04      	cmp	r3, #4
1a000ff2:	d0fb      	beq.n	1a000fec <Chip_I2C_EventHandler+0x10>
}
1a000ff4:	4770      	bx	lr
1a000ff6:	bf00      	nop
1a000ff8:	10000004 	.word	0x10000004

1a000ffc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000ffc:	b570      	push	{r4, r5, r6, lr}
1a000ffe:	4604      	mov	r4, r0
	Chip_Clock_Enable(i2c[id].clk);
1a001000:	4e07      	ldr	r6, [pc, #28]	; (1a001020 <Chip_I2C_Init+0x24>)
1a001002:	00c5      	lsls	r5, r0, #3
1a001004:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001008:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a00100c:	8898      	ldrh	r0, [r3, #4]
1a00100e:	f7ff ffa3 	bl	1a000f58 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a001012:	1b2d      	subs	r5, r5, r4
1a001014:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a001018:	226c      	movs	r2, #108	; 0x6c
1a00101a:	619a      	str	r2, [r3, #24]
}
1a00101c:	bd70      	pop	{r4, r5, r6, pc}
1a00101e:	bf00      	nop
1a001020:	10000004 	.word	0x10000004

1a001024 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a001024:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a001028:	4604      	mov	r4, r0
1a00102a:	4688      	mov	r8, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a00102c:	4d0b      	ldr	r5, [pc, #44]	; (1a00105c <Chip_I2C_SetClockRate+0x38>)
1a00102e:	00c6      	lsls	r6, r0, #3
1a001030:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a001034:	009f      	lsls	r7, r3, #2
1a001036:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a00103a:	8898      	ldrh	r0, [r3, #4]
1a00103c:	f7ff ffa6 	bl	1a000f8c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a001040:	fbb0 f1f8 	udiv	r1, r0, r8
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a001044:	59eb      	ldr	r3, [r5, r7]
1a001046:	084a      	lsrs	r2, r1, #1
1a001048:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a00104a:	1b36      	subs	r6, r6, r4
1a00104c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
1a001050:	691a      	ldr	r2, [r3, #16]
1a001052:	1a89      	subs	r1, r1, r2
1a001054:	6159      	str	r1, [r3, #20]
}
1a001056:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00105a:	bf00      	nop
1a00105c:	10000004 	.word	0x10000004

1a001060 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001060:	4b03      	ldr	r3, [pc, #12]	; (1a001070 <Chip_SSP_GetClockIndex+0x10>)
1a001062:	4298      	cmp	r0, r3
1a001064:	d001      	beq.n	1a00106a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a001066:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a001068:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a00106a:	20a5      	movs	r0, #165	; 0xa5
1a00106c:	4770      	bx	lr
1a00106e:	bf00      	nop
1a001070:	400c5000 	.word	0x400c5000

1a001074 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a001074:	4b04      	ldr	r3, [pc, #16]	; (1a001088 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a001076:	4298      	cmp	r0, r3
1a001078:	d002      	beq.n	1a001080 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a00107a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a00107e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a001080:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a001084:	4770      	bx	lr
1a001086:	bf00      	nop
1a001088:	400c5000 	.word	0x400c5000

1a00108c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a00108c:	6803      	ldr	r3, [r0, #0]
1a00108e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a001092:	0209      	lsls	r1, r1, #8
1a001094:	b289      	uxth	r1, r1
1a001096:	4319      	orrs	r1, r3
1a001098:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a00109a:	6102      	str	r2, [r0, #16]
}
1a00109c:	4770      	bx	lr

1a00109e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a00109e:	b538      	push	{r3, r4, r5, lr}
1a0010a0:	4605      	mov	r5, r0
1a0010a2:	460c      	mov	r4, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0010a4:	f7ff ffe6 	bl	1a001074 <Chip_SSP_GetPeriphClockIndex>
1a0010a8:	f7ff ff70 	bl	1a000f8c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a0010ac:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a0010ae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a0010b2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a0010b4:	e000      	b.n	1a0010b8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a0010b6:	4661      	mov	r1, ip
	while (cmp_clk > bitRate) {
1a0010b8:	42a3      	cmp	r3, r4
1a0010ba:	d90d      	bls.n	1a0010d8 <Chip_SSP_SetBitRate+0x3a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a0010bc:	f101 0c01 	add.w	ip, r1, #1
1a0010c0:	fb01 2302 	mla	r3, r1, r2, r2
1a0010c4:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a0010c8:	429c      	cmp	r4, r3
1a0010ca:	d2f5      	bcs.n	1a0010b8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a0010cc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
1a0010d0:	d9f1      	bls.n	1a0010b6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a0010d2:	3202      	adds	r2, #2
				cr0_div = 0;
1a0010d4:	2100      	movs	r1, #0
1a0010d6:	e7ef      	b.n	1a0010b8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a0010d8:	4628      	mov	r0, r5
1a0010da:	f7ff ffd7 	bl	1a00108c <Chip_SSP_SetClockRate>
}
1a0010de:	bd38      	pop	{r3, r4, r5, pc}

1a0010e0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a0010e0:	b510      	push	{r4, lr}
1a0010e2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a0010e4:	f7ff ffbc 	bl	1a001060 <Chip_SSP_GetClockIndex>
1a0010e8:	f7ff ff36 	bl	1a000f58 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a0010ec:	4620      	mov	r0, r4
1a0010ee:	f7ff ffc1 	bl	1a001074 <Chip_SSP_GetPeriphClockIndex>
1a0010f2:	f7ff ff31 	bl	1a000f58 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0010f6:	6863      	ldr	r3, [r4, #4]
1a0010f8:	f023 0304 	bic.w	r3, r3, #4
1a0010fc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0010fe:	6823      	ldr	r3, [r4, #0]
1a001100:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001104:	f043 0307 	orr.w	r3, r3, #7
1a001108:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00110a:	4902      	ldr	r1, [pc, #8]	; (1a001114 <Chip_SSP_Init+0x34>)
1a00110c:	4620      	mov	r0, r4
1a00110e:	f7ff ffc6 	bl	1a00109e <Chip_SSP_SetBitRate>
}
1a001112:	bd10      	pop	{r4, pc}
1a001114:	000186a0 	.word	0x000186a0

1a001118 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001118:	b570      	push	{r4, r5, r6, lr}
1a00111a:	b08a      	sub	sp, #40	; 0x28
1a00111c:	4605      	mov	r5, r0
1a00111e:	460e      	mov	r6, r1
1a001120:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001122:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001126:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001128:	2806      	cmp	r0, #6
1a00112a:	d018      	beq.n	1a00115e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00112c:	2300      	movs	r3, #0
1a00112e:	2201      	movs	r2, #1
1a001130:	4629      	mov	r1, r5
1a001132:	2004      	movs	r0, #4
1a001134:	f7ff feaa 	bl	1a000e8c <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001138:	4a4a      	ldr	r2, [pc, #296]	; (1a001264 <Chip_SetupCoreClock+0x14c>)
1a00113a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00113c:	f043 0301 	orr.w	r3, r3, #1
1a001140:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001142:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001146:	a901      	add	r1, sp, #4
1a001148:	4630      	mov	r0, r6
1a00114a:	f7ff fe19 	bl	1a000d80 <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00114e:	4b46      	ldr	r3, [pc, #280]	; (1a001268 <Chip_SetupCoreClock+0x150>)
1a001150:	429e      	cmp	r6, r3
1a001152:	d916      	bls.n	1a001182 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001154:	9b01      	ldr	r3, [sp, #4]
1a001156:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00115a:	d003      	beq.n	1a001164 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00115c:	e7fe      	b.n	1a00115c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00115e:	f7ff fd71 	bl	1a000c44 <Chip_Clock_EnableCrystal>
1a001162:	e7e3      	b.n	1a00112c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001164:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001168:	d005      	beq.n	1a001176 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00116a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00116e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001170:	2600      	movs	r6, #0
			direct = 1;
1a001172:	2501      	movs	r5, #1
1a001174:	e007      	b.n	1a001186 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001176:	9b04      	ldr	r3, [sp, #16]
1a001178:	3301      	adds	r3, #1
1a00117a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00117c:	2601      	movs	r6, #1
	uint32_t direct = 0, pdivide = 0;
1a00117e:	2500      	movs	r5, #0
1a001180:	e001      	b.n	1a001186 <Chip_SetupCoreClock+0x6e>
1a001182:	2600      	movs	r6, #0
1a001184:	4635      	mov	r5, r6
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001186:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00118a:	9b01      	ldr	r3, [sp, #4]
1a00118c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001190:	9a05      	ldr	r2, [sp, #20]
1a001192:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001196:	9a03      	ldr	r2, [sp, #12]
1a001198:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00119c:	9a04      	ldr	r2, [sp, #16]
1a00119e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0011a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0011a6:	4a2f      	ldr	r2, [pc, #188]	; (1a001264 <Chip_SetupCoreClock+0x14c>)
1a0011a8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0011aa:	4b2e      	ldr	r3, [pc, #184]	; (1a001264 <Chip_SetupCoreClock+0x14c>)
1a0011ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0011ae:	f013 0f01 	tst.w	r3, #1
1a0011b2:	d0fa      	beq.n	1a0011aa <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0011b4:	2300      	movs	r3, #0
1a0011b6:	2201      	movs	r2, #1
1a0011b8:	2109      	movs	r1, #9
1a0011ba:	2004      	movs	r0, #4
1a0011bc:	f7ff fe66 	bl	1a000e8c <Chip_Clock_SetBaseClock>

	if (direct) {
1a0011c0:	b305      	cbz	r5, 1a001204 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0011c2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0011c6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0011c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0011ca:	1e5a      	subs	r2, r3, #1
1a0011cc:	9209      	str	r2, [sp, #36]	; 0x24
1a0011ce:	2b00      	cmp	r3, #0
1a0011d0:	d1fa      	bne.n	1a0011c8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0011d2:	9b01      	ldr	r3, [sp, #4]
1a0011d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0011d8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0011da:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0011de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0011e2:	9a05      	ldr	r2, [sp, #20]
1a0011e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0011e8:	9a03      	ldr	r2, [sp, #12]
1a0011ea:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0011ee:	9a04      	ldr	r2, [sp, #16]
1a0011f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0011f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0011f8:	4a1a      	ldr	r2, [pc, #104]	; (1a001264 <Chip_SetupCoreClock+0x14c>)
1a0011fa:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0011fc:	2c00      	cmp	r4, #0
1a0011fe:	d12e      	bne.n	1a00125e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001200:	b00a      	add	sp, #40	; 0x28
1a001202:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001204:	2e00      	cmp	r6, #0
1a001206:	d0f9      	beq.n	1a0011fc <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001208:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00120c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00120e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001210:	1e5a      	subs	r2, r3, #1
1a001212:	9209      	str	r2, [sp, #36]	; 0x24
1a001214:	2b00      	cmp	r3, #0
1a001216:	d1fa      	bne.n	1a00120e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001218:	9a04      	ldr	r2, [sp, #16]
1a00121a:	3a01      	subs	r2, #1
1a00121c:	9204      	str	r2, [sp, #16]
1a00121e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001222:	9b01      	ldr	r3, [sp, #4]
1a001224:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001228:	9905      	ldr	r1, [sp, #20]
1a00122a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00122e:	9903      	ldr	r1, [sp, #12]
1a001230:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001234:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001238:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00123c:	4a09      	ldr	r2, [pc, #36]	; (1a001264 <Chip_SetupCoreClock+0x14c>)
1a00123e:	6453      	str	r3, [r2, #68]	; 0x44
}
1a001240:	e7dc      	b.n	1a0011fc <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001242:	480a      	ldr	r0, [pc, #40]	; (1a00126c <Chip_SetupCoreClock+0x154>)
1a001244:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001248:	78cb      	ldrb	r3, [r1, #3]
1a00124a:	788a      	ldrb	r2, [r1, #2]
1a00124c:	7849      	ldrb	r1, [r1, #1]
1a00124e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001252:	f7ff fe1b 	bl	1a000e8c <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001256:	3401      	adds	r4, #1
1a001258:	2c11      	cmp	r4, #17
1a00125a:	d9f2      	bls.n	1a001242 <Chip_SetupCoreClock+0x12a>
1a00125c:	e7d0      	b.n	1a001200 <Chip_SetupCoreClock+0xe8>
1a00125e:	2400      	movs	r4, #0
1a001260:	e7fa      	b.n	1a001258 <Chip_SetupCoreClock+0x140>
1a001262:	bf00      	nop
1a001264:	40050000 	.word	0x40050000
1a001268:	068e7780 	.word	0x068e7780
1a00126c:	1a003974 	.word	0x1a003974

1a001270 <Chip_TIMER_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_TIMER_GetClockIndex(LPC_TIMER_T *pTMR)
{
	CHIP_CCU_CLK_T clkTMR;

	if (pTMR == LPC_TIMER3) {
1a001270:	4b09      	ldr	r3, [pc, #36]	; (1a001298 <Chip_TIMER_GetClockIndex+0x28>)
1a001272:	4298      	cmp	r0, r3
1a001274:	d00b      	beq.n	1a00128e <Chip_TIMER_GetClockIndex+0x1e>
		clkTMR = CLK_MX_TIMER3;
	}
    else if (pTMR == LPC_TIMER2) {
1a001276:	f5a3 5380 	sub.w	r3, r3, #4096	; 0x1000
1a00127a:	4298      	cmp	r0, r3
1a00127c:	d009      	beq.n	1a001292 <Chip_TIMER_GetClockIndex+0x22>
		clkTMR = CLK_MX_TIMER2;
	}
    else if (pTMR == LPC_TIMER1) {
1a00127e:	f5a3 3378 	sub.w	r3, r3, #253952	; 0x3e000
1a001282:	4298      	cmp	r0, r3
1a001284:	d001      	beq.n	1a00128a <Chip_TIMER_GetClockIndex+0x1a>
		clkTMR = CLK_MX_TIMER1;
	}
	else {
		clkTMR = CLK_MX_TIMER0;
1a001286:	2084      	movs	r0, #132	; 0x84
	}

	return clkTMR;
}
1a001288:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER1;
1a00128a:	2085      	movs	r0, #133	; 0x85
1a00128c:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER3;
1a00128e:	20a4      	movs	r0, #164	; 0xa4
1a001290:	4770      	bx	lr
		clkTMR = CLK_MX_TIMER2;
1a001292:	20a3      	movs	r0, #163	; 0xa3
1a001294:	4770      	bx	lr
1a001296:	bf00      	nop
1a001298:	400c4000 	.word	0x400c4000

1a00129c <Chip_TIMER_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize a timer */
void Chip_TIMER_Init(LPC_TIMER_T *pTMR)
{
1a00129c:	b508      	push	{r3, lr}
	Chip_Clock_Enable(Chip_TIMER_GetClockIndex(pTMR));
1a00129e:	f7ff ffe7 	bl	1a001270 <Chip_TIMER_GetClockIndex>
1a0012a2:	f7ff fe59 	bl	1a000f58 <Chip_Clock_Enable>
}
1a0012a6:	bd08      	pop	{r3, pc}

1a0012a8 <Chip_TIMER_Reset>:
void Chip_TIMER_Reset(LPC_TIMER_T *pTMR)
{
	uint32_t reg;

	/* Disable timer, set terminal count to non-0 */
	reg = pTMR->TCR;
1a0012a8:	6842      	ldr	r2, [r0, #4]
	pTMR->TCR = 0;
1a0012aa:	2300      	movs	r3, #0
1a0012ac:	6043      	str	r3, [r0, #4]
	pTMR->TC = 1;
1a0012ae:	2301      	movs	r3, #1
1a0012b0:	6083      	str	r3, [r0, #8]

	/* Reset timer counter */
	pTMR->TCR = TIMER_RESET;
1a0012b2:	2302      	movs	r3, #2
1a0012b4:	6043      	str	r3, [r0, #4]

	/* Wait for terminal count to clear */
	while (pTMR->TC != 0) {}
1a0012b6:	6883      	ldr	r3, [r0, #8]
1a0012b8:	2b00      	cmp	r3, #0
1a0012ba:	d1fc      	bne.n	1a0012b6 <Chip_TIMER_Reset+0xe>

	/* Restore timer state */
	pTMR->TCR = reg;
1a0012bc:	6042      	str	r2, [r0, #4]
}
1a0012be:	4770      	bx	lr

1a0012c0 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a0012c0:	4b09      	ldr	r3, [pc, #36]	; (1a0012e8 <Chip_UART_GetIndex+0x28>)
1a0012c2:	4298      	cmp	r0, r3
1a0012c4:	d00b      	beq.n	1a0012de <Chip_UART_GetIndex+0x1e>
1a0012c6:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a0012ca:	4298      	cmp	r0, r3
1a0012cc:	d009      	beq.n	1a0012e2 <Chip_UART_GetIndex+0x22>
1a0012ce:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a0012d2:	4298      	cmp	r0, r3
1a0012d4:	d001      	beq.n	1a0012da <Chip_UART_GetIndex+0x1a>
1a0012d6:	2000      	movs	r0, #0
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a0012d8:	4770      	bx	lr
			return 1;
1a0012da:	2001      	movs	r0, #1
1a0012dc:	4770      	bx	lr
			return 2;
1a0012de:	2002      	movs	r0, #2
1a0012e0:	4770      	bx	lr
			return 3;
1a0012e2:	2003      	movs	r0, #3
1a0012e4:	4770      	bx	lr
1a0012e6:	bf00      	nop
1a0012e8:	400c1000 	.word	0x400c1000

1a0012ec <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a0012ec:	b530      	push	{r4, r5, lr}
1a0012ee:	b083      	sub	sp, #12
1a0012f0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0012f2:	f7ff ffe5 	bl	1a0012c0 <Chip_UART_GetIndex>
1a0012f6:	2301      	movs	r3, #1
1a0012f8:	461a      	mov	r2, r3
1a0012fa:	4619      	mov	r1, r3
1a0012fc:	4d0e      	ldr	r5, [pc, #56]	; (1a001338 <Chip_UART_Init+0x4c>)
1a0012fe:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a001302:	f7ff fe0b 	bl	1a000f1c <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a001306:	2307      	movs	r3, #7
1a001308:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a00130a:	2300      	movs	r3, #0
1a00130c:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a00130e:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a001310:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a001312:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a001314:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a001316:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a001318:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a00131a:	4b08      	ldr	r3, [pc, #32]	; (1a00133c <Chip_UART_Init+0x50>)
1a00131c:	429c      	cmp	r4, r3
1a00131e:	d006      	beq.n	1a00132e <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a001320:	2303      	movs	r3, #3
1a001322:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a001324:	2310      	movs	r3, #16
1a001326:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a001328:	9b01      	ldr	r3, [sp, #4]
}
1a00132a:	b003      	add	sp, #12
1a00132c:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a00132e:	2300      	movs	r3, #0
1a001330:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a001332:	69a3      	ldr	r3, [r4, #24]
1a001334:	9301      	str	r3, [sp, #4]
1a001336:	e7f3      	b.n	1a001320 <Chip_UART_Init+0x34>
1a001338:	1a0039c4 	.word	0x1a0039c4
1a00133c:	40082000 	.word	0x40082000

1a001340 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a001340:	b538      	push	{r3, r4, r5, lr}
1a001342:	4605      	mov	r5, r0
1a001344:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a001346:	f7ff ffbb 	bl	1a0012c0 <Chip_UART_GetIndex>
1a00134a:	4b0c      	ldr	r3, [pc, #48]	; (1a00137c <Chip_UART_SetBaud+0x3c>)
1a00134c:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001350:	f7ff fe1c 	bl	1a000f8c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001354:	0121      	lsls	r1, r4, #4
1a001356:	fbb0 f1f1 	udiv	r1, r0, r1

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00135a:	b2ca      	uxtb	r2, r1
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00135c:	68eb      	ldr	r3, [r5, #12]
1a00135e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001362:	60eb      	str	r3, [r5, #12]
	pUART->DLL = (uint32_t) dll;
1a001364:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a001366:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a00136a:	606b      	str	r3, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00136c:	68eb      	ldr	r3, [r5, #12]
1a00136e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001372:	60eb      	str	r3, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001374:	fbb0 f0f1 	udiv	r0, r0, r1
}
1a001378:	0900      	lsrs	r0, r0, #4
1a00137a:	bd38      	pop	{r3, r4, r5, pc}
1a00137c:	1a0039bc 	.word	0x1a0039bc

1a001380 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001380:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001384:	b083      	sub	sp, #12
1a001386:	9001      	str	r0, [sp, #4]
1a001388:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00138a:	f7ff ff99 	bl	1a0012c0 <Chip_UART_GetIndex>
1a00138e:	4b32      	ldr	r3, [pc, #200]	; (1a001458 <Chip_UART_SetBaudFDR+0xd8>)
1a001390:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001394:	f7ff fdfa 	bl	1a000f8c <Chip_Clock_GetRate>
1a001398:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00139a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00139e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a0013a0:	f04f 0b00 	mov.w	fp, #0
1a0013a4:	46a2      	mov	sl, r4
1a0013a6:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a0013a8:	e02a      	b.n	1a001400 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a0013aa:	4242      	negs	r2, r0
				div ++;
1a0013ac:	1c4b      	adds	r3, r1, #1
1a0013ae:	e017      	b.n	1a0013e0 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a0013b0:	b30a      	cbz	r2, 1a0013f6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a0013b2:	4617      	mov	r7, r2
			sd = d;
1a0013b4:	46ab      	mov	fp, r5
			sm = m;
1a0013b6:	46a2      	mov	sl, r4
			sdiv = div;
1a0013b8:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a0013ba:	3501      	adds	r5, #1
1a0013bc:	42ac      	cmp	r4, r5
1a0013be:	d91e      	bls.n	1a0013fe <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a0013c0:	0931      	lsrs	r1, r6, #4
1a0013c2:	0730      	lsls	r0, r6, #28
1a0013c4:	fba4 0c00 	umull	r0, ip, r4, r0
1a0013c8:	1962      	adds	r2, r4, r5
1a0013ca:	fb08 f202 	mul.w	r2, r8, r2
1a0013ce:	2300      	movs	r3, #0
1a0013d0:	fb04 c101 	mla	r1, r4, r1, ip
1a0013d4:	f000 ff88 	bl	1a0022e8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a0013d8:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a0013da:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a0013dc:	2800      	cmp	r0, #0
1a0013de:	dbe4      	blt.n	1a0013aa <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a0013e0:	4297      	cmp	r7, r2
1a0013e2:	d3ea      	bcc.n	1a0013ba <Chip_UART_SetBaudFDR+0x3a>
1a0013e4:	2b00      	cmp	r3, #0
1a0013e6:	d0e8      	beq.n	1a0013ba <Chip_UART_SetBaudFDR+0x3a>
1a0013e8:	0c19      	lsrs	r1, r3, #16
1a0013ea:	d1e6      	bne.n	1a0013ba <Chip_UART_SetBaudFDR+0x3a>
1a0013ec:	2b02      	cmp	r3, #2
1a0013ee:	d8df      	bhi.n	1a0013b0 <Chip_UART_SetBaudFDR+0x30>
1a0013f0:	2d00      	cmp	r5, #0
1a0013f2:	d0dd      	beq.n	1a0013b0 <Chip_UART_SetBaudFDR+0x30>
1a0013f4:	e7e1      	b.n	1a0013ba <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0013f6:	4617      	mov	r7, r2
			sd = d;
1a0013f8:	46ab      	mov	fp, r5
			sm = m;
1a0013fa:	46a2      	mov	sl, r4
			sdiv = div;
1a0013fc:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0013fe:	3401      	adds	r4, #1
1a001400:	b11f      	cbz	r7, 1a00140a <Chip_UART_SetBaudFDR+0x8a>
1a001402:	2c0f      	cmp	r4, #15
1a001404:	d801      	bhi.n	1a00140a <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a001406:	2500      	movs	r5, #0
1a001408:	e7d8      	b.n	1a0013bc <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a00140a:	f1b9 0f00 	cmp.w	r9, #0
1a00140e:	d01e      	beq.n	1a00144e <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a001410:	9901      	ldr	r1, [sp, #4]
1a001412:	68cb      	ldr	r3, [r1, #12]
1a001414:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001418:	60cb      	str	r3, [r1, #12]
	pUART->DLL = (uint32_t) dll;
1a00141a:	fa5f f389 	uxtb.w	r3, r9
1a00141e:	600b      	str	r3, [r1, #0]
	pUART->DLM = (uint32_t) dlm;
1a001420:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a001424:	604b      	str	r3, [r1, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a001426:	68cb      	ldr	r3, [r1, #12]
1a001428:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00142c:	60cb      	str	r3, [r1, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a00142e:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a001432:	b2db      	uxtb	r3, r3
1a001434:	f00b 020f 	and.w	r2, fp, #15
1a001438:	4313      	orrs	r3, r2
1a00143a:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a00143c:	0933      	lsrs	r3, r6, #4
1a00143e:	fb0a f303 	mul.w	r3, sl, r3
1a001442:	eb0a 020b 	add.w	r2, sl, fp
1a001446:	fb09 f202 	mul.w	r2, r9, r2
1a00144a:	fbb3 f9f2 	udiv	r9, r3, r2
}
1a00144e:	4648      	mov	r0, r9
1a001450:	b003      	add	sp, #12
1a001452:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001456:	bf00      	nop
1a001458:	1a0039bc 	.word	0x1a0039bc

1a00145c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00145c:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00145e:	4a0b      	ldr	r2, [pc, #44]	; (1a00148c <SystemInit+0x30>)
1a001460:	4b0b      	ldr	r3, [pc, #44]	; (1a001490 <SystemInit+0x34>)
1a001462:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001464:	f503 7300 	add.w	r3, r3, #512	; 0x200
1a001468:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00146a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00146e:	2b20      	cmp	r3, #32
1a001470:	d004      	beq.n	1a00147c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a001472:	f7ff fa6d 	bl	1a000950 <Board_SystemInit>
   Board_Init();
1a001476:	f7ff f9f9 	bl	1a00086c <Board_Init>
#endif
}
1a00147a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00147c:	4a04      	ldr	r2, [pc, #16]	; (1a001490 <SystemInit+0x34>)
1a00147e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001482:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001486:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00148a:	e7f2      	b.n	1a001472 <SystemInit+0x16>
1a00148c:	1a000000 	.word	0x1a000000
1a001490:	e000ed00 	.word	0xe000ed00

1a001494 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001494:	4b04      	ldr	r3, [pc, #16]	; (1a0014a8 <cyclesCounterInit+0x14>)
1a001496:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001498:	4a04      	ldr	r2, [pc, #16]	; (1a0014ac <cyclesCounterInit+0x18>)
1a00149a:	6813      	ldr	r3, [r2, #0]
1a00149c:	f043 0301 	orr.w	r3, r3, #1
1a0014a0:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a0014a2:	2001      	movs	r0, #1
1a0014a4:	4770      	bx	lr
1a0014a6:	bf00      	nop
1a0014a8:	1000003c 	.word	0x1000003c
1a0014ac:	e0001000 	.word	0xe0001000

1a0014b0 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0014b0:	b410      	push	{r4}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0014b2:	4c0c      	ldr	r4, [pc, #48]	; (1a0014e4 <gpioObtainPinInit+0x34>)
1a0014b4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0014b8:	eb04 0c00 	add.w	ip, r4, r0
1a0014bc:	5620      	ldrsb	r0, [r4, r0]
1a0014be:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0014c0:	f99c 1001 	ldrsb.w	r1, [ip, #1]
1a0014c4:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0014c6:	f99c 2002 	ldrsb.w	r2, [ip, #2]
1a0014ca:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0014cc:	f99c 2003 	ldrsb.w	r2, [ip, #3]
1a0014d0:	9b01      	ldr	r3, [sp, #4]
1a0014d2:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0014d4:	f99c 2004 	ldrsb.w	r2, [ip, #4]
1a0014d8:	9b02      	ldr	r3, [sp, #8]
1a0014da:	701a      	strb	r2, [r3, #0]
}
1a0014dc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0014e0:	4770      	bx	lr
1a0014e2:	bf00      	nop
1a0014e4:	1a0039cc 	.word	0x1a0039cc

1a0014e8 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a0014e8:	f110 0f02 	cmn.w	r0, #2
1a0014ec:	f000 80c6 	beq.w	1a00167c <gpioInit+0x194>
{
1a0014f0:	b530      	push	{r4, r5, lr}
1a0014f2:	b085      	sub	sp, #20
1a0014f4:	460c      	mov	r4, r1
	  return FALSE;
   }
   if( pin == GND ){
1a0014f6:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0014fa:	f000 80c1 	beq.w	1a001680 <gpioInit+0x198>
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0014fe:	2300      	movs	r3, #0
1a001500:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001504:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001508:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00150c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001510:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001514:	f10d 030b 	add.w	r3, sp, #11
1a001518:	9301      	str	r3, [sp, #4]
1a00151a:	ab03      	add	r3, sp, #12
1a00151c:	9300      	str	r3, [sp, #0]
1a00151e:	f10d 030d 	add.w	r3, sp, #13
1a001522:	f10d 020e 	add.w	r2, sp, #14
1a001526:	f10d 010f 	add.w	r1, sp, #15
1a00152a:	f7ff ffc1 	bl	1a0014b0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00152e:	2c05      	cmp	r4, #5
1a001530:	f200 80a9 	bhi.w	1a001686 <gpioInit+0x19e>
1a001534:	e8df f004 	tbb	[pc, r4]
1a001538:	44268008 	.word	0x44268008
1a00153c:	0362      	.short	0x0362

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00153e:	4853      	ldr	r0, [pc, #332]	; (1a00168c <gpioInit+0x1a4>)
1a001540:	f7ff fd4a 	bl	1a000fd8 <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001544:	2001      	movs	r0, #1
      break;
1a001546:	e09c      	b.n	1a001682 <gpioInit+0x19a>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a001548:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00154c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001550:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001554:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001558:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00155c:	494c      	ldr	r1, [pc, #304]	; (1a001690 <gpioInit+0x1a8>)
1a00155e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001562:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001566:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a00156a:	2001      	movs	r0, #1
1a00156c:	fa00 f101 	lsl.w	r1, r0, r1
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001570:	4c46      	ldr	r4, [pc, #280]	; (1a00168c <gpioInit+0x1a4>)
1a001572:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001576:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00157a:	ea22 0201 	bic.w	r2, r2, r1
1a00157e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001582:	e07e      	b.n	1a001682 <gpioInit+0x19a>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a001584:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001588:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a00158c:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001590:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a001594:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001598:	493d      	ldr	r1, [pc, #244]	; (1a001690 <gpioInit+0x1a8>)
1a00159a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a00159e:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0015a2:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a0015a6:	2001      	movs	r0, #1
1a0015a8:	fa00 f101 	lsl.w	r1, r0, r1
1a0015ac:	4c37      	ldr	r4, [pc, #220]	; (1a00168c <gpioInit+0x1a4>)
1a0015ae:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0015b2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0015b6:	ea22 0201 	bic.w	r2, r2, r1
1a0015ba:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0015be:	e060      	b.n	1a001682 <gpioInit+0x19a>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a0015c0:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0015c4:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0015c8:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0015cc:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0015d0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0015d4:	492e      	ldr	r1, [pc, #184]	; (1a001690 <gpioInit+0x1a8>)
1a0015d6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0015da:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0015de:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a0015e2:	2001      	movs	r0, #1
1a0015e4:	fa00 f101 	lsl.w	r1, r0, r1
1a0015e8:	4c28      	ldr	r4, [pc, #160]	; (1a00168c <gpioInit+0x1a4>)
1a0015ea:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0015ee:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0015f2:	ea22 0201 	bic.w	r2, r2, r1
1a0015f6:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0015fa:	e042      	b.n	1a001682 <gpioInit+0x19a>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a0015fc:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001600:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001604:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001608:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00160c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001610:	491f      	ldr	r1, [pc, #124]	; (1a001690 <gpioInit+0x1a8>)
1a001612:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001616:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00161a:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a00161e:	2001      	movs	r0, #1
1a001620:	fa00 f101 	lsl.w	r1, r0, r1
1a001624:	4c19      	ldr	r4, [pc, #100]	; (1a00168c <gpioInit+0x1a4>)
1a001626:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00162a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00162e:	ea22 0201 	bic.w	r2, r2, r1
1a001632:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001636:	e024      	b.n	1a001682 <gpioInit+0x19a>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a001638:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00163c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001640:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001644:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001648:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00164c:	4910      	ldr	r1, [pc, #64]	; (1a001690 <gpioInit+0x1a8>)
1a00164e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001652:	f89d 000c 	ldrb.w	r0, [sp, #12]
1a001656:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a00165a:	2201      	movs	r2, #1
1a00165c:	408a      	lsls	r2, r1
		pGPIO->DIR[portNum] |= bitValue;
1a00165e:	4b0b      	ldr	r3, [pc, #44]	; (1a00168c <gpioInit+0x1a4>)
1a001660:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
1a001664:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
1a001668:	432a      	orrs	r2, r5
1a00166a:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00166e:	b2c9      	uxtb	r1, r1
	pGPIO->B[port][pin] = setting;
1a001670:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001674:	2200      	movs	r2, #0
1a001676:	545a      	strb	r2, [r3, r1]
   bool_t ret_val     = 1;
1a001678:	4620      	mov	r0, r4
}
1a00167a:	e002      	b.n	1a001682 <gpioInit+0x19a>
	  return FALSE;
1a00167c:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a00167e:	4770      	bx	lr
	  return FALSE;
1a001680:	2000      	movs	r0, #0
}
1a001682:	b005      	add	sp, #20
1a001684:	bd30      	pop	{r4, r5, pc}
   switch(config) {
1a001686:	2000      	movs	r0, #0
1a001688:	e7fb      	b.n	1a001682 <gpioInit+0x19a>
1a00168a:	bf00      	nop
1a00168c:	400f4000 	.word	0x400f4000
1a001690:	40086000 	.word	0x40086000

1a001694 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a001694:	f110 0f02 	cmn.w	r0, #2
1a001698:	d02d      	beq.n	1a0016f6 <gpioWrite+0x62>
{
1a00169a:	b510      	push	{r4, lr}
1a00169c:	b084      	sub	sp, #16
1a00169e:	460c      	mov	r4, r1
	  return FALSE;
   }
   if( pin == GND ){
1a0016a0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0016a4:	d029      	beq.n	1a0016fa <gpioWrite+0x66>
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0016a6:	2300      	movs	r3, #0
1a0016a8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0016ac:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0016b0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0016b4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0016b8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0016bc:	f10d 030b 	add.w	r3, sp, #11
1a0016c0:	9301      	str	r3, [sp, #4]
1a0016c2:	ab03      	add	r3, sp, #12
1a0016c4:	9300      	str	r3, [sp, #0]
1a0016c6:	f10d 030d 	add.w	r3, sp, #13
1a0016ca:	f10d 020e 	add.w	r2, sp, #14
1a0016ce:	f10d 010f 	add.w	r1, sp, #15
1a0016d2:	f7ff feed 	bl	1a0014b0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0016d6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0016da:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0016de:	1e21      	subs	r1, r4, #0
1a0016e0:	bf18      	it	ne
1a0016e2:	2101      	movne	r1, #1
	pGPIO->B[port][pin] = setting;
1a0016e4:	015b      	lsls	r3, r3, #5
1a0016e6:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a0016ea:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a0016ee:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a0016f0:	2001      	movs	r0, #1
}
1a0016f2:	b004      	add	sp, #16
1a0016f4:	bd10      	pop	{r4, pc}
	  return FALSE;
1a0016f6:	2000      	movs	r0, #0
}
1a0016f8:	4770      	bx	lr
	  return FALSE;
1a0016fa:	2000      	movs	r0, #0
1a0016fc:	e7f9      	b.n	1a0016f2 <gpioWrite+0x5e>
	...

1a001700 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001700:	4b01      	ldr	r3, [pc, #4]	; (1a001708 <tickRead+0x8>)
1a001702:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001706:	4770      	bx	lr
1a001708:	10000108 	.word	0x10000108

1a00170c <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a00170c:	b120      	cbz	r0, 1a001718 <tickPowerSet+0xc>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00170e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
1a001712:	2207      	movs	r2, #7
1a001714:	611a      	str	r2, [r3, #16]
1a001716:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001718:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
1a00171c:	2200      	movs	r2, #0
1a00171e:	611a      	str	r2, [r3, #16]
      }
   #endif
}
1a001720:	4770      	bx	lr
	...

1a001724 <tickInit>:
{
1a001724:	b510      	push	{r4, lr}
      if( tickRateMSvalue == 0 ) {
1a001726:	ea50 0301 	orrs.w	r3, r0, r1
1a00172a:	d028      	beq.n	1a00177e <tickInit+0x5a>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a00172c:	1e42      	subs	r2, r0, #1
1a00172e:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001732:	2a32      	cmp	r2, #50	; 0x32
1a001734:	f173 0300 	sbcs.w	r3, r3, #0
1a001738:	d226      	bcs.n	1a001788 <tickInit+0x64>
            tickRateMS = tickRateMSvalue;
1a00173a:	4b14      	ldr	r3, [pc, #80]	; (1a00178c <tickInit+0x68>)
1a00173c:	6018      	str	r0, [r3, #0]
1a00173e:	6059      	str	r1, [r3, #4]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001740:	4b13      	ldr	r3, [pc, #76]	; (1a001790 <tickInit+0x6c>)
1a001742:	681c      	ldr	r4, [r3, #0]
1a001744:	fba4 0c00 	umull	r0, ip, r4, r0
1a001748:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00174c:	2300      	movs	r3, #0
1a00174e:	fb04 c101 	mla	r1, r4, r1, ip
1a001752:	f000 fdc9 	bl	1a0022e8 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001756:	3801      	subs	r0, #1
1a001758:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00175c:	d20a      	bcs.n	1a001774 <tickInit+0x50>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00175e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
1a001762:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001764:	4a0b      	ldr	r2, [pc, #44]	; (1a001794 <tickInit+0x70>)
1a001766:	21e0      	movs	r1, #224	; 0xe0
1a001768:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00176c:	2200      	movs	r2, #0
1a00176e:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001770:	2207      	movs	r2, #7
1a001772:	611a      	str	r2, [r3, #16]
            tickPowerSet( ON );
1a001774:	2001      	movs	r0, #1
1a001776:	f7ff ffc9 	bl	1a00170c <tickPowerSet>
      bool_t ret_val = 1;
1a00177a:	2001      	movs	r0, #1
}
1a00177c:	bd10      	pop	{r4, pc}
         tickPowerSet( OFF );
1a00177e:	2000      	movs	r0, #0
1a001780:	f7ff ffc4 	bl	1a00170c <tickPowerSet>
         ret_val = 0;
1a001784:	2000      	movs	r0, #0
1a001786:	e7f9      	b.n	1a00177c <tickInit+0x58>
            ret_val = 0;
1a001788:	2000      	movs	r0, #0
1a00178a:	e7f7      	b.n	1a00177c <tickInit+0x58>
1a00178c:	10000040 	.word	0x10000040
1a001790:	100000f8 	.word	0x100000f8
1a001794:	e000ed00 	.word	0xe000ed00

1a001798 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a001798:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a00179a:	4a07      	ldr	r2, [pc, #28]	; (1a0017b8 <SysTick_Handler+0x20>)
1a00179c:	6813      	ldr	r3, [r2, #0]
1a00179e:	6851      	ldr	r1, [r2, #4]
1a0017a0:	3301      	adds	r3, #1
1a0017a2:	f141 0100 	adc.w	r1, r1, #0
1a0017a6:	6013      	str	r3, [r2, #0]
1a0017a8:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0017aa:	4b04      	ldr	r3, [pc, #16]	; (1a0017bc <SysTick_Handler+0x24>)
1a0017ac:	681b      	ldr	r3, [r3, #0]
1a0017ae:	b113      	cbz	r3, 1a0017b6 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0017b0:	4a03      	ldr	r2, [pc, #12]	; (1a0017c0 <SysTick_Handler+0x28>)
1a0017b2:	6810      	ldr	r0, [r2, #0]
1a0017b4:	4798      	blx	r3
   }
}
1a0017b6:	bd08      	pop	{r3, pc}
1a0017b8:	10000108 	.word	0x10000108
1a0017bc:	10000110 	.word	0x10000110
1a0017c0:	10000104 	.word	0x10000104

1a0017c4 <errorOcurred>:
/* Causes:
 * User forgot to initialize the functions for the compare match interrupt on Timer_init call
 */
static void errorOcurred( void* ptr )
{
   while(1);
1a0017c4:	e7fe      	b.n	1a0017c4 <errorOcurred>

1a0017c6 <doNothing>:
}

static void doNothing( void* ptr )
{
}
1a0017c6:	4770      	bx	lr

1a0017c8 <Timer_Init>:
 * @return   nothing
 * @note   For the 'ticks' parameter, see function Timer_microsecondsToTicks
 */
void Timer_Init( uint8_t timerNumber, uint32_t ticks,
                 callBackFuncPtr_t voidFunctionPointer)
{
1a0017c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
   /* Source:
   http://docs.lpcware.com/lpcopen/v1.03/lpc18xx__43xx_2examples_2periph_2periph__blinky_2blinky_8c_source.html */

   /*If timer period = CompareMatch0 Period = 0 => ERROR*/
   if (ticks==0) {
1a0017cc:	2900      	cmp	r1, #0
1a0017ce:	d069      	beq.n	1a0018a4 <Timer_Init+0xdc>
1a0017d0:	4604      	mov	r4, r0
1a0017d2:	4616      	mov	r6, r2
1a0017d4:	460f      	mov	r7, r1
      errorOcurred(0);
   }

   /* Enable timer clock and reset it */
   Chip_TIMER_Init(timer_sd[timerNumber].name);
1a0017d6:	4b38      	ldr	r3, [pc, #224]	; (1a0018b8 <Timer_Init+0xf0>)
1a0017d8:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a0017dc:	eb03 0882 	add.w	r8, r3, r2, lsl #2
1a0017e0:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
1a0017e4:	4628      	mov	r0, r5
1a0017e6:	f7ff fd59 	bl	1a00129c <Chip_TIMER_Init>
   Chip_RGU_TriggerReset(timer_sd[timerNumber].RGU);
1a0017ea:	f898 2004 	ldrb.w	r2, [r8, #4]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	Nothing
 */
STATIC INLINE void Chip_RGU_TriggerReset(CHIP_RGU_RST_T ResetNumber)
{
	LPC_RGU->RESET_CTRL[ResetNumber >> 5] = 1 << (ResetNumber & 31);
1a0017ee:	f002 031f 	and.w	r3, r2, #31
1a0017f2:	0952      	lsrs	r2, r2, #5
1a0017f4:	2001      	movs	r0, #1
1a0017f6:	4098      	lsls	r0, r3
1a0017f8:	f102 0140 	add.w	r1, r2, #64	; 0x40
1a0017fc:	4b2f      	ldr	r3, [pc, #188]	; (1a0018bc <Timer_Init+0xf4>)
1a0017fe:	f843 0021 	str.w	r0, [r3, r1, lsl #2]
 * @param	ResetNumber	: Peripheral reset number to trigger
 * @return	true if the periperal is still being reset
 */
STATIC INLINE bool Chip_RGU_InReset(CHIP_RGU_RST_T ResetNumber)
{
	return !(LPC_RGU->RESET_ACTIVE_STATUS[ResetNumber >> 5] & (1 << (ResetNumber & 31)));
1a001802:	f102 0354 	add.w	r3, r2, #84	; 0x54
1a001806:	492d      	ldr	r1, [pc, #180]	; (1a0018bc <Timer_Init+0xf4>)
1a001808:	f851 3023 	ldr.w	r3, [r1, r3, lsl #2]
   while (Chip_RGU_InReset(timer_sd[timerNumber].RGU)) {}
1a00180c:	4218      	tst	r0, r3
1a00180e:	d0f8      	beq.n	1a001802 <Timer_Init+0x3a>
   Chip_TIMER_Reset(timer_sd[timerNumber].name);
1a001810:	4628      	mov	r0, r5
1a001812:	f7ff fd49 	bl	1a0012a8 <Chip_TIMER_Reset>

   /* Update the defalut function pointer name of the Compare match 0*/
   timer_dd[timerNumber].timerCompareMatchFunctionPointer[TIMERCOMPAREMATCH0] = voidFunctionPointer;
1a001816:	0123      	lsls	r3, r4, #4
1a001818:	4a29      	ldr	r2, [pc, #164]	; (1a0018c0 <Timer_Init+0xf8>)
1a00181a:	50d6      	str	r6, [r2, r3]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_MatchEnableInt(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_INT_ON_MATCH(matchnum);
1a00181c:	696b      	ldr	r3, [r5, #20]
1a00181e:	f043 0301 	orr.w	r3, r3, #1
1a001822:	616b      	str	r3, [r5, #20]
	pTMR->MR[matchnum] = matchval; // matchval 0 to 4294967295 (uint32_t)
1a001824:	61af      	str	r7, [r5, #24]
 * @param	matchnum	: Match timer, 0 to 3
 * @return	Nothing
 */
STATIC INLINE void Chip_TIMER_ResetOnMatchEnable(LPC_TIMER_T *pTMR, int8_t matchnum)
{
	pTMR->MCR |= TIMER_RESET_ON_MATCH(matchnum);
1a001826:	696b      	ldr	r3, [r5, #20]
1a001828:	f043 0302 	orr.w	r3, r3, #2
1a00182c:	616b      	str	r3, [r5, #20]
	pTMR->TCR |= TIMER_ENABLE;
1a00182e:	686b      	ldr	r3, [r5, #4]
1a001830:	f043 0301 	orr.w	r3, r3, #1
1a001834:	606b      	str	r3, [r5, #4]

   /*Enable timer*/
   Chip_TIMER_Enable(timer_sd[timerNumber].name);

   /* Enable timer interrupt */
   NVIC_SetPriority(timer_sd[timerNumber].IRQn, MAX_SYSCALL_INTERRUPT_PRIORITY+1);
1a001836:	eb04 0244 	add.w	r2, r4, r4, lsl #1
1a00183a:	4b1f      	ldr	r3, [pc, #124]	; (1a0018b8 <Timer_Init+0xf0>)
1a00183c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
1a001840:	689a      	ldr	r2, [r3, #8]
1a001842:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001844:	2b00      	cmp	r3, #0
1a001846:	db30      	blt.n	1a0018aa <Timer_Init+0xe2>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001848:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a00184c:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a001850:	22c0      	movs	r2, #192	; 0xc0
1a001852:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
   NVIC_EnableIRQ(timer_sd[timerNumber].IRQn);
1a001856:	eb04 0244 	add.w	r2, r4, r4, lsl #1
1a00185a:	4b17      	ldr	r3, [pc, #92]	; (1a0018b8 <Timer_Init+0xf0>)
1a00185c:	eb03 0382 	add.w	r3, r3, r2, lsl #2
1a001860:	689a      	ldr	r2, [r3, #8]
1a001862:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001864:	2b00      	cmp	r3, #0
1a001866:	db08      	blt.n	1a00187a <Timer_Init+0xb2>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001868:	f002 021f 	and.w	r2, r2, #31
1a00186c:	095b      	lsrs	r3, r3, #5
1a00186e:	2101      	movs	r1, #1
1a001870:	fa01 f202 	lsl.w	r2, r1, r2
1a001874:	4913      	ldr	r1, [pc, #76]	; (1a0018c4 <Timer_Init+0xfc>)
1a001876:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   NVIC_ClearPendingIRQ(timer_sd[timerNumber].IRQn);
1a00187a:	eb04 0444 	add.w	r4, r4, r4, lsl #1
1a00187e:	4b0e      	ldr	r3, [pc, #56]	; (1a0018b8 <Timer_Init+0xf0>)
1a001880:	eb03 0384 	add.w	r3, r3, r4, lsl #2
1a001884:	689a      	ldr	r2, [r3, #8]
1a001886:	b253      	sxtb	r3, r2
  if ((int32_t)(IRQn) >= 0)
1a001888:	2b00      	cmp	r3, #0
1a00188a:	db09      	blt.n	1a0018a0 <Timer_Init+0xd8>
    NVIC->ICPR[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a00188c:	f002 021f 	and.w	r2, r2, #31
1a001890:	095b      	lsrs	r3, r3, #5
1a001892:	2101      	movs	r1, #1
1a001894:	fa01 f202 	lsl.w	r2, r1, r2
1a001898:	3360      	adds	r3, #96	; 0x60
1a00189a:	490a      	ldr	r1, [pc, #40]	; (1a0018c4 <Timer_Init+0xfc>)
1a00189c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
1a0018a0:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
      errorOcurred(0);
1a0018a4:	2000      	movs	r0, #0
1a0018a6:	f7ff ff8d 	bl	1a0017c4 <errorOcurred>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a0018aa:	f002 020f 	and.w	r2, r2, #15
1a0018ae:	4b06      	ldr	r3, [pc, #24]	; (1a0018c8 <Timer_Init+0x100>)
1a0018b0:	4413      	add	r3, r2
1a0018b2:	22c0      	movs	r2, #192	; 0xc0
1a0018b4:	761a      	strb	r2, [r3, #24]
1a0018b6:	e7ce      	b.n	1a001856 <Timer_Init+0x8e>
1a0018b8:	1a003ab4 	.word	0x1a003ab4
1a0018bc:	40053000 	.word	0x40053000
1a0018c0:	10000048 	.word	0x10000048
1a0018c4:	e000e100 	.word	0xe000e100
1a0018c8:	e000ecfc 	.word	0xe000ecfc

1a0018cc <Timer_microsecondsToTicks>:
 * @note   Can be used for the second parameter in the Timer_init
 */
uint32_t Timer_microsecondsToTicks( uint32_t uS )
{
   return (uS*(LPC4337_MAX_FREC/1000000));
}
1a0018cc:	23cc      	movs	r3, #204	; 0xcc
1a0018ce:	fb03 f000 	mul.w	r0, r3, r0
1a0018d2:	4770      	bx	lr

1a0018d4 <TIMER0_IRQHandler>:
/*
 * @Brief:   Executes the functions passed by parameter in the Timer_init,
 *   at the chosen frequencies
 */
void TIMER0_IRQHandler(void)
{
1a0018d4:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a0018d6:	2400      	movs	r4, #0
1a0018d8:	e001      	b.n	1a0018de <TIMER0_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a0018da:	3401      	adds	r4, #1
1a0018dc:	b2e4      	uxtb	r4, r4
        compareMatchNumber <= TIMERCOMPAREMATCH3;
1a0018de:	2c03      	cmp	r4, #3
1a0018e0:	d812      	bhi.n	1a001908 <TIMER0_IRQHandler+0x34>
      if( Chip_TIMER_MatchPending(LPC_TIMER0, compareMatchNumber) ) {
1a0018e2:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0018e4:	4b09      	ldr	r3, [pc, #36]	; (1a00190c <TIMER0_IRQHandler+0x38>)
1a0018e6:	681a      	ldr	r2, [r3, #0]
1a0018e8:	f004 010f 	and.w	r1, r4, #15
1a0018ec:	2301      	movs	r3, #1
1a0018ee:	408b      	lsls	r3, r1
1a0018f0:	421a      	tst	r2, r3
1a0018f2:	d0f2      	beq.n	1a0018da <TIMER0_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER0].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0018f4:	4b06      	ldr	r3, [pc, #24]	; (1a001910 <TIMER0_IRQHandler+0x3c>)
1a0018f6:	f853 3024 	ldr.w	r3, [r3, r4, lsl #2]
1a0018fa:	2000      	movs	r0, #0
1a0018fc:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0018fe:	2301      	movs	r3, #1
1a001900:	40ab      	lsls	r3, r5
1a001902:	4a02      	ldr	r2, [pc, #8]	; (1a00190c <TIMER0_IRQHandler+0x38>)
1a001904:	6013      	str	r3, [r2, #0]
}
1a001906:	e7e8      	b.n	1a0018da <TIMER0_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER0, compareMatchNumber);
      }
   }
}
1a001908:	bd38      	pop	{r3, r4, r5, pc}
1a00190a:	bf00      	nop
1a00190c:	40084000 	.word	0x40084000
1a001910:	10000048 	.word	0x10000048

1a001914 <TIMER1_IRQHandler>:

void TIMER1_IRQHandler( void )
{
1a001914:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001916:	2400      	movs	r4, #0
1a001918:	e001      	b.n	1a00191e <TIMER1_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00191a:	3401      	adds	r4, #1
1a00191c:	b2e4      	uxtb	r4, r4
        compareMatchNumber <= TIMERCOMPAREMATCH3;
1a00191e:	2c03      	cmp	r4, #3
1a001920:	d813      	bhi.n	1a00194a <TIMER1_IRQHandler+0x36>
      if( Chip_TIMER_MatchPending(LPC_TIMER1, compareMatchNumber) ) {
1a001922:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001924:	4b09      	ldr	r3, [pc, #36]	; (1a00194c <TIMER1_IRQHandler+0x38>)
1a001926:	681a      	ldr	r2, [r3, #0]
1a001928:	f004 010f 	and.w	r1, r4, #15
1a00192c:	2301      	movs	r3, #1
1a00192e:	408b      	lsls	r3, r1
1a001930:	421a      	tst	r2, r3
1a001932:	d0f2      	beq.n	1a00191a <TIMER1_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER1].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001934:	1d23      	adds	r3, r4, #4
1a001936:	4a06      	ldr	r2, [pc, #24]	; (1a001950 <TIMER1_IRQHandler+0x3c>)
1a001938:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00193c:	2000      	movs	r0, #0
1a00193e:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001940:	2301      	movs	r3, #1
1a001942:	40ab      	lsls	r3, r5
1a001944:	4a01      	ldr	r2, [pc, #4]	; (1a00194c <TIMER1_IRQHandler+0x38>)
1a001946:	6013      	str	r3, [r2, #0]
}
1a001948:	e7e7      	b.n	1a00191a <TIMER1_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER1, compareMatchNumber);
      }
   }
}
1a00194a:	bd38      	pop	{r3, r4, r5, pc}
1a00194c:	40085000 	.word	0x40085000
1a001950:	10000048 	.word	0x10000048

1a001954 <TIMER2_IRQHandler>:

void TIMER2_IRQHandler( void )
{
1a001954:	b538      	push	{r3, r4, r5, lr}
   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a001956:	2400      	movs	r4, #0
1a001958:	e001      	b.n	1a00195e <TIMER2_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00195a:	3401      	adds	r4, #1
1a00195c:	b2e4      	uxtb	r4, r4
        compareMatchNumber <= TIMERCOMPAREMATCH3;
1a00195e:	2c03      	cmp	r4, #3
1a001960:	d814      	bhi.n	1a00198c <TIMER2_IRQHandler+0x38>
      if( Chip_TIMER_MatchPending(LPC_TIMER2, compareMatchNumber) ) {
1a001962:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a001964:	4b0a      	ldr	r3, [pc, #40]	; (1a001990 <TIMER2_IRQHandler+0x3c>)
1a001966:	681a      	ldr	r2, [r3, #0]
1a001968:	f004 010f 	and.w	r1, r4, #15
1a00196c:	2301      	movs	r3, #1
1a00196e:	408b      	lsls	r3, r1
1a001970:	421a      	tst	r2, r3
1a001972:	d0f2      	beq.n	1a00195a <TIMER2_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER2].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a001974:	f104 0308 	add.w	r3, r4, #8
1a001978:	4a06      	ldr	r2, [pc, #24]	; (1a001994 <TIMER2_IRQHandler+0x40>)
1a00197a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a00197e:	2000      	movs	r0, #0
1a001980:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a001982:	2301      	movs	r3, #1
1a001984:	40ab      	lsls	r3, r5
1a001986:	4a02      	ldr	r2, [pc, #8]	; (1a001990 <TIMER2_IRQHandler+0x3c>)
1a001988:	6013      	str	r3, [r2, #0]
}
1a00198a:	e7e6      	b.n	1a00195a <TIMER2_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER2, compareMatchNumber);
      }
   }
}
1a00198c:	bd38      	pop	{r3, r4, r5, pc}
1a00198e:	bf00      	nop
1a001990:	400c3000 	.word	0x400c3000
1a001994:	10000048 	.word	0x10000048

1a001998 <TIMER3_IRQHandler>:

/*fixme __attribute__ ((section(".after_vectors")))*/
void TIMER3_IRQHandler( void )
{
1a001998:	b538      	push	{r3, r4, r5, lr}

   uint8_t compareMatchNumber = 0;

   for( compareMatchNumber = TIMERCOMPAREMATCH0;
1a00199a:	2400      	movs	r4, #0
1a00199c:	e001      	b.n	1a0019a2 <TIMER3_IRQHandler+0xa>
        compareMatchNumber <= TIMERCOMPAREMATCH3;
        compareMatchNumber++ ) {
1a00199e:	3401      	adds	r4, #1
1a0019a0:	b2e4      	uxtb	r4, r4
        compareMatchNumber <= TIMERCOMPAREMATCH3;
1a0019a2:	2c03      	cmp	r4, #3
1a0019a4:	d814      	bhi.n	1a0019d0 <TIMER3_IRQHandler+0x38>
      if (Chip_TIMER_MatchPending(LPC_TIMER3, compareMatchNumber)) {
1a0019a6:	b265      	sxtb	r5, r4
	return (bool) ((pTMR->IR & TIMER_MATCH_INT(matchnum)) != 0);
1a0019a8:	4b0a      	ldr	r3, [pc, #40]	; (1a0019d4 <TIMER3_IRQHandler+0x3c>)
1a0019aa:	681a      	ldr	r2, [r3, #0]
1a0019ac:	f004 010f 	and.w	r1, r4, #15
1a0019b0:	2301      	movs	r3, #1
1a0019b2:	408b      	lsls	r3, r1
1a0019b4:	421a      	tst	r2, r3
1a0019b6:	d0f2      	beq.n	1a00199e <TIMER3_IRQHandler+0x6>
         /*Run the functions saved in the timer dynamic data structure*/
         (*timer_dd[TIMER3].timerCompareMatchFunctionPointer[compareMatchNumber])(0);
1a0019b8:	f104 030c 	add.w	r3, r4, #12
1a0019bc:	4a06      	ldr	r2, [pc, #24]	; (1a0019d8 <TIMER3_IRQHandler+0x40>)
1a0019be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
1a0019c2:	2000      	movs	r0, #0
1a0019c4:	4798      	blx	r3
	pTMR->IR = TIMER_IR_CLR(matchnum);
1a0019c6:	2301      	movs	r3, #1
1a0019c8:	40ab      	lsls	r3, r5
1a0019ca:	4a02      	ldr	r2, [pc, #8]	; (1a0019d4 <TIMER3_IRQHandler+0x3c>)
1a0019cc:	6013      	str	r3, [r2, #0]
}
1a0019ce:	e7e6      	b.n	1a00199e <TIMER3_IRQHandler+0x6>
         Chip_TIMER_ClearMatch(LPC_TIMER3, compareMatchNumber);
      }
   }
}
1a0019d0:	bd38      	pop	{r3, r4, r5, pc}
1a0019d2:	bf00      	nop
1a0019d4:	400c4000 	.word	0x400c4000
1a0019d8:	10000048 	.word	0x10000048

1a0019dc <uartProcessIRQ>:
{
1a0019dc:	b570      	push	{r4, r5, r6, lr}
1a0019de:	4604      	mov	r4, r0
   uint8_t status = Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr );
1a0019e0:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a0019e4:	4b22      	ldr	r3, [pc, #136]	; (1a001a70 <uartProcessIRQ+0x94>)
1a0019e6:	f853 5022 	ldr.w	r5, [r3, r2, lsl #2]
	return pUART->LSR;
1a0019ea:	696b      	ldr	r3, [r5, #20]
   if(status & UART_LSR_RDR) { // uartRxReady
1a0019ec:	b2de      	uxtb	r6, r3
1a0019ee:	f013 0f01 	tst.w	r3, #1
1a0019f2:	d00a      	beq.n	1a001a0a <uartProcessIRQ+0x2e>
      if( ( uart == UART_GPIO ) && (rxIsrCallbackUART0 != 0) )
1a0019f4:	b928      	cbnz	r0, 1a001a02 <uartProcessIRQ+0x26>
1a0019f6:	4b1f      	ldr	r3, [pc, #124]	; (1a001a74 <uartProcessIRQ+0x98>)
1a0019f8:	681b      	ldr	r3, [r3, #0]
1a0019fa:	b113      	cbz	r3, 1a001a02 <uartProcessIRQ+0x26>
         (*rxIsrCallbackUART0)(rxIsrCallbackUART0Params);
1a0019fc:	4a1e      	ldr	r2, [pc, #120]	; (1a001a78 <uartProcessIRQ+0x9c>)
1a0019fe:	6810      	ldr	r0, [r2, #0]
1a001a00:	4798      	blx	r3
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001a02:	2c03      	cmp	r4, #3
1a001a04:	d014      	beq.n	1a001a30 <uartProcessIRQ+0x54>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001a06:	2c05      	cmp	r4, #5
1a001a08:	d01a      	beq.n	1a001a40 <uartProcessIRQ+0x64>
   if( ( status & UART_LSR_THRE ) && // uartTxReady
1a001a0a:	f016 0f20 	tst.w	r6, #32
1a001a0e:	d00e      	beq.n	1a001a2e <uartProcessIRQ+0x52>
	return pUART->IER;
1a001a10:	686b      	ldr	r3, [r5, #4]
1a001a12:	f013 0f02 	tst.w	r3, #2
1a001a16:	d00a      	beq.n	1a001a2e <uartProcessIRQ+0x52>
      if( ( uart == UART_GPIO ) && (txIsrCallbackUART0 != 0) )
1a001a18:	b92c      	cbnz	r4, 1a001a26 <uartProcessIRQ+0x4a>
1a001a1a:	4b18      	ldr	r3, [pc, #96]	; (1a001a7c <uartProcessIRQ+0xa0>)
1a001a1c:	681b      	ldr	r3, [r3, #0]
1a001a1e:	b113      	cbz	r3, 1a001a26 <uartProcessIRQ+0x4a>
         (*txIsrCallbackUART0)(txIsrCallbackUART0Params);
1a001a20:	4a17      	ldr	r2, [pc, #92]	; (1a001a80 <uartProcessIRQ+0xa4>)
1a001a22:	6810      	ldr	r0, [r2, #0]
1a001a24:	4798      	blx	r3
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001a26:	2c03      	cmp	r4, #3
1a001a28:	d012      	beq.n	1a001a50 <uartProcessIRQ+0x74>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001a2a:	2c05      	cmp	r4, #5
1a001a2c:	d018      	beq.n	1a001a60 <uartProcessIRQ+0x84>
}
1a001a2e:	bd70      	pop	{r4, r5, r6, pc}
      if( ( uart == UART_USB )  && (rxIsrCallbackUART2 != 0) )
1a001a30:	4b14      	ldr	r3, [pc, #80]	; (1a001a84 <uartProcessIRQ+0xa8>)
1a001a32:	681b      	ldr	r3, [r3, #0]
1a001a34:	2b00      	cmp	r3, #0
1a001a36:	d0e6      	beq.n	1a001a06 <uartProcessIRQ+0x2a>
         (*rxIsrCallbackUART2)(rxIsrCallbackUART2Params);
1a001a38:	4a13      	ldr	r2, [pc, #76]	; (1a001a88 <uartProcessIRQ+0xac>)
1a001a3a:	6810      	ldr	r0, [r2, #0]
1a001a3c:	4798      	blx	r3
1a001a3e:	e7e2      	b.n	1a001a06 <uartProcessIRQ+0x2a>
      if( ( uart == UART_232 )  && (rxIsrCallbackUART3 != 0) )
1a001a40:	4b12      	ldr	r3, [pc, #72]	; (1a001a8c <uartProcessIRQ+0xb0>)
1a001a42:	681b      	ldr	r3, [r3, #0]
1a001a44:	2b00      	cmp	r3, #0
1a001a46:	d0e0      	beq.n	1a001a0a <uartProcessIRQ+0x2e>
         (*rxIsrCallbackUART3)(rxIsrCallbackUART3Params);
1a001a48:	4a11      	ldr	r2, [pc, #68]	; (1a001a90 <uartProcessIRQ+0xb4>)
1a001a4a:	6810      	ldr	r0, [r2, #0]
1a001a4c:	4798      	blx	r3
1a001a4e:	e7dc      	b.n	1a001a0a <uartProcessIRQ+0x2e>
      if( ( uart == UART_USB )  && (txIsrCallbackUART2 != 0) )
1a001a50:	4b10      	ldr	r3, [pc, #64]	; (1a001a94 <uartProcessIRQ+0xb8>)
1a001a52:	681b      	ldr	r3, [r3, #0]
1a001a54:	2b00      	cmp	r3, #0
1a001a56:	d0e8      	beq.n	1a001a2a <uartProcessIRQ+0x4e>
         (*txIsrCallbackUART2)(txIsrCallbackUART2Params);
1a001a58:	4a0f      	ldr	r2, [pc, #60]	; (1a001a98 <uartProcessIRQ+0xbc>)
1a001a5a:	6810      	ldr	r0, [r2, #0]
1a001a5c:	4798      	blx	r3
1a001a5e:	e7e4      	b.n	1a001a2a <uartProcessIRQ+0x4e>
      if( ( uart == UART_232 )  && (txIsrCallbackUART3 != 0) )
1a001a60:	4b0e      	ldr	r3, [pc, #56]	; (1a001a9c <uartProcessIRQ+0xc0>)
1a001a62:	681b      	ldr	r3, [r3, #0]
1a001a64:	2b00      	cmp	r3, #0
1a001a66:	d0e2      	beq.n	1a001a2e <uartProcessIRQ+0x52>
         (*txIsrCallbackUART3)(txIsrCallbackUART3Params);
1a001a68:	4a0d      	ldr	r2, [pc, #52]	; (1a001aa0 <uartProcessIRQ+0xc4>)
1a001a6a:	6810      	ldr	r0, [r2, #0]
1a001a6c:	4798      	blx	r3
}
1a001a6e:	e7de      	b.n	1a001a2e <uartProcessIRQ+0x52>
1a001a70:	1a003ae4 	.word	0x1a003ae4
1a001a74:	10000114 	.word	0x10000114
1a001a78:	10000118 	.word	0x10000118
1a001a7c:	1000012c 	.word	0x1000012c
1a001a80:	10000130 	.word	0x10000130
1a001a84:	1000011c 	.word	0x1000011c
1a001a88:	10000120 	.word	0x10000120
1a001a8c:	10000124 	.word	0x10000124
1a001a90:	10000128 	.word	0x10000128
1a001a94:	10000134 	.word	0x10000134
1a001a98:	10000138 	.word	0x10000138
1a001a9c:	1000013c 	.word	0x1000013c
1a001aa0:	10000140 	.word	0x10000140

1a001aa4 <uartInterrupt>:
   if( enable ) {
1a001aa4:	b341      	cbz	r1, 1a001af8 <uartInterrupt+0x54>
      NVIC_SetPriority( lpcUarts[uart].uartIrqAddr, 5 ); // FreeRTOS Requiere prioridad >= 5 (numero mas alto, mas baja prioridad)
1a001aa6:	eb00 0240 	add.w	r2, r0, r0, lsl #1
1a001aaa:	4b1f      	ldr	r3, [pc, #124]	; (1a001b28 <uartInterrupt+0x84>)
1a001aac:	eb03 0382 	add.w	r3, r3, r2, lsl #2
1a001ab0:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001ab4:	2b00      	cmp	r3, #0
1a001ab6:	db18      	blt.n	1a001aea <uartInterrupt+0x46>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001ab8:	f103 4360 	add.w	r3, r3, #3758096384	; 0xe0000000
1a001abc:	f503 4361 	add.w	r3, r3, #57600	; 0xe100
1a001ac0:	22a0      	movs	r2, #160	; 0xa0
1a001ac2:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
      NVIC_EnableIRQ( lpcUarts[uart].uartIrqAddr );
1a001ac6:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001aca:	4b17      	ldr	r3, [pc, #92]	; (1a001b28 <uartInterrupt+0x84>)
1a001acc:	eb03 0380 	add.w	r3, r3, r0, lsl #2
1a001ad0:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001ad4:	2b00      	cmp	r3, #0
1a001ad6:	db25      	blt.n	1a001b24 <uartInterrupt+0x80>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001ad8:	f003 011f 	and.w	r1, r3, #31
1a001adc:	095b      	lsrs	r3, r3, #5
1a001ade:	2201      	movs	r2, #1
1a001ae0:	408a      	lsls	r2, r1
1a001ae2:	4912      	ldr	r1, [pc, #72]	; (1a001b2c <uartInterrupt+0x88>)
1a001ae4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
1a001ae8:	4770      	bx	lr
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001aea:	f003 030f 	and.w	r3, r3, #15
1a001aee:	4a10      	ldr	r2, [pc, #64]	; (1a001b30 <uartInterrupt+0x8c>)
1a001af0:	441a      	add	r2, r3
1a001af2:	23a0      	movs	r3, #160	; 0xa0
1a001af4:	7613      	strb	r3, [r2, #24]
1a001af6:	e7e6      	b.n	1a001ac6 <uartInterrupt+0x22>
      NVIC_DisableIRQ( lpcUarts[uart].uartIrqAddr );
1a001af8:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001afc:	4b0a      	ldr	r3, [pc, #40]	; (1a001b28 <uartInterrupt+0x84>)
1a001afe:	eb03 0380 	add.w	r3, r3, r0, lsl #2
1a001b02:	f993 300a 	ldrsb.w	r3, [r3, #10]
  if ((int32_t)(IRQn) >= 0)
1a001b06:	2b00      	cmp	r3, #0
1a001b08:	db0c      	blt.n	1a001b24 <uartInterrupt+0x80>
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
1a001b0a:	f003 011f 	and.w	r1, r3, #31
1a001b0e:	095b      	lsrs	r3, r3, #5
1a001b10:	2201      	movs	r2, #1
1a001b12:	408a      	lsls	r2, r1
1a001b14:	3320      	adds	r3, #32
1a001b16:	4905      	ldr	r1, [pc, #20]	; (1a001b2c <uartInterrupt+0x88>)
1a001b18:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
1a001b1c:	f3bf 8f4f 	dsb	sy
  __ASM volatile ("isb 0xF":::"memory");
1a001b20:	f3bf 8f6f 	isb	sy
}
1a001b24:	4770      	bx	lr
1a001b26:	bf00      	nop
1a001b28:	1a003ae4 	.word	0x1a003ae4
1a001b2c:	e000e100 	.word	0xe000e100
1a001b30:	e000ecfc 	.word	0xe000ecfc

1a001b34 <uartCallbackSet>:
   switch(event){
1a001b34:	b111      	cbz	r1, 1a001b3c <uartCallbackSet+0x8>
1a001b36:	2901      	cmp	r1, #1
1a001b38:	d023      	beq.n	1a001b82 <uartCallbackSet+0x4e>
1a001b3a:	4770      	bx	lr
         if( callbackFunc != 0 ) {
1a001b3c:	b182      	cbz	r2, 1a001b60 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a001b3e:	2801      	cmp	r0, #1
1a001b40:	d90f      	bls.n	1a001b62 <uartCallbackSet+0x2e>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a001b42:	1ec1      	subs	r1, r0, #3
1a001b44:	b2c9      	uxtb	r1, r1
1a001b46:	2901      	cmp	r1, #1
1a001b48:	d910      	bls.n	1a001b6c <uartCallbackSet+0x38>
            if( uart == UART_232 ){
1a001b4a:	2805      	cmp	r0, #5
1a001b4c:	d013      	beq.n	1a001b76 <uartCallbackSet+0x42>
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a001b4e:	2305      	movs	r3, #5
   Chip_UART_IntEnable(lpcUarts[uart].uartAddr, intMask);
1a001b50:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001b54:	4a19      	ldr	r2, [pc, #100]	; (1a001bbc <uartCallbackSet+0x88>)
1a001b56:	f852 2020 	ldr.w	r2, [r2, r0, lsl #2]
	pUART->IER |= intMask;
1a001b5a:	6851      	ldr	r1, [r2, #4]
1a001b5c:	430b      	orrs	r3, r1
1a001b5e:	6053      	str	r3, [r2, #4]
}
1a001b60:	4770      	bx	lr
               rxIsrCallbackUART0 = callbackFunc;
1a001b62:	4917      	ldr	r1, [pc, #92]	; (1a001bc0 <uartCallbackSet+0x8c>)
1a001b64:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART0Params = callbackParam;
1a001b66:	4917      	ldr	r1, [pc, #92]	; (1a001bc4 <uartCallbackSet+0x90>)
1a001b68:	600b      	str	r3, [r1, #0]
1a001b6a:	e7ea      	b.n	1a001b42 <uartCallbackSet+0xe>
               rxIsrCallbackUART2 = callbackFunc;
1a001b6c:	4916      	ldr	r1, [pc, #88]	; (1a001bc8 <uartCallbackSet+0x94>)
1a001b6e:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART2Params = callbackParam;
1a001b70:	4916      	ldr	r1, [pc, #88]	; (1a001bcc <uartCallbackSet+0x98>)
1a001b72:	600b      	str	r3, [r1, #0]
1a001b74:	e7e9      	b.n	1a001b4a <uartCallbackSet+0x16>
               rxIsrCallbackUART3 = callbackFunc;
1a001b76:	4916      	ldr	r1, [pc, #88]	; (1a001bd0 <uartCallbackSet+0x9c>)
1a001b78:	600a      	str	r2, [r1, #0]
               rxIsrCallbackUART3Params = callbackParam;
1a001b7a:	4a16      	ldr	r2, [pc, #88]	; (1a001bd4 <uartCallbackSet+0xa0>)
1a001b7c:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_RBRINT | UART_IER_RLSINT;
1a001b7e:	2305      	movs	r3, #5
1a001b80:	e7e6      	b.n	1a001b50 <uartCallbackSet+0x1c>
         if( callbackFunc != 0 ) {
1a001b82:	2a00      	cmp	r2, #0
1a001b84:	d0ec      	beq.n	1a001b60 <uartCallbackSet+0x2c>
            if( (uart == UART_GPIO) || (uart == UART_485) ){
1a001b86:	2801      	cmp	r0, #1
1a001b88:	d907      	bls.n	1a001b9a <uartCallbackSet+0x66>
            if( (uart == UART_USB) || (uart == UART_ENET) ){
1a001b8a:	1ec1      	subs	r1, r0, #3
1a001b8c:	b2c9      	uxtb	r1, r1
1a001b8e:	2901      	cmp	r1, #1
1a001b90:	d908      	bls.n	1a001ba4 <uartCallbackSet+0x70>
            if( uart == UART_232 ){
1a001b92:	2805      	cmp	r0, #5
1a001b94:	d00b      	beq.n	1a001bae <uartCallbackSet+0x7a>
         intMask = UART_IER_THREINT;
1a001b96:	2302      	movs	r3, #2
1a001b98:	e7da      	b.n	1a001b50 <uartCallbackSet+0x1c>
               txIsrCallbackUART0 = callbackFunc;
1a001b9a:	490f      	ldr	r1, [pc, #60]	; (1a001bd8 <uartCallbackSet+0xa4>)
1a001b9c:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART0Params = callbackParam;
1a001b9e:	490f      	ldr	r1, [pc, #60]	; (1a001bdc <uartCallbackSet+0xa8>)
1a001ba0:	600b      	str	r3, [r1, #0]
1a001ba2:	e7f2      	b.n	1a001b8a <uartCallbackSet+0x56>
               txIsrCallbackUART2 = callbackFunc;
1a001ba4:	490e      	ldr	r1, [pc, #56]	; (1a001be0 <uartCallbackSet+0xac>)
1a001ba6:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART2Params = callbackParam;
1a001ba8:	490e      	ldr	r1, [pc, #56]	; (1a001be4 <uartCallbackSet+0xb0>)
1a001baa:	600b      	str	r3, [r1, #0]
1a001bac:	e7f1      	b.n	1a001b92 <uartCallbackSet+0x5e>
               txIsrCallbackUART3 = callbackFunc;
1a001bae:	490e      	ldr	r1, [pc, #56]	; (1a001be8 <uartCallbackSet+0xb4>)
1a001bb0:	600a      	str	r2, [r1, #0]
               txIsrCallbackUART3Params = callbackParam;
1a001bb2:	4a0e      	ldr	r2, [pc, #56]	; (1a001bec <uartCallbackSet+0xb8>)
1a001bb4:	6013      	str	r3, [r2, #0]
         intMask = UART_IER_THREINT;
1a001bb6:	2302      	movs	r3, #2
1a001bb8:	e7ca      	b.n	1a001b50 <uartCallbackSet+0x1c>
1a001bba:	bf00      	nop
1a001bbc:	1a003ae4 	.word	0x1a003ae4
1a001bc0:	10000114 	.word	0x10000114
1a001bc4:	10000118 	.word	0x10000118
1a001bc8:	1000011c 	.word	0x1000011c
1a001bcc:	10000120 	.word	0x10000120
1a001bd0:	10000124 	.word	0x10000124
1a001bd4:	10000128 	.word	0x10000128
1a001bd8:	1000012c 	.word	0x1000012c
1a001bdc:	10000130 	.word	0x10000130
1a001be0:	10000134 	.word	0x10000134
1a001be4:	10000138 	.word	0x10000138
1a001be8:	1000013c 	.word	0x1000013c
1a001bec:	10000140 	.word	0x10000140

1a001bf0 <uartRxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_RDR;
1a001bf0:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001bf4:	4b03      	ldr	r3, [pc, #12]	; (1a001c04 <uartRxReady+0x14>)
1a001bf6:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return pUART->LSR;
1a001bfa:	6958      	ldr	r0, [r3, #20]
}
1a001bfc:	f000 0001 	and.w	r0, r0, #1
1a001c00:	4770      	bx	lr
1a001c02:	bf00      	nop
1a001c04:	1a003ae4 	.word	0x1a003ae4

1a001c08 <uartTxReady>:
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a001c08:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001c0c:	4b03      	ldr	r3, [pc, #12]	; (1a001c1c <uartTxReady+0x14>)
1a001c0e:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
1a001c12:	6958      	ldr	r0, [r3, #20]
}
1a001c14:	f000 0020 	and.w	r0, r0, #32
1a001c18:	4770      	bx	lr
1a001c1a:	bf00      	nop
1a001c1c:	1a003ae4 	.word	0x1a003ae4

1a001c20 <uartRxRead>:
   return Chip_UART_ReadByte( lpcUarts[uart].uartAddr );
1a001c20:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001c24:	4b02      	ldr	r3, [pc, #8]	; (1a001c30 <uartRxRead+0x10>)
1a001c26:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001c2a:	6818      	ldr	r0, [r3, #0]
}
1a001c2c:	b2c0      	uxtb	r0, r0
1a001c2e:	4770      	bx	lr
1a001c30:	1a003ae4 	.word	0x1a003ae4

1a001c34 <uartTxWrite>:
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a001c34:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001c38:	4b02      	ldr	r3, [pc, #8]	; (1a001c44 <uartTxWrite+0x10>)
1a001c3a:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	pUART->THR = (uint32_t) data;
1a001c3e:	6019      	str	r1, [r3, #0]
}
1a001c40:	4770      	bx	lr
1a001c42:	bf00      	nop
1a001c44:	1a003ae4 	.word	0x1a003ae4

1a001c48 <uartInit>:
{
1a001c48:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001c4c:	4604      	mov	r4, r0
1a001c4e:	4689      	mov	r9, r1
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001c50:	4d19      	ldr	r5, [pc, #100]	; (1a001cb8 <uartInit+0x70>)
1a001c52:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a001c56:	eb05 0683 	add.w	r6, r5, r3, lsl #2
1a001c5a:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
1a001c5e:	4638      	mov	r0, r7
1a001c60:	f7ff fb44 	bl	1a0012ec <Chip_UART_Init>
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a001c64:	4649      	mov	r1, r9
1a001c66:	4638      	mov	r0, r7
1a001c68:	f7ff fb6a 	bl	1a001340 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001c6c:	2307      	movs	r3, #7
1a001c6e:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001c70:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a001c72:	2301      	movs	r3, #1
1a001c74:	65fb      	str	r3, [r7, #92]	; 0x5c
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a001c76:	7930      	ldrb	r0, [r6, #4]
                    lpcUarts[uart].txPin.lpcScuPin,
1a001c78:	7973      	ldrb	r3, [r6, #5]
                    lpcUarts[uart].txPin.lpcScuFunc );
1a001c7a:	79b2      	ldrb	r2, [r6, #6]
1a001c7c:	f042 0218 	orr.w	r2, r2, #24
1a001c80:	490e      	ldr	r1, [pc, #56]	; (1a001cbc <uartInit+0x74>)
1a001c82:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001c86:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001c8a:	79f0      	ldrb	r0, [r6, #7]
                    lpcUarts[uart].rxPin.lpcScuPin,
1a001c8c:	7a33      	ldrb	r3, [r6, #8]
                    lpcUarts[uart].rxPin.lpcScuFunc );
1a001c8e:	7a72      	ldrb	r2, [r6, #9]
1a001c90:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001c94:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001c98:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
   if( uart == UART_485 ) {
1a001c9c:	2c01      	cmp	r4, #1
1a001c9e:	d001      	beq.n	1a001ca4 <uartInit+0x5c>
}
1a001ca0:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a001ca4:	4a06      	ldr	r2, [pc, #24]	; (1a001cc0 <uartInit+0x78>)
1a001ca6:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001ca8:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001cac:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001cae:	221a      	movs	r2, #26
1a001cb0:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a001cb4:	e7f4      	b.n	1a001ca0 <uartInit+0x58>
1a001cb6:	bf00      	nop
1a001cb8:	1a003ae4 	.word	0x1a003ae4
1a001cbc:	40086000 	.word	0x40086000
1a001cc0:	40081000 	.word	0x40081000

1a001cc4 <uartReadByte>:
{
1a001cc4:	b538      	push	{r3, r4, r5, lr}
1a001cc6:	4605      	mov	r5, r0
1a001cc8:	460c      	mov	r4, r1
   if ( uartRxReady(uart) ) {
1a001cca:	f7ff ff91 	bl	1a001bf0 <uartRxReady>
1a001cce:	b900      	cbnz	r0, 1a001cd2 <uartReadByte+0xe>
}
1a001cd0:	bd38      	pop	{r3, r4, r5, pc}
      *receivedByte = uartRxRead(uart);
1a001cd2:	4628      	mov	r0, r5
1a001cd4:	f7ff ffa4 	bl	1a001c20 <uartRxRead>
1a001cd8:	7020      	strb	r0, [r4, #0]
   bool_t retVal = TRUE;
1a001cda:	2001      	movs	r0, #1
1a001cdc:	e7f8      	b.n	1a001cd0 <uartReadByte+0xc>

1a001cde <uartWriteByte>:
{
1a001cde:	b538      	push	{r3, r4, r5, lr}
1a001ce0:	4604      	mov	r4, r0
1a001ce2:	460d      	mov	r5, r1
   while( uartTxReady( uart ) == FALSE );
1a001ce4:	4620      	mov	r0, r4
1a001ce6:	f7ff ff8f 	bl	1a001c08 <uartTxReady>
1a001cea:	2800      	cmp	r0, #0
1a001cec:	d0fa      	beq.n	1a001ce4 <uartWriteByte+0x6>
   uartTxWrite( uart, value );
1a001cee:	4629      	mov	r1, r5
1a001cf0:	4620      	mov	r0, r4
1a001cf2:	f7ff ff9f 	bl	1a001c34 <uartTxWrite>
}
1a001cf6:	bd38      	pop	{r3, r4, r5, pc}

1a001cf8 <uartWriteByteArray>:
{
1a001cf8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a001cfa:	4607      	mov	r7, r0
1a001cfc:	460e      	mov	r6, r1
1a001cfe:	4615      	mov	r5, r2
   for( i=0; i<byteArrayLen; i++ ) {
1a001d00:	2400      	movs	r4, #0
1a001d02:	e004      	b.n	1a001d0e <uartWriteByteArray+0x16>
      uartWriteByte( uart, byteArray[i] );
1a001d04:	5d31      	ldrb	r1, [r6, r4]
1a001d06:	4638      	mov	r0, r7
1a001d08:	f7ff ffe9 	bl	1a001cde <uartWriteByte>
   for( i=0; i<byteArrayLen; i++ ) {
1a001d0c:	3401      	adds	r4, #1
1a001d0e:	42ac      	cmp	r4, r5
1a001d10:	d3f8      	bcc.n	1a001d04 <uartWriteByteArray+0xc>
}
1a001d12:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

1a001d14 <UART2_IRQHandler>:

// UART2 (USB-UART) or UART_ENET
// 0x2a 0x000000A8 - Handler for ISR UART2 (IRQ 26)
void UART2_IRQHandler(void)
{
1a001d14:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_USB );
1a001d16:	2003      	movs	r0, #3
1a001d18:	f7ff fe60 	bl	1a0019dc <uartProcessIRQ>
}
1a001d1c:	bd08      	pop	{r3, pc}

1a001d1e <UART3_IRQHandler>:

// UART3 (RS232)
// 0x2b 0x000000AC - Handler for ISR UART3 (IRQ 27)
void UART3_IRQHandler(void)
{
1a001d1e:	b508      	push	{r3, lr}
   uartProcessIRQ( UART_232 );
1a001d20:	2005      	movs	r0, #5
1a001d22:	f7ff fe5b 	bl	1a0019dc <uartProcessIRQ>
}
1a001d26:	bd08      	pop	{r3, pc}

1a001d28 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a001d28:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a001d2a:	4b04      	ldr	r3, [pc, #16]	; (1a001d3c <USB0_IRQHandler+0x14>)
1a001d2c:	681b      	ldr	r3, [r3, #0]
1a001d2e:	681b      	ldr	r3, [r3, #0]
1a001d30:	68db      	ldr	r3, [r3, #12]
1a001d32:	4a03      	ldr	r2, [pc, #12]	; (1a001d40 <USB0_IRQHandler+0x18>)
1a001d34:	6810      	ldr	r0, [r2, #0]
1a001d36:	4798      	blx	r3
}
1a001d38:	bd08      	pop	{r3, pc}
1a001d3a:	bf00      	nop
1a001d3c:	10000148 	.word	0x10000148
1a001d40:	10000144 	.word	0x10000144

1a001d44 <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a001d44:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a001d46:	f7fe fe6d 	bl	1a000a24 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a001d4a:	4b1a      	ldr	r3, [pc, #104]	; (1a001db4 <boardInit+0x70>)
1a001d4c:	6818      	ldr	r0, [r3, #0]
1a001d4e:	f7ff fba1 	bl	1a001494 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a001d52:	2001      	movs	r0, #1
1a001d54:	2100      	movs	r1, #0
1a001d56:	f7ff fce5 	bl	1a001724 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a001d5a:	2105      	movs	r1, #5
1a001d5c:	2000      	movs	r0, #0
1a001d5e:	f7ff fbc3 	bl	1a0014e8 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a001d62:	2100      	movs	r1, #0
1a001d64:	2024      	movs	r0, #36	; 0x24
1a001d66:	f7ff fbbf 	bl	1a0014e8 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001d6a:	2100      	movs	r1, #0
1a001d6c:	2025      	movs	r0, #37	; 0x25
1a001d6e:	f7ff fbbb 	bl	1a0014e8 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a001d72:	2100      	movs	r1, #0
1a001d74:	2026      	movs	r0, #38	; 0x26
1a001d76:	f7ff fbb7 	bl	1a0014e8 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001d7a:	2100      	movs	r1, #0
1a001d7c:	2027      	movs	r0, #39	; 0x27
1a001d7e:	f7ff fbb3 	bl	1a0014e8 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a001d82:	2101      	movs	r1, #1
1a001d84:	2028      	movs	r0, #40	; 0x28
1a001d86:	f7ff fbaf 	bl	1a0014e8 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001d8a:	2101      	movs	r1, #1
1a001d8c:	2029      	movs	r0, #41	; 0x29
1a001d8e:	f7ff fbab 	bl	1a0014e8 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a001d92:	2101      	movs	r1, #1
1a001d94:	202a      	movs	r0, #42	; 0x2a
1a001d96:	f7ff fba7 	bl	1a0014e8 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001d9a:	2101      	movs	r1, #1
1a001d9c:	202b      	movs	r0, #43	; 0x2b
1a001d9e:	f7ff fba3 	bl	1a0014e8 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a001da2:	2101      	movs	r1, #1
1a001da4:	202c      	movs	r0, #44	; 0x2c
1a001da6:	f7ff fb9f 	bl	1a0014e8 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001daa:	2101      	movs	r1, #1
1a001dac:	202d      	movs	r0, #45	; 0x2d
1a001dae:	f7ff fb9b 	bl	1a0014e8 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a001db2:	bd08      	pop	{r3, pc}
1a001db4:	100000f8 	.word	0x100000f8

1a001db8 <delay>:
/* ---- Blocking Delay ---- */

// delay( 1, DELAY_US );

void delay( tick_t duration_ms )
{
1a001db8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001dbc:	4680      	mov	r8, r0
1a001dbe:	460f      	mov	r7, r1
   tick_t startTime = tickRead();
1a001dc0:	f7ff fc9e 	bl	1a001700 <tickRead>
1a001dc4:	4605      	mov	r5, r0
1a001dc6:	460e      	mov	r6, r1
   while ( (tick_t)(tickRead() - startTime) < duration_ms/tickRateMS );
1a001dc8:	f7ff fc9a 	bl	1a001700 <tickRead>
1a001dcc:	1b44      	subs	r4, r0, r5
1a001dce:	eb61 0906 	sbc.w	r9, r1, r6
1a001dd2:	4b06      	ldr	r3, [pc, #24]	; (1a001dec <delay+0x34>)
1a001dd4:	e9d3 2300 	ldrd	r2, r3, [r3]
1a001dd8:	4640      	mov	r0, r8
1a001dda:	4639      	mov	r1, r7
1a001ddc:	f000 fa84 	bl	1a0022e8 <__aeabi_uldivmod>
1a001de0:	4284      	cmp	r4, r0
1a001de2:	eb79 0101 	sbcs.w	r1, r9, r1
1a001de6:	d3ef      	bcc.n	1a001dc8 <delay+0x10>
}
1a001de8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a001dec:	10000040 	.word	0x10000040

1a001df0 <uartfd_write>:
   }
   return count;
}

static ssize_t uartfd_write(void *_cookie, const char *_buf, size_t _n)
{
1a001df0:	b510      	push	{r4, lr}
1a001df2:	4614      	mov	r4, r2
   uartWriteByteArray((uartMap_t) _cookie, (uint8_t*) _buf, (uint32_t) _n);
1a001df4:	b2c0      	uxtb	r0, r0
1a001df6:	f7ff ff7f 	bl	1a001cf8 <uartWriteByteArray>
   return _n;
}
1a001dfa:	4620      	mov	r0, r4
1a001dfc:	bd10      	pop	{r4, pc}

1a001dfe <uartfd_read>:
{
1a001dfe:	b570      	push	{r4, r5, r6, lr}
1a001e00:	b082      	sub	sp, #8
1a001e02:	4606      	mov	r6, r0
1a001e04:	460c      	mov	r4, r1
1a001e06:	4615      	mov	r5, r2
   while (count < _n) {
1a001e08:	b16d      	cbz	r5, 1a001e26 <uartfd_read+0x28>
      if (uartReadByte((uartMap_t) _cookie, &c))
1a001e0a:	f10d 0107 	add.w	r1, sp, #7
1a001e0e:	b2f0      	uxtb	r0, r6
1a001e10:	f7ff ff58 	bl	1a001cc4 <uartReadByte>
1a001e14:	2800      	cmp	r0, #0
1a001e16:	d0f7      	beq.n	1a001e08 <uartfd_read+0xa>
         *_buf++ = c;
1a001e18:	4621      	mov	r1, r4
1a001e1a:	f89d 3007 	ldrb.w	r3, [sp, #7]
1a001e1e:	f801 3b01 	strb.w	r3, [r1], #1
1a001e22:	460c      	mov	r4, r1
1a001e24:	e7f0      	b.n	1a001e08 <uartfd_read+0xa>
}
1a001e26:	2000      	movs	r0, #0
1a001e28:	b002      	add	sp, #8
1a001e2a:	bd70      	pop	{r4, r5, r6, pc}

1a001e2c <stdioPrintf>:
{
   return TRUE;
}

int stdioPrintf(uartMap_t uartPrintf, const char *format, ...)
{
1a001e2c:	b40e      	push	{r1, r2, r3}
1a001e2e:	b530      	push	{r4, r5, lr}
1a001e30:	b084      	sub	sp, #16
1a001e32:	4605      	mov	r5, r0
1a001e34:	ab07      	add	r3, sp, #28
1a001e36:	f853 4b04 	ldr.w	r4, [r3], #4
   va_list args;
   va_start(args, format);
1a001e3a:	9303      	str	r3, [sp, #12]
   FILE *f = fopencookie((void*) uartPrintf, "w+", uartfd_vtable);
1a001e3c:	4b0d      	ldr	r3, [pc, #52]	; (1a001e74 <stdioPrintf+0x48>)
1a001e3e:	f103 0208 	add.w	r2, r3, #8
1a001e42:	e892 0003 	ldmia.w	r2, {r0, r1}
1a001e46:	e88d 0003 	stmia.w	sp, {r0, r1}
1a001e4a:	cb0c      	ldmia	r3, {r2, r3}
1a001e4c:	490a      	ldr	r1, [pc, #40]	; (1a001e78 <stdioPrintf+0x4c>)
1a001e4e:	4628      	mov	r0, r5
1a001e50:	f000 fe96 	bl	1a002b80 <fopencookie>
1a001e54:	4605      	mov	r5, r0
   int ret = vfprintf(f, format, args);
1a001e56:	9a03      	ldr	r2, [sp, #12]
1a001e58:	4621      	mov	r1, r4
1a001e5a:	f001 f8fd 	bl	1a003058 <vfiprintf>
1a001e5e:	4604      	mov	r4, r0
   fclose(f);
1a001e60:	4628      	mov	r0, r5
1a001e62:	f000 fc05 	bl	1a002670 <fclose>
   va_end(args);
   return ret;
}
1a001e66:	4620      	mov	r0, r4
1a001e68:	b004      	add	sp, #16
1a001e6a:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a001e6e:	b003      	add	sp, #12
1a001e70:	4770      	bx	lr
1a001e72:	bf00      	nop
1a001e74:	1a003b30 	.word	0x1a003b30
1a001e78:	1a003b2c 	.word	0x1a003b2c

1a001e7c <StabilizePwmValues>:
 * Puede darse el caso que los valores superen los valores minimos o maximos.
 */
static void   StabilizePwmValues   (LedRgbMap_t rgbLed)
{
   //Estabilizar valores para el rojo
   if       (RgbLeds[rgbLed].dutyCycleRed < MIN_DUTY_CYCLE) {
1a001e7c:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a001e80:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a001e84:	4b29      	ldr	r3, [pc, #164]	; (1a001f2c <StabilizePwmValues+0xb0>)
1a001e86:	4413      	add	r3, r2
1a001e88:	f993 3003 	ldrsb.w	r3, [r3, #3]
1a001e8c:	2b00      	cmp	r3, #0
1a001e8e:	db0a      	blt.n	1a001ea6 <StabilizePwmValues+0x2a>
      RgbLeds[rgbLed].dutyCycleRed   = MIN_DUTY_CYCLE;
   } else if  (RgbLeds[rgbLed].dutyCycleRed > MAX_DUTY_CYCLE) {
1a001e90:	2b19      	cmp	r3, #25
1a001e92:	dd10      	ble.n	1a001eb6 <StabilizePwmValues+0x3a>
      RgbLeds[rgbLed].dutyCycleRed   = MAX_DUTY_CYCLE;
1a001e94:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a001e98:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a001e9c:	4b23      	ldr	r3, [pc, #140]	; (1a001f2c <StabilizePwmValues+0xb0>)
1a001e9e:	4413      	add	r3, r2
1a001ea0:	2219      	movs	r2, #25
1a001ea2:	70da      	strb	r2, [r3, #3]
1a001ea4:	e007      	b.n	1a001eb6 <StabilizePwmValues+0x3a>
      RgbLeds[rgbLed].dutyCycleRed   = MIN_DUTY_CYCLE;
1a001ea6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a001eaa:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a001eae:	4b1f      	ldr	r3, [pc, #124]	; (1a001f2c <StabilizePwmValues+0xb0>)
1a001eb0:	4413      	add	r3, r2
1a001eb2:	2200      	movs	r2, #0
1a001eb4:	70da      	strb	r2, [r3, #3]
   }
   //Estabilizar valores para el verde
   if       (RgbLeds[rgbLed].dutyCycleGreen < MIN_DUTY_CYCLE) {
1a001eb6:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a001eba:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a001ebe:	4b1b      	ldr	r3, [pc, #108]	; (1a001f2c <StabilizePwmValues+0xb0>)
1a001ec0:	4413      	add	r3, r2
1a001ec2:	f993 3004 	ldrsb.w	r3, [r3, #4]
1a001ec6:	2b00      	cmp	r3, #0
1a001ec8:	db0a      	blt.n	1a001ee0 <StabilizePwmValues+0x64>
      RgbLeds[rgbLed].dutyCycleGreen = MIN_DUTY_CYCLE;
   } else if  (RgbLeds[rgbLed].dutyCycleGreen > MAX_DUTY_CYCLE) {
1a001eca:	2b19      	cmp	r3, #25
1a001ecc:	dd10      	ble.n	1a001ef0 <StabilizePwmValues+0x74>
      RgbLeds[rgbLed].dutyCycleGreen = MAX_DUTY_CYCLE;
1a001ece:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a001ed2:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a001ed6:	4b15      	ldr	r3, [pc, #84]	; (1a001f2c <StabilizePwmValues+0xb0>)
1a001ed8:	4413      	add	r3, r2
1a001eda:	2219      	movs	r2, #25
1a001edc:	711a      	strb	r2, [r3, #4]
1a001ede:	e007      	b.n	1a001ef0 <StabilizePwmValues+0x74>
      RgbLeds[rgbLed].dutyCycleGreen = MIN_DUTY_CYCLE;
1a001ee0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a001ee4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a001ee8:	4b10      	ldr	r3, [pc, #64]	; (1a001f2c <StabilizePwmValues+0xb0>)
1a001eea:	4413      	add	r3, r2
1a001eec:	2200      	movs	r2, #0
1a001eee:	711a      	strb	r2, [r3, #4]
   }
   //Estabilizar valores para el azul
   if       (RgbLeds[rgbLed].dutyCycleBlue < MIN_DUTY_CYCLE) {
1a001ef0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a001ef4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a001ef8:	4b0c      	ldr	r3, [pc, #48]	; (1a001f2c <StabilizePwmValues+0xb0>)
1a001efa:	4413      	add	r3, r2
1a001efc:	f993 3005 	ldrsb.w	r3, [r3, #5]
1a001f00:	2b00      	cmp	r3, #0
1a001f02:	db0a      	blt.n	1a001f1a <StabilizePwmValues+0x9e>
      RgbLeds[rgbLed].dutyCycleBlue  = MIN_DUTY_CYCLE;
   } else if  (RgbLeds[rgbLed].dutyCycleBlue > MAX_DUTY_CYCLE) {
1a001f04:	2b19      	cmp	r3, #25
1a001f06:	dd07      	ble.n	1a001f18 <StabilizePwmValues+0x9c>
      RgbLeds[rgbLed].dutyCycleBlue  = MAX_DUTY_CYCLE;
1a001f08:	eb00 0380 	add.w	r3, r0, r0, lsl #2
1a001f0c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
1a001f10:	4b06      	ldr	r3, [pc, #24]	; (1a001f2c <StabilizePwmValues+0xb0>)
1a001f12:	4403      	add	r3, r0
1a001f14:	2219      	movs	r2, #25
1a001f16:	715a      	strb	r2, [r3, #5]
   }
}
1a001f18:	4770      	bx	lr
      RgbLeds[rgbLed].dutyCycleBlue  = MIN_DUTY_CYCLE;
1a001f1a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a001f1e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a001f22:	4b02      	ldr	r3, [pc, #8]	; (1a001f2c <StabilizePwmValues+0xb0>)
1a001f24:	4413      	add	r3, r2
1a001f26:	2200      	movs	r2, #0
1a001f28:	715a      	strb	r2, [r3, #5]
1a001f2a:	4770      	bx	lr
1a001f2c:	1000014c 	.word	0x1000014c

1a001f30 <InitRgbFirstTime>:

/**
 * Inicializa el timer pwm y el arreglo con los datos de cada LED RGB.
 */
static void	  InitRgbFirstTime     ()
{
1a001f30:	b510      	push	{r4, lr}
   static bool_t rgbInitialized;
   uint8_t auxVariable;
   if (!rgbInitialized) {
1a001f32:	4b12      	ldr	r3, [pc, #72]	; (1a001f7c <InitRgbFirstTime+0x4c>)
1a001f34:	781c      	ldrb	r4, [r3, #0]
1a001f36:	b104      	cbz	r4, 1a001f3a <InitRgbFirstTime+0xa>
         RgbLeds[auxVariable].dutyCycleBlue  = 0;
         RgbLeds[auxVariable].bright         = 100;
      }
      rgbInitialized = TRUE;
   }
}
1a001f38:	bd10      	pop	{r4, pc}
      Timer_Init(TIMER3, Timer_microsecondsToTicks(TICS_1_MS), UpdateLedsStates);
1a001f3a:	f44f 707a 	mov.w	r0, #1000	; 0x3e8
1a001f3e:	f7ff fcc5 	bl	1a0018cc <Timer_microsecondsToTicks>
1a001f42:	4601      	mov	r1, r0
1a001f44:	4a0e      	ldr	r2, [pc, #56]	; (1a001f80 <InitRgbFirstTime+0x50>)
1a001f46:	2003      	movs	r0, #3
1a001f48:	f7ff fc3e 	bl	1a0017c8 <Timer_Init>
      for (auxVariable = 0; auxVariable < MAX_AMOUNT_OF_RGB_LEDS; auxVariable++) {
1a001f4c:	e010      	b.n	1a001f70 <InitRgbFirstTime+0x40>
         RgbLeds[auxVariable].pinRed         = 0;
1a001f4e:	480d      	ldr	r0, [pc, #52]	; (1a001f84 <InitRgbFirstTime+0x54>)
1a001f50:	eb04 0184 	add.w	r1, r4, r4, lsl #2
1a001f54:	eb04 0141 	add.w	r1, r4, r1, lsl #1
1a001f58:	1843      	adds	r3, r0, r1
1a001f5a:	2200      	movs	r2, #0
1a001f5c:	5442      	strb	r2, [r0, r1]
         RgbLeds[auxVariable].pinGreen       = 0;
1a001f5e:	705a      	strb	r2, [r3, #1]
         RgbLeds[auxVariable].pinBlue        = 0;
1a001f60:	709a      	strb	r2, [r3, #2]
         RgbLeds[auxVariable].dutyCycleRed   = 0;
1a001f62:	70da      	strb	r2, [r3, #3]
         RgbLeds[auxVariable].dutyCycleGreen = 0;
1a001f64:	711a      	strb	r2, [r3, #4]
         RgbLeds[auxVariable].dutyCycleBlue  = 0;
1a001f66:	715a      	strb	r2, [r3, #5]
         RgbLeds[auxVariable].bright         = 100;
1a001f68:	2264      	movs	r2, #100	; 0x64
1a001f6a:	729a      	strb	r2, [r3, #10]
      for (auxVariable = 0; auxVariable < MAX_AMOUNT_OF_RGB_LEDS; auxVariable++) {
1a001f6c:	3401      	adds	r4, #1
1a001f6e:	b2e4      	uxtb	r4, r4
1a001f70:	2c08      	cmp	r4, #8
1a001f72:	d9ec      	bls.n	1a001f4e <InitRgbFirstTime+0x1e>
      rgbInitialized = TRUE;
1a001f74:	4b01      	ldr	r3, [pc, #4]	; (1a001f7c <InitRgbFirstTime+0x4c>)
1a001f76:	2201      	movs	r2, #1
1a001f78:	701a      	strb	r2, [r3, #0]
}
1a001f7a:	e7dd      	b.n	1a001f38 <InitRgbFirstTime+0x8>
1a001f7c:	100001af 	.word	0x100001af
1a001f80:	1a001f89 	.word	0x1a001f89
1a001f84:	1000014c 	.word	0x1000014c

1a001f88 <UpdateLedsStates>:
{
1a001f88:	b538      	push	{r3, r4, r5, lr}
   for (index = 0; index < MAX_AMOUNT_OF_RGB_LEDS; index++) {
1a001f8a:	2400      	movs	r4, #0
1a001f8c:	e012      	b.n	1a001fb4 <UpdateLedsStates+0x2c>
         if (ticksCounter == RgbLeds[index].dutyCycleRed)  gpioWrite (RgbLeds[index].pinRed,   OFF);
1a001f8e:	2100      	movs	r1, #0
1a001f90:	b240      	sxtb	r0, r0
1a001f92:	f7ff fb7f 	bl	1a001694 <gpioWrite>
1a001f96:	e021      	b.n	1a001fdc <UpdateLedsStates+0x54>
         if (ticksCounter == RgbLeds[index].dutyCycleGreen)gpioWrite (RgbLeds[index].pinGreen, OFF);
1a001f98:	eb05 0285 	add.w	r2, r5, r5, lsl #2
1a001f9c:	eb05 0242 	add.w	r2, r5, r2, lsl #1
1a001fa0:	4b47      	ldr	r3, [pc, #284]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a001fa2:	4413      	add	r3, r2
1a001fa4:	2100      	movs	r1, #0
1a001fa6:	f993 0001 	ldrsb.w	r0, [r3, #1]
1a001faa:	f7ff fb73 	bl	1a001694 <gpioWrite>
1a001fae:	e021      	b.n	1a001ff4 <UpdateLedsStates+0x6c>
   for (index = 0; index < MAX_AMOUNT_OF_RGB_LEDS; index++) {
1a001fb0:	3401      	adds	r4, #1
1a001fb2:	b2e4      	uxtb	r4, r4
1a001fb4:	2c08      	cmp	r4, #8
1a001fb6:	d835      	bhi.n	1a002024 <UpdateLedsStates+0x9c>
      if (RgbLeds[index].pinRed != 0) {
1a001fb8:	4625      	mov	r5, r4
1a001fba:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a001fbe:	eb04 0343 	add.w	r3, r4, r3, lsl #1
1a001fc2:	4a3f      	ldr	r2, [pc, #252]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a001fc4:	5cd0      	ldrb	r0, [r2, r3]
1a001fc6:	2800      	cmp	r0, #0
1a001fc8:	d0f2      	beq.n	1a001fb0 <UpdateLedsStates+0x28>
         if (ticksCounter == RgbLeds[index].dutyCycleRed)  gpioWrite (RgbLeds[index].pinRed,   OFF);
1a001fca:	461a      	mov	r2, r3
1a001fcc:	4b3c      	ldr	r3, [pc, #240]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a001fce:	4413      	add	r3, r2
1a001fd0:	f993 2003 	ldrsb.w	r2, [r3, #3]
1a001fd4:	4b3b      	ldr	r3, [pc, #236]	; (1a0020c4 <UpdateLedsStates+0x13c>)
1a001fd6:	681b      	ldr	r3, [r3, #0]
1a001fd8:	429a      	cmp	r2, r3
1a001fda:	d0d8      	beq.n	1a001f8e <UpdateLedsStates+0x6>
         if (ticksCounter == RgbLeds[index].dutyCycleGreen)gpioWrite (RgbLeds[index].pinGreen, OFF);
1a001fdc:	eb05 0285 	add.w	r2, r5, r5, lsl #2
1a001fe0:	eb05 0242 	add.w	r2, r5, r2, lsl #1
1a001fe4:	4b36      	ldr	r3, [pc, #216]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a001fe6:	4413      	add	r3, r2
1a001fe8:	f993 2004 	ldrsb.w	r2, [r3, #4]
1a001fec:	4b35      	ldr	r3, [pc, #212]	; (1a0020c4 <UpdateLedsStates+0x13c>)
1a001fee:	681b      	ldr	r3, [r3, #0]
1a001ff0:	429a      	cmp	r2, r3
1a001ff2:	d0d1      	beq.n	1a001f98 <UpdateLedsStates+0x10>
         if (ticksCounter == RgbLeds[index].dutyCycleBlue) gpioWrite (RgbLeds[index].pinBlue,  OFF);
1a001ff4:	eb05 0285 	add.w	r2, r5, r5, lsl #2
1a001ff8:	eb05 0242 	add.w	r2, r5, r2, lsl #1
1a001ffc:	4b30      	ldr	r3, [pc, #192]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a001ffe:	4413      	add	r3, r2
1a002000:	f993 2005 	ldrsb.w	r2, [r3, #5]
1a002004:	4b2f      	ldr	r3, [pc, #188]	; (1a0020c4 <UpdateLedsStates+0x13c>)
1a002006:	681b      	ldr	r3, [r3, #0]
1a002008:	429a      	cmp	r2, r3
1a00200a:	d1d1      	bne.n	1a001fb0 <UpdateLedsStates+0x28>
1a00200c:	eb05 0385 	add.w	r3, r5, r5, lsl #2
1a002010:	eb05 0543 	add.w	r5, r5, r3, lsl #1
1a002014:	4b2a      	ldr	r3, [pc, #168]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a002016:	442b      	add	r3, r5
1a002018:	2100      	movs	r1, #0
1a00201a:	f993 0002 	ldrsb.w	r0, [r3, #2]
1a00201e:	f7ff fb39 	bl	1a001694 <gpioWrite>
1a002022:	e7c5      	b.n	1a001fb0 <UpdateLedsStates+0x28>
   if (++ticksCounter == PWM_PERIOD) {
1a002024:	4a27      	ldr	r2, [pc, #156]	; (1a0020c4 <UpdateLedsStates+0x13c>)
1a002026:	6813      	ldr	r3, [r2, #0]
1a002028:	3301      	adds	r3, #1
1a00202a:	6013      	str	r3, [r2, #0]
1a00202c:	2b19      	cmp	r3, #25
1a00202e:	d044      	beq.n	1a0020ba <UpdateLedsStates+0x132>
}
1a002030:	bd38      	pop	{r3, r4, r5, pc}
            if (RgbLeds[index].dutyCycleRed > MIN_DUTY_CYCLE) 	gpioWrite (RgbLeds[index].pinRed,   ON);
1a002032:	2101      	movs	r1, #1
1a002034:	b240      	sxtb	r0, r0
1a002036:	f7ff fb2d 	bl	1a001694 <gpioWrite>
1a00203a:	e022      	b.n	1a002082 <UpdateLedsStates+0xfa>
            if (RgbLeds[index].dutyCycleGreen > MIN_DUTY_CYCLE) gpioWrite (RgbLeds[index].pinGreen, ON);
1a00203c:	eb05 0285 	add.w	r2, r5, r5, lsl #2
1a002040:	eb05 0242 	add.w	r2, r5, r2, lsl #1
1a002044:	4b1e      	ldr	r3, [pc, #120]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a002046:	4413      	add	r3, r2
1a002048:	2101      	movs	r1, #1
1a00204a:	f993 0001 	ldrsb.w	r0, [r3, #1]
1a00204e:	f7ff fb21 	bl	1a001694 <gpioWrite>
1a002052:	e020      	b.n	1a002096 <UpdateLedsStates+0x10e>
            ticksCounter = 0;
1a002054:	4b1b      	ldr	r3, [pc, #108]	; (1a0020c4 <UpdateLedsStates+0x13c>)
1a002056:	2200      	movs	r2, #0
1a002058:	601a      	str	r2, [r3, #0]
      for (index = 0; index < MAX_AMOUNT_OF_RGB_LEDS; index++) {
1a00205a:	3401      	adds	r4, #1
1a00205c:	b2e4      	uxtb	r4, r4
1a00205e:	2c08      	cmp	r4, #8
1a002060:	d8e6      	bhi.n	1a002030 <UpdateLedsStates+0xa8>
         if (RgbLeds[index].pinRed != 0) {
1a002062:	4625      	mov	r5, r4
1a002064:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a002068:	eb04 0343 	add.w	r3, r4, r3, lsl #1
1a00206c:	4a14      	ldr	r2, [pc, #80]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a00206e:	5cd0      	ldrb	r0, [r2, r3]
1a002070:	2800      	cmp	r0, #0
1a002072:	d0f2      	beq.n	1a00205a <UpdateLedsStates+0xd2>
            if (RgbLeds[index].dutyCycleRed > MIN_DUTY_CYCLE) 	gpioWrite (RgbLeds[index].pinRed,   ON);
1a002074:	461a      	mov	r2, r3
1a002076:	4b12      	ldr	r3, [pc, #72]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a002078:	4413      	add	r3, r2
1a00207a:	f993 3003 	ldrsb.w	r3, [r3, #3]
1a00207e:	2b00      	cmp	r3, #0
1a002080:	dcd7      	bgt.n	1a002032 <UpdateLedsStates+0xaa>
            if (RgbLeds[index].dutyCycleGreen > MIN_DUTY_CYCLE) gpioWrite (RgbLeds[index].pinGreen, ON);
1a002082:	eb05 0285 	add.w	r2, r5, r5, lsl #2
1a002086:	eb05 0242 	add.w	r2, r5, r2, lsl #1
1a00208a:	4b0d      	ldr	r3, [pc, #52]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a00208c:	4413      	add	r3, r2
1a00208e:	f993 3004 	ldrsb.w	r3, [r3, #4]
1a002092:	2b00      	cmp	r3, #0
1a002094:	dcd2      	bgt.n	1a00203c <UpdateLedsStates+0xb4>
            if (RgbLeds[index].dutyCycleBlue > MIN_DUTY_CYCLE) 	gpioWrite (RgbLeds[index].pinBlue,  ON);
1a002096:	eb05 0285 	add.w	r2, r5, r5, lsl #2
1a00209a:	eb05 0242 	add.w	r2, r5, r2, lsl #1
1a00209e:	4b08      	ldr	r3, [pc, #32]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a0020a0:	4413      	add	r3, r2
1a0020a2:	f993 3005 	ldrsb.w	r3, [r3, #5]
1a0020a6:	2b00      	cmp	r3, #0
1a0020a8:	ddd4      	ble.n	1a002054 <UpdateLedsStates+0xcc>
1a0020aa:	4b05      	ldr	r3, [pc, #20]	; (1a0020c0 <UpdateLedsStates+0x138>)
1a0020ac:	4413      	add	r3, r2
1a0020ae:	2101      	movs	r1, #1
1a0020b0:	f993 0002 	ldrsb.w	r0, [r3, #2]
1a0020b4:	f7ff faee 	bl	1a001694 <gpioWrite>
1a0020b8:	e7cc      	b.n	1a002054 <UpdateLedsStates+0xcc>
      for (index = 0; index < MAX_AMOUNT_OF_RGB_LEDS; index++) {
1a0020ba:	2400      	movs	r4, #0
1a0020bc:	e7cf      	b.n	1a00205e <UpdateLedsStates+0xd6>
1a0020be:	bf00      	nop
1a0020c0:	1000014c 	.word	0x1000014c
1a0020c4:	100001b0 	.word	0x100001b0

1a0020c8 <rgbInit>:
 * y cuando ocurra la interrupcion llame a la funcion UpdateLedsStates(), que sirve
 * para actualizar el ciclo de trabajo de cada led.
 * Devuelve TRUE.
 */
bool_t rgbInit       (LedRgbMap_t rgbLed, uint8_t pinRed, uint8_t pinGreen, uint8_t pinBlue)
{
1a0020c8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0020cc:	4604      	mov	r4, r0
1a0020ce:	460e      	mov	r6, r1
1a0020d0:	4690      	mov	r8, r2
1a0020d2:	461f      	mov	r7, r3
   InitRgbFirstTime();
1a0020d4:	f7ff ff2c 	bl	1a001f30 <InitRgbFirstTime>

   RgbLeds[rgbLed].pinRed   = pinRed;
1a0020d8:	4b0d      	ldr	r3, [pc, #52]	; (1a002110 <rgbInit+0x48>)
1a0020da:	eb04 0284 	add.w	r2, r4, r4, lsl #2
1a0020de:	eb04 0442 	add.w	r4, r4, r2, lsl #1
1a0020e2:	191d      	adds	r5, r3, r4
1a0020e4:	551e      	strb	r6, [r3, r4]
   RgbLeds[rgbLed].pinGreen = pinGreen;
1a0020e6:	f885 8001 	strb.w	r8, [r5, #1]
   RgbLeds[rgbLed].pinBlue  = pinBlue;
1a0020ea:	70af      	strb	r7, [r5, #2]

   gpioConfig(RgbLeds[rgbLed].pinRed,   GPIO_OUTPUT);
1a0020ec:	2101      	movs	r1, #1
1a0020ee:	b270      	sxtb	r0, r6
1a0020f0:	f7ff f9fa 	bl	1a0014e8 <gpioInit>
   gpioConfig(RgbLeds[rgbLed].pinGreen, GPIO_OUTPUT);
1a0020f4:	2101      	movs	r1, #1
1a0020f6:	f995 0001 	ldrsb.w	r0, [r5, #1]
1a0020fa:	f7ff f9f5 	bl	1a0014e8 <gpioInit>
   gpioConfig(RgbLeds[rgbLed].pinBlue,  GPIO_OUTPUT);
1a0020fe:	2101      	movs	r1, #1
1a002100:	f995 0002 	ldrsb.w	r0, [r5, #2]
1a002104:	f7ff f9f0 	bl	1a0014e8 <gpioInit>

   return TRUE;
}
1a002108:	2001      	movs	r0, #1
1a00210a:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a00210e:	bf00      	nop
1a002110:	1000014c 	.word	0x1000014c

1a002114 <rgbWriteColor>:
/**
 * Manda por los pines PWM uno de los posibles colores definidos en color_t
 */
void 	rgbWriteColor  (LedRgbMap_t rgbLed, Color_t color)
{
   switch (color) {
1a002114:	2907      	cmp	r1, #7
1a002116:	d86b      	bhi.n	1a0021f0 <rgbWriteColor+0xdc>
1a002118:	e8df f001 	tbb	[pc, r1]
1a00211c:	4717045f 	.word	0x4717045f
1a002120:	533b2f23 	.word	0x533b2f23
   case WHITE:
      RgbLeds[rgbLed].dutyCycleBlue  = MAX_DUTY_CYCLE;
1a002124:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a002128:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a00212c:	4b36      	ldr	r3, [pc, #216]	; (1a002208 <rgbWriteColor+0xf4>)
1a00212e:	4413      	add	r3, r2
1a002130:	2219      	movs	r2, #25
1a002132:	715a      	strb	r2, [r3, #5]
      RgbLeds[rgbLed].dutyCycleRed   = MAX_DUTY_CYCLE;
1a002134:	70da      	strb	r2, [r3, #3]
      RgbLeds[rgbLed].dutyCycleGreen = MAX_DUTY_CYCLE;
1a002136:	711a      	strb	r2, [r3, #4]
      RgbLeds[rgbLed].dutyCycleBlue  = MIN_DUTY_CYCLE;
      RgbLeds[rgbLed].dutyCycleRed   = MIN_DUTY_CYCLE;
      RgbLeds[rgbLed].dutyCycleGreen = MIN_DUTY_CYCLE;
      break;
   }
   RgbLeds[rgbLed].toggled = FALSE;
1a002138:	eb00 0380 	add.w	r3, r0, r0, lsl #2
1a00213c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
1a002140:	4b31      	ldr	r3, [pc, #196]	; (1a002208 <rgbWriteColor+0xf4>)
1a002142:	4403      	add	r3, r0
1a002144:	2200      	movs	r2, #0
1a002146:	725a      	strb	r2, [r3, #9]
}
1a002148:	4770      	bx	lr
      RgbLeds[rgbLed].dutyCycleBlue  = MAX_DUTY_CYCLE;
1a00214a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a00214e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a002152:	4b2d      	ldr	r3, [pc, #180]	; (1a002208 <rgbWriteColor+0xf4>)
1a002154:	4413      	add	r3, r2
1a002156:	2219      	movs	r2, #25
1a002158:	715a      	strb	r2, [r3, #5]
      RgbLeds[rgbLed].dutyCycleRed   = MAX_DUTY_CYCLE;
1a00215a:	70da      	strb	r2, [r3, #3]
      RgbLeds[rgbLed].dutyCycleGreen = MIN_DUTY_CYCLE;
1a00215c:	2200      	movs	r2, #0
1a00215e:	711a      	strb	r2, [r3, #4]
      break;
1a002160:	e7ea      	b.n	1a002138 <rgbWriteColor+0x24>
      RgbLeds[rgbLed].dutyCycleBlue  = MAX_DUTY_CYCLE;
1a002162:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a002166:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a00216a:	4b27      	ldr	r3, [pc, #156]	; (1a002208 <rgbWriteColor+0xf4>)
1a00216c:	4413      	add	r3, r2
1a00216e:	2219      	movs	r2, #25
1a002170:	715a      	strb	r2, [r3, #5]
      RgbLeds[rgbLed].dutyCycleRed   = MIN_DUTY_CYCLE;
1a002172:	2100      	movs	r1, #0
1a002174:	70d9      	strb	r1, [r3, #3]
      RgbLeds[rgbLed].dutyCycleGreen = MAX_DUTY_CYCLE;
1a002176:	711a      	strb	r2, [r3, #4]
      break;
1a002178:	e7de      	b.n	1a002138 <rgbWriteColor+0x24>
      RgbLeds[rgbLed].dutyCycleBlue  = MAX_DUTY_CYCLE;
1a00217a:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a00217e:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a002182:	4b21      	ldr	r3, [pc, #132]	; (1a002208 <rgbWriteColor+0xf4>)
1a002184:	4413      	add	r3, r2
1a002186:	2219      	movs	r2, #25
1a002188:	715a      	strb	r2, [r3, #5]
      RgbLeds[rgbLed].dutyCycleRed   = MIN_DUTY_CYCLE;
1a00218a:	2200      	movs	r2, #0
1a00218c:	70da      	strb	r2, [r3, #3]
      RgbLeds[rgbLed].dutyCycleGreen = MIN_DUTY_CYCLE;
1a00218e:	711a      	strb	r2, [r3, #4]
      break;
1a002190:	e7d2      	b.n	1a002138 <rgbWriteColor+0x24>
      RgbLeds[rgbLed].dutyCycleBlue  = MIN_DUTY_CYCLE;
1a002192:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a002196:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a00219a:	4b1b      	ldr	r3, [pc, #108]	; (1a002208 <rgbWriteColor+0xf4>)
1a00219c:	4413      	add	r3, r2
1a00219e:	2200      	movs	r2, #0
1a0021a0:	715a      	strb	r2, [r3, #5]
      RgbLeds[rgbLed].dutyCycleRed   = MAX_DUTY_CYCLE;
1a0021a2:	2219      	movs	r2, #25
1a0021a4:	70da      	strb	r2, [r3, #3]
      RgbLeds[rgbLed].dutyCycleGreen = MAX_DUTY_CYCLE;
1a0021a6:	711a      	strb	r2, [r3, #4]
      break;
1a0021a8:	e7c6      	b.n	1a002138 <rgbWriteColor+0x24>
      RgbLeds[rgbLed].dutyCycleBlue  = MIN_DUTY_CYCLE;
1a0021aa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a0021ae:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a0021b2:	4b15      	ldr	r3, [pc, #84]	; (1a002208 <rgbWriteColor+0xf4>)
1a0021b4:	4413      	add	r3, r2
1a0021b6:	2200      	movs	r2, #0
1a0021b8:	715a      	strb	r2, [r3, #5]
      RgbLeds[rgbLed].dutyCycleRed   = MAX_DUTY_CYCLE;
1a0021ba:	2119      	movs	r1, #25
1a0021bc:	70d9      	strb	r1, [r3, #3]
      RgbLeds[rgbLed].dutyCycleGreen = MIN_DUTY_CYCLE;
1a0021be:	711a      	strb	r2, [r3, #4]
      break;
1a0021c0:	e7ba      	b.n	1a002138 <rgbWriteColor+0x24>
      RgbLeds[rgbLed].dutyCycleBlue  = MIN_DUTY_CYCLE;
1a0021c2:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a0021c6:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a0021ca:	4b0f      	ldr	r3, [pc, #60]	; (1a002208 <rgbWriteColor+0xf4>)
1a0021cc:	4413      	add	r3, r2
1a0021ce:	2200      	movs	r2, #0
1a0021d0:	715a      	strb	r2, [r3, #5]
      RgbLeds[rgbLed].dutyCycleRed   = MIN_DUTY_CYCLE;
1a0021d2:	70da      	strb	r2, [r3, #3]
      RgbLeds[rgbLed].dutyCycleGreen = MAX_DUTY_CYCLE;
1a0021d4:	2219      	movs	r2, #25
1a0021d6:	711a      	strb	r2, [r3, #4]
      break;
1a0021d8:	e7ae      	b.n	1a002138 <rgbWriteColor+0x24>
      RgbLeds[rgbLed].dutyCycleBlue  = MIN_DUTY_CYCLE;
1a0021da:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a0021de:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a0021e2:	4b09      	ldr	r3, [pc, #36]	; (1a002208 <rgbWriteColor+0xf4>)
1a0021e4:	4413      	add	r3, r2
1a0021e6:	2200      	movs	r2, #0
1a0021e8:	715a      	strb	r2, [r3, #5]
      RgbLeds[rgbLed].dutyCycleRed   = MIN_DUTY_CYCLE;
1a0021ea:	70da      	strb	r2, [r3, #3]
      RgbLeds[rgbLed].dutyCycleGreen = MIN_DUTY_CYCLE;
1a0021ec:	711a      	strb	r2, [r3, #4]
      break;
1a0021ee:	e7a3      	b.n	1a002138 <rgbWriteColor+0x24>
      RgbLeds[rgbLed].dutyCycleBlue  = MIN_DUTY_CYCLE;
1a0021f0:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a0021f4:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a0021f8:	4b03      	ldr	r3, [pc, #12]	; (1a002208 <rgbWriteColor+0xf4>)
1a0021fa:	4413      	add	r3, r2
1a0021fc:	2200      	movs	r2, #0
1a0021fe:	715a      	strb	r2, [r3, #5]
      RgbLeds[rgbLed].dutyCycleRed   = MIN_DUTY_CYCLE;
1a002200:	70da      	strb	r2, [r3, #3]
      RgbLeds[rgbLed].dutyCycleGreen = MIN_DUTY_CYCLE;
1a002202:	711a      	strb	r2, [r3, #4]
      break;
1a002204:	e798      	b.n	1a002138 <rgbWriteColor+0x24>
1a002206:	bf00      	nop
1a002208:	1000014c 	.word	0x1000014c

1a00220c <rgbWriteRaw>:

/**
 * Manda una configuracion individual de cada canal del LED RGB seleccionado.
 */
void 	rgbWriteRaw    (LedRgbMap_t rgbLed, int8_t dutyRed, int8_t dutyGreen, int8_t dutyBlue)
{
1a00220c:	b510      	push	{r4, lr}
   RgbLeds[rgbLed].dutyCycleRed   = dutyRed;
1a00220e:	eb00 0480 	add.w	r4, r0, r0, lsl #2
1a002212:	eb00 0c44 	add.w	ip, r0, r4, lsl #1
1a002216:	4c07      	ldr	r4, [pc, #28]	; (1a002234 <rgbWriteRaw+0x28>)
1a002218:	44a4      	add	ip, r4
1a00221a:	f88c 1003 	strb.w	r1, [ip, #3]
   RgbLeds[rgbLed].dutyCycleGreen = dutyGreen;
1a00221e:	f88c 2004 	strb.w	r2, [ip, #4]
   RgbLeds[rgbLed].dutyCycleBlue  = dutyBlue;
1a002222:	f88c 3005 	strb.w	r3, [ip, #5]
   RgbLeds[rgbLed].toggled        = FALSE;
1a002226:	2300      	movs	r3, #0
1a002228:	f88c 3009 	strb.w	r3, [ip, #9]
   //Estabiliza los valores por si se pasan del rango permitido.
   StabilizePwmValues(rgbLed);
1a00222c:	f7ff fe26 	bl	1a001e7c <StabilizePwmValues>
}
1a002230:	bd10      	pop	{r4, pc}
1a002232:	bf00      	nop
1a002234:	1000014c 	.word	0x1000014c

1a002238 <rgbReadDutyRed>:
 * @param rgbLed led rgb a leer el duty cycle
 * @return valor del duty cycle
 */
uint8_t rgbReadDutyRed	(LedRgbMap_t rgbLed)
{
   return RgbLeds[rgbLed].dutyCycleRed;
1a002238:	eb00 0380 	add.w	r3, r0, r0, lsl #2
1a00223c:	eb00 0043 	add.w	r0, r0, r3, lsl #1
1a002240:	4b01      	ldr	r3, [pc, #4]	; (1a002248 <rgbReadDutyRed+0x10>)
1a002242:	4403      	add	r3, r0
}
1a002244:	78d8      	ldrb	r0, [r3, #3]
1a002246:	4770      	bx	lr
1a002248:	1000014c 	.word	0x1000014c

1a00224c <rgbReadDutyGreen>:
 * @param rgbLed led rgb a leer el duty cycle
 * @return valor del duty cycle
 */
uint8_t rgbReadDutyGreen(LedRgbMap_t rgbLed)
{
   return RgbLeds[rgbLed].dutyCycleGreen;
1a00224c:	eb00 0380 	add.w	r3, r0, r0, lsl #2
1a002250:	eb00 0043 	add.w	r0, r0, r3, lsl #1
1a002254:	4b01      	ldr	r3, [pc, #4]	; (1a00225c <rgbReadDutyGreen+0x10>)
1a002256:	4403      	add	r3, r0
}
1a002258:	7918      	ldrb	r0, [r3, #4]
1a00225a:	4770      	bx	lr
1a00225c:	1000014c 	.word	0x1000014c

1a002260 <rgbReadDutyBlue>:
 * @param rgbLed led rgb a leer el duty cycle
 * @return valor del duty cycle
 */
uint8_t rgbReadDutyBlue	(LedRgbMap_t rgbLed)
{
   return RgbLeds[rgbLed].dutyCycleBlue;
1a002260:	eb00 0380 	add.w	r3, r0, r0, lsl #2
1a002264:	eb00 0043 	add.w	r0, r0, r3, lsl #1
1a002268:	4b01      	ldr	r3, [pc, #4]	; (1a002270 <rgbReadDutyBlue+0x10>)
1a00226a:	4403      	add	r3, r0
}
1a00226c:	7958      	ldrb	r0, [r3, #5]
1a00226e:	4770      	bx	lr
1a002270:	1000014c 	.word	0x1000014c

1a002274 <rgbToggleLed>:
 * Realiza un toggle del LED con el color que tenga guardado
 * @param rgbLed led a togglear.
 */
void rgbToggleLed (LedRgbMap_t rgbLed)
{
   if (!RgbLeds[rgbLed].toggled) {
1a002274:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a002278:	eb00 0242 	add.w	r2, r0, r2, lsl #1
1a00227c:	4b19      	ldr	r3, [pc, #100]	; (1a0022e4 <rgbToggleLed+0x70>)
1a00227e:	4413      	add	r3, r2
1a002280:	7a5b      	ldrb	r3, [r3, #9]
1a002282:	b9d3      	cbnz	r3, 1a0022ba <rgbToggleLed+0x46>
      RgbLeds[rgbLed].toggleDutyCycleRed   = RgbLeds[rgbLed].dutyCycleRed;
1a002284:	4611      	mov	r1, r2
1a002286:	4a17      	ldr	r2, [pc, #92]	; (1a0022e4 <rgbToggleLed+0x70>)
1a002288:	440a      	add	r2, r1
1a00228a:	f992 1003 	ldrsb.w	r1, [r2, #3]
1a00228e:	7191      	strb	r1, [r2, #6]
      RgbLeds[rgbLed].toggleDutyCycleGreen = RgbLeds[rgbLed].dutyCycleGreen;
1a002290:	f992 1004 	ldrsb.w	r1, [r2, #4]
1a002294:	71d1      	strb	r1, [r2, #7]
      RgbLeds[rgbLed].toggleDutyCycleBlue  = RgbLeds[rgbLed].dutyCycleBlue;
1a002296:	f992 1005 	ldrsb.w	r1, [r2, #5]
1a00229a:	7211      	strb	r1, [r2, #8]
      RgbLeds[rgbLed].dutyCycleRed         = MIN_DUTY_CYCLE;
1a00229c:	2100      	movs	r1, #0
1a00229e:	70d1      	strb	r1, [r2, #3]
      RgbLeds[rgbLed].dutyCycleGreen       = MIN_DUTY_CYCLE;
1a0022a0:	7111      	strb	r1, [r2, #4]
      RgbLeds[rgbLed].dutyCycleBlue        = MIN_DUTY_CYCLE;
1a0022a2:	7151      	strb	r1, [r2, #5]
      RgbLeds[rgbLed].dutyCycleBlue        = RgbLeds[rgbLed].toggleDutyCycleBlue;
      RgbLeds[rgbLed].toggleDutyCycleRed   = MIN_DUTY_CYCLE;
      RgbLeds[rgbLed].toggleDutyCycleGreen = MIN_DUTY_CYCLE;
      RgbLeds[rgbLed].toggleDutyCycleBlue  = MIN_DUTY_CYCLE;
   }
   RgbLeds[rgbLed].toggled = !RgbLeds[rgbLed].toggled;
1a0022a4:	fab3 f383 	clz	r3, r3
1a0022a8:	095b      	lsrs	r3, r3, #5
1a0022aa:	eb00 0280 	add.w	r2, r0, r0, lsl #2
1a0022ae:	eb00 0042 	add.w	r0, r0, r2, lsl #1
1a0022b2:	4a0c      	ldr	r2, [pc, #48]	; (1a0022e4 <rgbToggleLed+0x70>)
1a0022b4:	4402      	add	r2, r0
1a0022b6:	7253      	strb	r3, [r2, #9]
}
1a0022b8:	4770      	bx	lr
      RgbLeds[rgbLed].dutyCycleRed         = RgbLeds[rgbLed].toggleDutyCycleRed;
1a0022ba:	eb00 0180 	add.w	r1, r0, r0, lsl #2
1a0022be:	eb00 0141 	add.w	r1, r0, r1, lsl #1
1a0022c2:	4a08      	ldr	r2, [pc, #32]	; (1a0022e4 <rgbToggleLed+0x70>)
1a0022c4:	440a      	add	r2, r1
1a0022c6:	f992 1006 	ldrsb.w	r1, [r2, #6]
1a0022ca:	70d1      	strb	r1, [r2, #3]
      RgbLeds[rgbLed].dutyCycleGreen       = RgbLeds[rgbLed].toggleDutyCycleGreen;
1a0022cc:	f992 1007 	ldrsb.w	r1, [r2, #7]
1a0022d0:	7111      	strb	r1, [r2, #4]
      RgbLeds[rgbLed].dutyCycleBlue        = RgbLeds[rgbLed].toggleDutyCycleBlue;
1a0022d2:	f992 1008 	ldrsb.w	r1, [r2, #8]
1a0022d6:	7151      	strb	r1, [r2, #5]
      RgbLeds[rgbLed].toggleDutyCycleRed   = MIN_DUTY_CYCLE;
1a0022d8:	2100      	movs	r1, #0
1a0022da:	7191      	strb	r1, [r2, #6]
      RgbLeds[rgbLed].toggleDutyCycleGreen = MIN_DUTY_CYCLE;
1a0022dc:	71d1      	strb	r1, [r2, #7]
      RgbLeds[rgbLed].toggleDutyCycleBlue  = MIN_DUTY_CYCLE;
1a0022de:	7211      	strb	r1, [r2, #8]
1a0022e0:	e7e0      	b.n	1a0022a4 <rgbToggleLed+0x30>
1a0022e2:	bf00      	nop
1a0022e4:	1000014c 	.word	0x1000014c

1a0022e8 <__aeabi_uldivmod>:
1a0022e8:	b953      	cbnz	r3, 1a002300 <__aeabi_uldivmod+0x18>
1a0022ea:	b94a      	cbnz	r2, 1a002300 <__aeabi_uldivmod+0x18>
1a0022ec:	2900      	cmp	r1, #0
1a0022ee:	bf08      	it	eq
1a0022f0:	2800      	cmpeq	r0, #0
1a0022f2:	bf1c      	itt	ne
1a0022f4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0022f8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0022fc:	f000 b94a 	b.w	1a002594 <__aeabi_idiv0>
1a002300:	f1ad 0c08 	sub.w	ip, sp, #8
1a002304:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a002308:	f000 f806 	bl	1a002318 <__udivmoddi4>
1a00230c:	f8dd e004 	ldr.w	lr, [sp, #4]
1a002310:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a002314:	b004      	add	sp, #16
1a002316:	4770      	bx	lr

1a002318 <__udivmoddi4>:
1a002318:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00231c:	468c      	mov	ip, r1
1a00231e:	468e      	mov	lr, r1
1a002320:	9e08      	ldr	r6, [sp, #32]
1a002322:	4615      	mov	r5, r2
1a002324:	4604      	mov	r4, r0
1a002326:	4619      	mov	r1, r3
1a002328:	2b00      	cmp	r3, #0
1a00232a:	f040 80af 	bne.w	1a00248c <__udivmoddi4+0x174>
1a00232e:	4572      	cmp	r2, lr
1a002330:	fab2 f782 	clz	r7, r2
1a002334:	d943      	bls.n	1a0023be <__udivmoddi4+0xa6>
1a002336:	b14f      	cbz	r7, 1a00234c <__udivmoddi4+0x34>
1a002338:	f1c7 0320 	rsb	r3, r7, #32
1a00233c:	fa0e fc07 	lsl.w	ip, lr, r7
1a002340:	fa20 f303 	lsr.w	r3, r0, r3
1a002344:	40bd      	lsls	r5, r7
1a002346:	ea43 0c0c 	orr.w	ip, r3, ip
1a00234a:	40bc      	lsls	r4, r7
1a00234c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002350:	b2a8      	uxth	r0, r5
1a002352:	fbbc f8fe 	udiv	r8, ip, lr
1a002356:	0c23      	lsrs	r3, r4, #16
1a002358:	fb0e cc18 	mls	ip, lr, r8, ip
1a00235c:	fb08 f900 	mul.w	r9, r8, r0
1a002360:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a002364:	4599      	cmp	r9, r3
1a002366:	d928      	bls.n	1a0023ba <__udivmoddi4+0xa2>
1a002368:	18eb      	adds	r3, r5, r3
1a00236a:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a00236e:	d204      	bcs.n	1a00237a <__udivmoddi4+0x62>
1a002370:	4599      	cmp	r9, r3
1a002372:	d902      	bls.n	1a00237a <__udivmoddi4+0x62>
1a002374:	f1a8 0202 	sub.w	r2, r8, #2
1a002378:	442b      	add	r3, r5
1a00237a:	eba3 0309 	sub.w	r3, r3, r9
1a00237e:	fbb3 fcfe 	udiv	ip, r3, lr
1a002382:	b2a4      	uxth	r4, r4
1a002384:	fb0e 331c 	mls	r3, lr, ip, r3
1a002388:	fb0c f000 	mul.w	r0, ip, r0
1a00238c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a002390:	42a0      	cmp	r0, r4
1a002392:	d979      	bls.n	1a002488 <__udivmoddi4+0x170>
1a002394:	192c      	adds	r4, r5, r4
1a002396:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
1a00239a:	d204      	bcs.n	1a0023a6 <__udivmoddi4+0x8e>
1a00239c:	42a0      	cmp	r0, r4
1a00239e:	d902      	bls.n	1a0023a6 <__udivmoddi4+0x8e>
1a0023a0:	f1ac 0302 	sub.w	r3, ip, #2
1a0023a4:	442c      	add	r4, r5
1a0023a6:	1a24      	subs	r4, r4, r0
1a0023a8:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
1a0023ac:	b11e      	cbz	r6, 1a0023b6 <__udivmoddi4+0x9e>
1a0023ae:	40fc      	lsrs	r4, r7
1a0023b0:	2300      	movs	r3, #0
1a0023b2:	6034      	str	r4, [r6, #0]
1a0023b4:	6073      	str	r3, [r6, #4]
1a0023b6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0023ba:	4642      	mov	r2, r8
1a0023bc:	e7dd      	b.n	1a00237a <__udivmoddi4+0x62>
1a0023be:	b902      	cbnz	r2, 1a0023c2 <__udivmoddi4+0xaa>
1a0023c0:	deff      	udf	#255	; 0xff
1a0023c2:	b9e7      	cbnz	r7, 1a0023fe <__udivmoddi4+0xe6>
1a0023c4:	ebae 0302 	sub.w	r3, lr, r2
1a0023c8:	2101      	movs	r1, #1
1a0023ca:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a0023ce:	b2a8      	uxth	r0, r5
1a0023d0:	fbb3 fcfe 	udiv	ip, r3, lr
1a0023d4:	0c22      	lsrs	r2, r4, #16
1a0023d6:	fb0e 331c 	mls	r3, lr, ip, r3
1a0023da:	fb0c f800 	mul.w	r8, ip, r0
1a0023de:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
1a0023e2:	4598      	cmp	r8, r3
1a0023e4:	d94e      	bls.n	1a002484 <__udivmoddi4+0x16c>
1a0023e6:	18eb      	adds	r3, r5, r3
1a0023e8:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
1a0023ec:	d204      	bcs.n	1a0023f8 <__udivmoddi4+0xe0>
1a0023ee:	4598      	cmp	r8, r3
1a0023f0:	d902      	bls.n	1a0023f8 <__udivmoddi4+0xe0>
1a0023f2:	f1ac 0202 	sub.w	r2, ip, #2
1a0023f6:	442b      	add	r3, r5
1a0023f8:	eba3 0308 	sub.w	r3, r3, r8
1a0023fc:	e7bf      	b.n	1a00237e <__udivmoddi4+0x66>
1a0023fe:	f1c7 0120 	rsb	r1, r7, #32
1a002402:	fa2e f301 	lsr.w	r3, lr, r1
1a002406:	40bd      	lsls	r5, r7
1a002408:	fa0e fe07 	lsl.w	lr, lr, r7
1a00240c:	fa20 f101 	lsr.w	r1, r0, r1
1a002410:	ea41 010e 	orr.w	r1, r1, lr
1a002414:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a002418:	b2aa      	uxth	r2, r5
1a00241a:	fbb3 fcfe 	udiv	ip, r3, lr
1a00241e:	fb0e 301c 	mls	r0, lr, ip, r3
1a002422:	0c0b      	lsrs	r3, r1, #16
1a002424:	fb0c f802 	mul.w	r8, ip, r2
1a002428:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a00242c:	4598      	cmp	r8, r3
1a00242e:	fa04 f407 	lsl.w	r4, r4, r7
1a002432:	d923      	bls.n	1a00247c <__udivmoddi4+0x164>
1a002434:	18eb      	adds	r3, r5, r3
1a002436:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a00243a:	d204      	bcs.n	1a002446 <__udivmoddi4+0x12e>
1a00243c:	4598      	cmp	r8, r3
1a00243e:	d902      	bls.n	1a002446 <__udivmoddi4+0x12e>
1a002440:	f1ac 0002 	sub.w	r0, ip, #2
1a002444:	442b      	add	r3, r5
1a002446:	eba3 0308 	sub.w	r3, r3, r8
1a00244a:	fbb3 fcfe 	udiv	ip, r3, lr
1a00244e:	fb0c f802 	mul.w	r8, ip, r2
1a002452:	fb0e 321c 	mls	r2, lr, ip, r3
1a002456:	b28b      	uxth	r3, r1
1a002458:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a00245c:	4598      	cmp	r8, r3
1a00245e:	d90f      	bls.n	1a002480 <__udivmoddi4+0x168>
1a002460:	18eb      	adds	r3, r5, r3
1a002462:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
1a002466:	d204      	bcs.n	1a002472 <__udivmoddi4+0x15a>
1a002468:	4598      	cmp	r8, r3
1a00246a:	d902      	bls.n	1a002472 <__udivmoddi4+0x15a>
1a00246c:	f1ac 0102 	sub.w	r1, ip, #2
1a002470:	442b      	add	r3, r5
1a002472:	eba3 0308 	sub.w	r3, r3, r8
1a002476:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1a00247a:	e7a6      	b.n	1a0023ca <__udivmoddi4+0xb2>
1a00247c:	4660      	mov	r0, ip
1a00247e:	e7e2      	b.n	1a002446 <__udivmoddi4+0x12e>
1a002480:	4661      	mov	r1, ip
1a002482:	e7f6      	b.n	1a002472 <__udivmoddi4+0x15a>
1a002484:	4662      	mov	r2, ip
1a002486:	e7b7      	b.n	1a0023f8 <__udivmoddi4+0xe0>
1a002488:	4663      	mov	r3, ip
1a00248a:	e78c      	b.n	1a0023a6 <__udivmoddi4+0x8e>
1a00248c:	4573      	cmp	r3, lr
1a00248e:	d905      	bls.n	1a00249c <__udivmoddi4+0x184>
1a002490:	b10e      	cbz	r6, 1a002496 <__udivmoddi4+0x17e>
1a002492:	e9c6 0e00 	strd	r0, lr, [r6]
1a002496:	2100      	movs	r1, #0
1a002498:	4608      	mov	r0, r1
1a00249a:	e78c      	b.n	1a0023b6 <__udivmoddi4+0x9e>
1a00249c:	fab3 f783 	clz	r7, r3
1a0024a0:	b987      	cbnz	r7, 1a0024c4 <__udivmoddi4+0x1ac>
1a0024a2:	4573      	cmp	r3, lr
1a0024a4:	d301      	bcc.n	1a0024aa <__udivmoddi4+0x192>
1a0024a6:	4282      	cmp	r2, r0
1a0024a8:	d80a      	bhi.n	1a0024c0 <__udivmoddi4+0x1a8>
1a0024aa:	1a84      	subs	r4, r0, r2
1a0024ac:	eb6e 0303 	sbc.w	r3, lr, r3
1a0024b0:	2001      	movs	r0, #1
1a0024b2:	469c      	mov	ip, r3
1a0024b4:	2e00      	cmp	r6, #0
1a0024b6:	d06a      	beq.n	1a00258e <__udivmoddi4+0x276>
1a0024b8:	e9c6 4c00 	strd	r4, ip, [r6]
1a0024bc:	2100      	movs	r1, #0
1a0024be:	e77a      	b.n	1a0023b6 <__udivmoddi4+0x9e>
1a0024c0:	4638      	mov	r0, r7
1a0024c2:	e7f7      	b.n	1a0024b4 <__udivmoddi4+0x19c>
1a0024c4:	f1c7 0c20 	rsb	ip, r7, #32
1a0024c8:	40bb      	lsls	r3, r7
1a0024ca:	fa22 f40c 	lsr.w	r4, r2, ip
1a0024ce:	431c      	orrs	r4, r3
1a0024d0:	fa20 f10c 	lsr.w	r1, r0, ip
1a0024d4:	fa2e f30c 	lsr.w	r3, lr, ip
1a0024d8:	fa0e fe07 	lsl.w	lr, lr, r7
1a0024dc:	ea41 010e 	orr.w	r1, r1, lr
1a0024e0:	ea4f 4914 	mov.w	r9, r4, lsr #16
1a0024e4:	fa00 f507 	lsl.w	r5, r0, r7
1a0024e8:	fbb3 f8f9 	udiv	r8, r3, r9
1a0024ec:	fa1f fe84 	uxth.w	lr, r4
1a0024f0:	fb09 3018 	mls	r0, r9, r8, r3
1a0024f4:	0c0b      	lsrs	r3, r1, #16
1a0024f6:	fb08 fa0e 	mul.w	sl, r8, lr
1a0024fa:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a0024fe:	459a      	cmp	sl, r3
1a002500:	fa02 f207 	lsl.w	r2, r2, r7
1a002504:	d93f      	bls.n	1a002586 <__udivmoddi4+0x26e>
1a002506:	18e3      	adds	r3, r4, r3
1a002508:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a00250c:	d204      	bcs.n	1a002518 <__udivmoddi4+0x200>
1a00250e:	459a      	cmp	sl, r3
1a002510:	d902      	bls.n	1a002518 <__udivmoddi4+0x200>
1a002512:	f1a8 0002 	sub.w	r0, r8, #2
1a002516:	4423      	add	r3, r4
1a002518:	eba3 030a 	sub.w	r3, r3, sl
1a00251c:	b289      	uxth	r1, r1
1a00251e:	fbb3 f8f9 	udiv	r8, r3, r9
1a002522:	fb09 3318 	mls	r3, r9, r8, r3
1a002526:	fb08 fe0e 	mul.w	lr, r8, lr
1a00252a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a00252e:	458e      	cmp	lr, r1
1a002530:	d92b      	bls.n	1a00258a <__udivmoddi4+0x272>
1a002532:	1861      	adds	r1, r4, r1
1a002534:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a002538:	d204      	bcs.n	1a002544 <__udivmoddi4+0x22c>
1a00253a:	458e      	cmp	lr, r1
1a00253c:	d902      	bls.n	1a002544 <__udivmoddi4+0x22c>
1a00253e:	f1a8 0302 	sub.w	r3, r8, #2
1a002542:	4421      	add	r1, r4
1a002544:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a002548:	fba0 9802 	umull	r9, r8, r0, r2
1a00254c:	eba1 010e 	sub.w	r1, r1, lr
1a002550:	4541      	cmp	r1, r8
1a002552:	46ce      	mov	lr, r9
1a002554:	4643      	mov	r3, r8
1a002556:	d302      	bcc.n	1a00255e <__udivmoddi4+0x246>
1a002558:	d106      	bne.n	1a002568 <__udivmoddi4+0x250>
1a00255a:	454d      	cmp	r5, r9
1a00255c:	d204      	bcs.n	1a002568 <__udivmoddi4+0x250>
1a00255e:	ebb9 0e02 	subs.w	lr, r9, r2
1a002562:	eb68 0304 	sbc.w	r3, r8, r4
1a002566:	3801      	subs	r0, #1
1a002568:	b18e      	cbz	r6, 1a00258e <__udivmoddi4+0x276>
1a00256a:	ebb5 020e 	subs.w	r2, r5, lr
1a00256e:	eb61 0103 	sbc.w	r1, r1, r3
1a002572:	fa01 fc0c 	lsl.w	ip, r1, ip
1a002576:	fa22 f307 	lsr.w	r3, r2, r7
1a00257a:	ea4c 0303 	orr.w	r3, ip, r3
1a00257e:	40f9      	lsrs	r1, r7
1a002580:	e9c6 3100 	strd	r3, r1, [r6]
1a002584:	e79a      	b.n	1a0024bc <__udivmoddi4+0x1a4>
1a002586:	4640      	mov	r0, r8
1a002588:	e7c6      	b.n	1a002518 <__udivmoddi4+0x200>
1a00258a:	4643      	mov	r3, r8
1a00258c:	e7da      	b.n	1a002544 <__udivmoddi4+0x22c>
1a00258e:	4631      	mov	r1, r6
1a002590:	e711      	b.n	1a0023b6 <__udivmoddi4+0x9e>
	...

1a002594 <__aeabi_idiv0>:
1a002594:	4770      	bx	lr
1a002596:	bf00      	nop

1a002598 <_fclose_r>:
1a002598:	b570      	push	{r4, r5, r6, lr}
1a00259a:	4605      	mov	r5, r0
1a00259c:	460c      	mov	r4, r1
1a00259e:	b911      	cbnz	r1, 1a0025a6 <_fclose_r+0xe>
1a0025a0:	2600      	movs	r6, #0
1a0025a2:	4630      	mov	r0, r6
1a0025a4:	bd70      	pop	{r4, r5, r6, pc}
1a0025a6:	b118      	cbz	r0, 1a0025b0 <_fclose_r+0x18>
1a0025a8:	6983      	ldr	r3, [r0, #24]
1a0025aa:	b90b      	cbnz	r3, 1a0025b0 <_fclose_r+0x18>
1a0025ac:	f000 f982 	bl	1a0028b4 <__sinit>
1a0025b0:	4b2c      	ldr	r3, [pc, #176]	; (1a002664 <_fclose_r+0xcc>)
1a0025b2:	429c      	cmp	r4, r3
1a0025b4:	d114      	bne.n	1a0025e0 <_fclose_r+0x48>
1a0025b6:	686c      	ldr	r4, [r5, #4]
1a0025b8:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0025ba:	07d8      	lsls	r0, r3, #31
1a0025bc:	d405      	bmi.n	1a0025ca <_fclose_r+0x32>
1a0025be:	89a3      	ldrh	r3, [r4, #12]
1a0025c0:	0599      	lsls	r1, r3, #22
1a0025c2:	d402      	bmi.n	1a0025ca <_fclose_r+0x32>
1a0025c4:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0025c6:	f000 fb3d 	bl	1a002c44 <__retarget_lock_acquire_recursive>
1a0025ca:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0025ce:	b98b      	cbnz	r3, 1a0025f4 <_fclose_r+0x5c>
1a0025d0:	6e66      	ldr	r6, [r4, #100]	; 0x64
1a0025d2:	f016 0601 	ands.w	r6, r6, #1
1a0025d6:	d1e3      	bne.n	1a0025a0 <_fclose_r+0x8>
1a0025d8:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0025da:	f000 fb34 	bl	1a002c46 <__retarget_lock_release_recursive>
1a0025de:	e7e0      	b.n	1a0025a2 <_fclose_r+0xa>
1a0025e0:	4b21      	ldr	r3, [pc, #132]	; (1a002668 <_fclose_r+0xd0>)
1a0025e2:	429c      	cmp	r4, r3
1a0025e4:	d101      	bne.n	1a0025ea <_fclose_r+0x52>
1a0025e6:	68ac      	ldr	r4, [r5, #8]
1a0025e8:	e7e6      	b.n	1a0025b8 <_fclose_r+0x20>
1a0025ea:	4b20      	ldr	r3, [pc, #128]	; (1a00266c <_fclose_r+0xd4>)
1a0025ec:	429c      	cmp	r4, r3
1a0025ee:	bf08      	it	eq
1a0025f0:	68ec      	ldreq	r4, [r5, #12]
1a0025f2:	e7e1      	b.n	1a0025b8 <_fclose_r+0x20>
1a0025f4:	4621      	mov	r1, r4
1a0025f6:	4628      	mov	r0, r5
1a0025f8:	f000 f842 	bl	1a002680 <__sflush_r>
1a0025fc:	6b23      	ldr	r3, [r4, #48]	; 0x30
1a0025fe:	4606      	mov	r6, r0
1a002600:	b133      	cbz	r3, 1a002610 <_fclose_r+0x78>
1a002602:	6a21      	ldr	r1, [r4, #32]
1a002604:	4628      	mov	r0, r5
1a002606:	4798      	blx	r3
1a002608:	2800      	cmp	r0, #0
1a00260a:	bfb8      	it	lt
1a00260c:	f04f 36ff 	movlt.w	r6, #4294967295	; 0xffffffff
1a002610:	89a3      	ldrh	r3, [r4, #12]
1a002612:	061a      	lsls	r2, r3, #24
1a002614:	d503      	bpl.n	1a00261e <_fclose_r+0x86>
1a002616:	6921      	ldr	r1, [r4, #16]
1a002618:	4628      	mov	r0, r5
1a00261a:	f000 fb1d 	bl	1a002c58 <_free_r>
1a00261e:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a002620:	b141      	cbz	r1, 1a002634 <_fclose_r+0x9c>
1a002622:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a002626:	4299      	cmp	r1, r3
1a002628:	d002      	beq.n	1a002630 <_fclose_r+0x98>
1a00262a:	4628      	mov	r0, r5
1a00262c:	f000 fb14 	bl	1a002c58 <_free_r>
1a002630:	2300      	movs	r3, #0
1a002632:	6363      	str	r3, [r4, #52]	; 0x34
1a002634:	6ca1      	ldr	r1, [r4, #72]	; 0x48
1a002636:	b121      	cbz	r1, 1a002642 <_fclose_r+0xaa>
1a002638:	4628      	mov	r0, r5
1a00263a:	f000 fb0d 	bl	1a002c58 <_free_r>
1a00263e:	2300      	movs	r3, #0
1a002640:	64a3      	str	r3, [r4, #72]	; 0x48
1a002642:	f000 f91f 	bl	1a002884 <__sfp_lock_acquire>
1a002646:	2300      	movs	r3, #0
1a002648:	81a3      	strh	r3, [r4, #12]
1a00264a:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a00264c:	07db      	lsls	r3, r3, #31
1a00264e:	d402      	bmi.n	1a002656 <_fclose_r+0xbe>
1a002650:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002652:	f000 faf8 	bl	1a002c46 <__retarget_lock_release_recursive>
1a002656:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002658:	f000 faf3 	bl	1a002c42 <__retarget_lock_close_recursive>
1a00265c:	f000 f918 	bl	1a002890 <__sfp_lock_release>
1a002660:	e79f      	b.n	1a0025a2 <_fclose_r+0xa>
1a002662:	bf00      	nop
1a002664:	1a003b60 	.word	0x1a003b60
1a002668:	1a003b80 	.word	0x1a003b80
1a00266c:	1a003b40 	.word	0x1a003b40

1a002670 <fclose>:
1a002670:	4b02      	ldr	r3, [pc, #8]	; (1a00267c <fclose+0xc>)
1a002672:	4601      	mov	r1, r0
1a002674:	6818      	ldr	r0, [r3, #0]
1a002676:	f7ff bf8f 	b.w	1a002598 <_fclose_r>
1a00267a:	bf00      	nop
1a00267c:	10000088 	.word	0x10000088

1a002680 <__sflush_r>:
1a002680:	898a      	ldrh	r2, [r1, #12]
1a002682:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a002686:	4605      	mov	r5, r0
1a002688:	0710      	lsls	r0, r2, #28
1a00268a:	460c      	mov	r4, r1
1a00268c:	d458      	bmi.n	1a002740 <__sflush_r+0xc0>
1a00268e:	684b      	ldr	r3, [r1, #4]
1a002690:	2b00      	cmp	r3, #0
1a002692:	dc05      	bgt.n	1a0026a0 <__sflush_r+0x20>
1a002694:	6c0b      	ldr	r3, [r1, #64]	; 0x40
1a002696:	2b00      	cmp	r3, #0
1a002698:	dc02      	bgt.n	1a0026a0 <__sflush_r+0x20>
1a00269a:	2000      	movs	r0, #0
1a00269c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a0026a0:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0026a2:	2e00      	cmp	r6, #0
1a0026a4:	d0f9      	beq.n	1a00269a <__sflush_r+0x1a>
1a0026a6:	2300      	movs	r3, #0
1a0026a8:	f412 5280 	ands.w	r2, r2, #4096	; 0x1000
1a0026ac:	682f      	ldr	r7, [r5, #0]
1a0026ae:	602b      	str	r3, [r5, #0]
1a0026b0:	d032      	beq.n	1a002718 <__sflush_r+0x98>
1a0026b2:	6d60      	ldr	r0, [r4, #84]	; 0x54
1a0026b4:	89a3      	ldrh	r3, [r4, #12]
1a0026b6:	075a      	lsls	r2, r3, #29
1a0026b8:	d505      	bpl.n	1a0026c6 <__sflush_r+0x46>
1a0026ba:	6863      	ldr	r3, [r4, #4]
1a0026bc:	1ac0      	subs	r0, r0, r3
1a0026be:	6b63      	ldr	r3, [r4, #52]	; 0x34
1a0026c0:	b10b      	cbz	r3, 1a0026c6 <__sflush_r+0x46>
1a0026c2:	6c23      	ldr	r3, [r4, #64]	; 0x40
1a0026c4:	1ac0      	subs	r0, r0, r3
1a0026c6:	2300      	movs	r3, #0
1a0026c8:	4602      	mov	r2, r0
1a0026ca:	6ae6      	ldr	r6, [r4, #44]	; 0x2c
1a0026cc:	6a21      	ldr	r1, [r4, #32]
1a0026ce:	4628      	mov	r0, r5
1a0026d0:	47b0      	blx	r6
1a0026d2:	1c43      	adds	r3, r0, #1
1a0026d4:	89a3      	ldrh	r3, [r4, #12]
1a0026d6:	d106      	bne.n	1a0026e6 <__sflush_r+0x66>
1a0026d8:	6829      	ldr	r1, [r5, #0]
1a0026da:	291d      	cmp	r1, #29
1a0026dc:	d82c      	bhi.n	1a002738 <__sflush_r+0xb8>
1a0026de:	4a2a      	ldr	r2, [pc, #168]	; (1a002788 <__sflush_r+0x108>)
1a0026e0:	40ca      	lsrs	r2, r1
1a0026e2:	07d6      	lsls	r6, r2, #31
1a0026e4:	d528      	bpl.n	1a002738 <__sflush_r+0xb8>
1a0026e6:	2200      	movs	r2, #0
1a0026e8:	6062      	str	r2, [r4, #4]
1a0026ea:	04d9      	lsls	r1, r3, #19
1a0026ec:	6922      	ldr	r2, [r4, #16]
1a0026ee:	6022      	str	r2, [r4, #0]
1a0026f0:	d504      	bpl.n	1a0026fc <__sflush_r+0x7c>
1a0026f2:	1c42      	adds	r2, r0, #1
1a0026f4:	d101      	bne.n	1a0026fa <__sflush_r+0x7a>
1a0026f6:	682b      	ldr	r3, [r5, #0]
1a0026f8:	b903      	cbnz	r3, 1a0026fc <__sflush_r+0x7c>
1a0026fa:	6560      	str	r0, [r4, #84]	; 0x54
1a0026fc:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0026fe:	602f      	str	r7, [r5, #0]
1a002700:	2900      	cmp	r1, #0
1a002702:	d0ca      	beq.n	1a00269a <__sflush_r+0x1a>
1a002704:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a002708:	4299      	cmp	r1, r3
1a00270a:	d002      	beq.n	1a002712 <__sflush_r+0x92>
1a00270c:	4628      	mov	r0, r5
1a00270e:	f000 faa3 	bl	1a002c58 <_free_r>
1a002712:	2000      	movs	r0, #0
1a002714:	6360      	str	r0, [r4, #52]	; 0x34
1a002716:	e7c1      	b.n	1a00269c <__sflush_r+0x1c>
1a002718:	6a21      	ldr	r1, [r4, #32]
1a00271a:	2301      	movs	r3, #1
1a00271c:	4628      	mov	r0, r5
1a00271e:	47b0      	blx	r6
1a002720:	1c41      	adds	r1, r0, #1
1a002722:	d1c7      	bne.n	1a0026b4 <__sflush_r+0x34>
1a002724:	682b      	ldr	r3, [r5, #0]
1a002726:	2b00      	cmp	r3, #0
1a002728:	d0c4      	beq.n	1a0026b4 <__sflush_r+0x34>
1a00272a:	2b1d      	cmp	r3, #29
1a00272c:	d001      	beq.n	1a002732 <__sflush_r+0xb2>
1a00272e:	2b16      	cmp	r3, #22
1a002730:	d101      	bne.n	1a002736 <__sflush_r+0xb6>
1a002732:	602f      	str	r7, [r5, #0]
1a002734:	e7b1      	b.n	1a00269a <__sflush_r+0x1a>
1a002736:	89a3      	ldrh	r3, [r4, #12]
1a002738:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a00273c:	81a3      	strh	r3, [r4, #12]
1a00273e:	e7ad      	b.n	1a00269c <__sflush_r+0x1c>
1a002740:	690f      	ldr	r7, [r1, #16]
1a002742:	2f00      	cmp	r7, #0
1a002744:	d0a9      	beq.n	1a00269a <__sflush_r+0x1a>
1a002746:	0793      	lsls	r3, r2, #30
1a002748:	680e      	ldr	r6, [r1, #0]
1a00274a:	bf08      	it	eq
1a00274c:	694b      	ldreq	r3, [r1, #20]
1a00274e:	600f      	str	r7, [r1, #0]
1a002750:	bf18      	it	ne
1a002752:	2300      	movne	r3, #0
1a002754:	eba6 0807 	sub.w	r8, r6, r7
1a002758:	608b      	str	r3, [r1, #8]
1a00275a:	f1b8 0f00 	cmp.w	r8, #0
1a00275e:	dd9c      	ble.n	1a00269a <__sflush_r+0x1a>
1a002760:	6a21      	ldr	r1, [r4, #32]
1a002762:	6aa6      	ldr	r6, [r4, #40]	; 0x28
1a002764:	4643      	mov	r3, r8
1a002766:	463a      	mov	r2, r7
1a002768:	4628      	mov	r0, r5
1a00276a:	47b0      	blx	r6
1a00276c:	2800      	cmp	r0, #0
1a00276e:	dc06      	bgt.n	1a00277e <__sflush_r+0xfe>
1a002770:	89a3      	ldrh	r3, [r4, #12]
1a002772:	f043 0340 	orr.w	r3, r3, #64	; 0x40
1a002776:	81a3      	strh	r3, [r4, #12]
1a002778:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a00277c:	e78e      	b.n	1a00269c <__sflush_r+0x1c>
1a00277e:	4407      	add	r7, r0
1a002780:	eba8 0800 	sub.w	r8, r8, r0
1a002784:	e7e9      	b.n	1a00275a <__sflush_r+0xda>
1a002786:	bf00      	nop
1a002788:	20400001 	.word	0x20400001

1a00278c <_fflush_r>:
1a00278c:	b538      	push	{r3, r4, r5, lr}
1a00278e:	690b      	ldr	r3, [r1, #16]
1a002790:	4605      	mov	r5, r0
1a002792:	460c      	mov	r4, r1
1a002794:	b913      	cbnz	r3, 1a00279c <_fflush_r+0x10>
1a002796:	2500      	movs	r5, #0
1a002798:	4628      	mov	r0, r5
1a00279a:	bd38      	pop	{r3, r4, r5, pc}
1a00279c:	b118      	cbz	r0, 1a0027a6 <_fflush_r+0x1a>
1a00279e:	6983      	ldr	r3, [r0, #24]
1a0027a0:	b90b      	cbnz	r3, 1a0027a6 <_fflush_r+0x1a>
1a0027a2:	f000 f887 	bl	1a0028b4 <__sinit>
1a0027a6:	4b14      	ldr	r3, [pc, #80]	; (1a0027f8 <_fflush_r+0x6c>)
1a0027a8:	429c      	cmp	r4, r3
1a0027aa:	d11b      	bne.n	1a0027e4 <_fflush_r+0x58>
1a0027ac:	686c      	ldr	r4, [r5, #4]
1a0027ae:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a0027b2:	2b00      	cmp	r3, #0
1a0027b4:	d0ef      	beq.n	1a002796 <_fflush_r+0xa>
1a0027b6:	6e62      	ldr	r2, [r4, #100]	; 0x64
1a0027b8:	07d0      	lsls	r0, r2, #31
1a0027ba:	d404      	bmi.n	1a0027c6 <_fflush_r+0x3a>
1a0027bc:	0599      	lsls	r1, r3, #22
1a0027be:	d402      	bmi.n	1a0027c6 <_fflush_r+0x3a>
1a0027c0:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0027c2:	f000 fa3f 	bl	1a002c44 <__retarget_lock_acquire_recursive>
1a0027c6:	4628      	mov	r0, r5
1a0027c8:	4621      	mov	r1, r4
1a0027ca:	f7ff ff59 	bl	1a002680 <__sflush_r>
1a0027ce:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a0027d0:	07da      	lsls	r2, r3, #31
1a0027d2:	4605      	mov	r5, r0
1a0027d4:	d4e0      	bmi.n	1a002798 <_fflush_r+0xc>
1a0027d6:	89a3      	ldrh	r3, [r4, #12]
1a0027d8:	059b      	lsls	r3, r3, #22
1a0027da:	d4dd      	bmi.n	1a002798 <_fflush_r+0xc>
1a0027dc:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a0027de:	f000 fa32 	bl	1a002c46 <__retarget_lock_release_recursive>
1a0027e2:	e7d9      	b.n	1a002798 <_fflush_r+0xc>
1a0027e4:	4b05      	ldr	r3, [pc, #20]	; (1a0027fc <_fflush_r+0x70>)
1a0027e6:	429c      	cmp	r4, r3
1a0027e8:	d101      	bne.n	1a0027ee <_fflush_r+0x62>
1a0027ea:	68ac      	ldr	r4, [r5, #8]
1a0027ec:	e7df      	b.n	1a0027ae <_fflush_r+0x22>
1a0027ee:	4b04      	ldr	r3, [pc, #16]	; (1a002800 <_fflush_r+0x74>)
1a0027f0:	429c      	cmp	r4, r3
1a0027f2:	bf08      	it	eq
1a0027f4:	68ec      	ldreq	r4, [r5, #12]
1a0027f6:	e7da      	b.n	1a0027ae <_fflush_r+0x22>
1a0027f8:	1a003b60 	.word	0x1a003b60
1a0027fc:	1a003b80 	.word	0x1a003b80
1a002800:	1a003b40 	.word	0x1a003b40

1a002804 <std>:
1a002804:	2300      	movs	r3, #0
1a002806:	b510      	push	{r4, lr}
1a002808:	4604      	mov	r4, r0
1a00280a:	e9c0 3300 	strd	r3, r3, [r0]
1a00280e:	e9c0 3304 	strd	r3, r3, [r0, #16]
1a002812:	6083      	str	r3, [r0, #8]
1a002814:	8181      	strh	r1, [r0, #12]
1a002816:	6643      	str	r3, [r0, #100]	; 0x64
1a002818:	81c2      	strh	r2, [r0, #14]
1a00281a:	6183      	str	r3, [r0, #24]
1a00281c:	4619      	mov	r1, r3
1a00281e:	2208      	movs	r2, #8
1a002820:	305c      	adds	r0, #92	; 0x5c
1a002822:	f000 fa11 	bl	1a002c48 <memset>
1a002826:	4b05      	ldr	r3, [pc, #20]	; (1a00283c <std+0x38>)
1a002828:	6263      	str	r3, [r4, #36]	; 0x24
1a00282a:	4b05      	ldr	r3, [pc, #20]	; (1a002840 <std+0x3c>)
1a00282c:	62a3      	str	r3, [r4, #40]	; 0x28
1a00282e:	4b05      	ldr	r3, [pc, #20]	; (1a002844 <std+0x40>)
1a002830:	62e3      	str	r3, [r4, #44]	; 0x2c
1a002832:	4b05      	ldr	r3, [pc, #20]	; (1a002848 <std+0x44>)
1a002834:	6224      	str	r4, [r4, #32]
1a002836:	6323      	str	r3, [r4, #48]	; 0x30
1a002838:	bd10      	pop	{r4, pc}
1a00283a:	bf00      	nop
1a00283c:	1a00306d 	.word	0x1a00306d
1a002840:	1a00308f 	.word	0x1a00308f
1a002844:	1a0030c7 	.word	0x1a0030c7
1a002848:	1a0030eb 	.word	0x1a0030eb

1a00284c <_cleanup_r>:
1a00284c:	4901      	ldr	r1, [pc, #4]	; (1a002854 <_cleanup_r+0x8>)
1a00284e:	f000 b9b3 	b.w	1a002bb8 <_fwalk_reent>
1a002852:	bf00      	nop
1a002854:	1a00278d 	.word	0x1a00278d

1a002858 <__sfmoreglue>:
1a002858:	b570      	push	{r4, r5, r6, lr}
1a00285a:	2268      	movs	r2, #104	; 0x68
1a00285c:	1e4d      	subs	r5, r1, #1
1a00285e:	4355      	muls	r5, r2
1a002860:	460e      	mov	r6, r1
1a002862:	f105 0174 	add.w	r1, r5, #116	; 0x74
1a002866:	f000 fa43 	bl	1a002cf0 <_malloc_r>
1a00286a:	4604      	mov	r4, r0
1a00286c:	b140      	cbz	r0, 1a002880 <__sfmoreglue+0x28>
1a00286e:	2100      	movs	r1, #0
1a002870:	e9c0 1600 	strd	r1, r6, [r0]
1a002874:	300c      	adds	r0, #12
1a002876:	60a0      	str	r0, [r4, #8]
1a002878:	f105 0268 	add.w	r2, r5, #104	; 0x68
1a00287c:	f000 f9e4 	bl	1a002c48 <memset>
1a002880:	4620      	mov	r0, r4
1a002882:	bd70      	pop	{r4, r5, r6, pc}

1a002884 <__sfp_lock_acquire>:
1a002884:	4801      	ldr	r0, [pc, #4]	; (1a00288c <__sfp_lock_acquire+0x8>)
1a002886:	f000 b9dd 	b.w	1a002c44 <__retarget_lock_acquire_recursive>
1a00288a:	bf00      	nop
1a00288c:	100001b5 	.word	0x100001b5

1a002890 <__sfp_lock_release>:
1a002890:	4801      	ldr	r0, [pc, #4]	; (1a002898 <__sfp_lock_release+0x8>)
1a002892:	f000 b9d8 	b.w	1a002c46 <__retarget_lock_release_recursive>
1a002896:	bf00      	nop
1a002898:	100001b5 	.word	0x100001b5

1a00289c <__sinit_lock_acquire>:
1a00289c:	4801      	ldr	r0, [pc, #4]	; (1a0028a4 <__sinit_lock_acquire+0x8>)
1a00289e:	f000 b9d1 	b.w	1a002c44 <__retarget_lock_acquire_recursive>
1a0028a2:	bf00      	nop
1a0028a4:	100001b6 	.word	0x100001b6

1a0028a8 <__sinit_lock_release>:
1a0028a8:	4801      	ldr	r0, [pc, #4]	; (1a0028b0 <__sinit_lock_release+0x8>)
1a0028aa:	f000 b9cc 	b.w	1a002c46 <__retarget_lock_release_recursive>
1a0028ae:	bf00      	nop
1a0028b0:	100001b6 	.word	0x100001b6

1a0028b4 <__sinit>:
1a0028b4:	b510      	push	{r4, lr}
1a0028b6:	4604      	mov	r4, r0
1a0028b8:	f7ff fff0 	bl	1a00289c <__sinit_lock_acquire>
1a0028bc:	69a3      	ldr	r3, [r4, #24]
1a0028be:	b11b      	cbz	r3, 1a0028c8 <__sinit+0x14>
1a0028c0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
1a0028c4:	f7ff bff0 	b.w	1a0028a8 <__sinit_lock_release>
1a0028c8:	e9c4 3312 	strd	r3, r3, [r4, #72]	; 0x48
1a0028cc:	6523      	str	r3, [r4, #80]	; 0x50
1a0028ce:	4b13      	ldr	r3, [pc, #76]	; (1a00291c <__sinit+0x68>)
1a0028d0:	4a13      	ldr	r2, [pc, #76]	; (1a002920 <__sinit+0x6c>)
1a0028d2:	681b      	ldr	r3, [r3, #0]
1a0028d4:	62a2      	str	r2, [r4, #40]	; 0x28
1a0028d6:	42a3      	cmp	r3, r4
1a0028d8:	bf04      	itt	eq
1a0028da:	2301      	moveq	r3, #1
1a0028dc:	61a3      	streq	r3, [r4, #24]
1a0028de:	4620      	mov	r0, r4
1a0028e0:	f000 f820 	bl	1a002924 <__sfp>
1a0028e4:	6060      	str	r0, [r4, #4]
1a0028e6:	4620      	mov	r0, r4
1a0028e8:	f000 f81c 	bl	1a002924 <__sfp>
1a0028ec:	60a0      	str	r0, [r4, #8]
1a0028ee:	4620      	mov	r0, r4
1a0028f0:	f000 f818 	bl	1a002924 <__sfp>
1a0028f4:	2200      	movs	r2, #0
1a0028f6:	60e0      	str	r0, [r4, #12]
1a0028f8:	2104      	movs	r1, #4
1a0028fa:	6860      	ldr	r0, [r4, #4]
1a0028fc:	f7ff ff82 	bl	1a002804 <std>
1a002900:	68a0      	ldr	r0, [r4, #8]
1a002902:	2201      	movs	r2, #1
1a002904:	2109      	movs	r1, #9
1a002906:	f7ff ff7d 	bl	1a002804 <std>
1a00290a:	68e0      	ldr	r0, [r4, #12]
1a00290c:	2202      	movs	r2, #2
1a00290e:	2112      	movs	r1, #18
1a002910:	f7ff ff78 	bl	1a002804 <std>
1a002914:	2301      	movs	r3, #1
1a002916:	61a3      	str	r3, [r4, #24]
1a002918:	e7d2      	b.n	1a0028c0 <__sinit+0xc>
1a00291a:	bf00      	nop
1a00291c:	1a003ba0 	.word	0x1a003ba0
1a002920:	1a00284d 	.word	0x1a00284d

1a002924 <__sfp>:
1a002924:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002926:	4607      	mov	r7, r0
1a002928:	f7ff ffac 	bl	1a002884 <__sfp_lock_acquire>
1a00292c:	4b1e      	ldr	r3, [pc, #120]	; (1a0029a8 <__sfp+0x84>)
1a00292e:	681e      	ldr	r6, [r3, #0]
1a002930:	69b3      	ldr	r3, [r6, #24]
1a002932:	b913      	cbnz	r3, 1a00293a <__sfp+0x16>
1a002934:	4630      	mov	r0, r6
1a002936:	f7ff ffbd 	bl	1a0028b4 <__sinit>
1a00293a:	3648      	adds	r6, #72	; 0x48
1a00293c:	e9d6 3401 	ldrd	r3, r4, [r6, #4]
1a002940:	3b01      	subs	r3, #1
1a002942:	d503      	bpl.n	1a00294c <__sfp+0x28>
1a002944:	6833      	ldr	r3, [r6, #0]
1a002946:	b30b      	cbz	r3, 1a00298c <__sfp+0x68>
1a002948:	6836      	ldr	r6, [r6, #0]
1a00294a:	e7f7      	b.n	1a00293c <__sfp+0x18>
1a00294c:	f9b4 500c 	ldrsh.w	r5, [r4, #12]
1a002950:	b9d5      	cbnz	r5, 1a002988 <__sfp+0x64>
1a002952:	4b16      	ldr	r3, [pc, #88]	; (1a0029ac <__sfp+0x88>)
1a002954:	60e3      	str	r3, [r4, #12]
1a002956:	f104 0058 	add.w	r0, r4, #88	; 0x58
1a00295a:	6665      	str	r5, [r4, #100]	; 0x64
1a00295c:	f000 f970 	bl	1a002c40 <__retarget_lock_init_recursive>
1a002960:	f7ff ff96 	bl	1a002890 <__sfp_lock_release>
1a002964:	e9c4 5501 	strd	r5, r5, [r4, #4]
1a002968:	e9c4 5504 	strd	r5, r5, [r4, #16]
1a00296c:	6025      	str	r5, [r4, #0]
1a00296e:	61a5      	str	r5, [r4, #24]
1a002970:	2208      	movs	r2, #8
1a002972:	4629      	mov	r1, r5
1a002974:	f104 005c 	add.w	r0, r4, #92	; 0x5c
1a002978:	f000 f966 	bl	1a002c48 <memset>
1a00297c:	e9c4 550d 	strd	r5, r5, [r4, #52]	; 0x34
1a002980:	e9c4 5512 	strd	r5, r5, [r4, #72]	; 0x48
1a002984:	4620      	mov	r0, r4
1a002986:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002988:	3468      	adds	r4, #104	; 0x68
1a00298a:	e7d9      	b.n	1a002940 <__sfp+0x1c>
1a00298c:	2104      	movs	r1, #4
1a00298e:	4638      	mov	r0, r7
1a002990:	f7ff ff62 	bl	1a002858 <__sfmoreglue>
1a002994:	4604      	mov	r4, r0
1a002996:	6030      	str	r0, [r6, #0]
1a002998:	2800      	cmp	r0, #0
1a00299a:	d1d5      	bne.n	1a002948 <__sfp+0x24>
1a00299c:	f7ff ff78 	bl	1a002890 <__sfp_lock_release>
1a0029a0:	230c      	movs	r3, #12
1a0029a2:	603b      	str	r3, [r7, #0]
1a0029a4:	e7ee      	b.n	1a002984 <__sfp+0x60>
1a0029a6:	bf00      	nop
1a0029a8:	1a003ba0 	.word	0x1a003ba0
1a0029ac:	ffff0001 	.word	0xffff0001

1a0029b0 <fcwriter>:
1a0029b0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a0029b4:	461f      	mov	r7, r3
1a0029b6:	684b      	ldr	r3, [r1, #4]
1a0029b8:	4616      	mov	r6, r2
1a0029ba:	899a      	ldrh	r2, [r3, #12]
1a0029bc:	05d2      	lsls	r2, r2, #23
1a0029be:	4605      	mov	r5, r0
1a0029c0:	460c      	mov	r4, r1
1a0029c2:	d507      	bpl.n	1a0029d4 <fcwriter+0x24>
1a0029c4:	f8d3 802c 	ldr.w	r8, [r3, #44]	; 0x2c
1a0029c8:	f1b8 0f00 	cmp.w	r8, #0
1a0029cc:	d002      	beq.n	1a0029d4 <fcwriter+0x24>
1a0029ce:	2302      	movs	r3, #2
1a0029d0:	2200      	movs	r2, #0
1a0029d2:	47c0      	blx	r8
1a0029d4:	f000 fc4e 	bl	1a003274 <__errno>
1a0029d8:	2300      	movs	r3, #0
1a0029da:	6003      	str	r3, [r0, #0]
1a0029dc:	463a      	mov	r2, r7
1a0029de:	68e3      	ldr	r3, [r4, #12]
1a0029e0:	6820      	ldr	r0, [r4, #0]
1a0029e2:	4631      	mov	r1, r6
1a0029e4:	4798      	blx	r3
1a0029e6:	1e04      	subs	r4, r0, #0
1a0029e8:	da07      	bge.n	1a0029fa <fcwriter+0x4a>
1a0029ea:	f000 fc43 	bl	1a003274 <__errno>
1a0029ee:	6803      	ldr	r3, [r0, #0]
1a0029f0:	b11b      	cbz	r3, 1a0029fa <fcwriter+0x4a>
1a0029f2:	f000 fc3f 	bl	1a003274 <__errno>
1a0029f6:	6803      	ldr	r3, [r0, #0]
1a0029f8:	602b      	str	r3, [r5, #0]
1a0029fa:	4620      	mov	r0, r4
1a0029fc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}

1a002a00 <fccloser>:
1a002a00:	b570      	push	{r4, r5, r6, lr}
1a002a02:	694c      	ldr	r4, [r1, #20]
1a002a04:	4606      	mov	r6, r0
1a002a06:	460d      	mov	r5, r1
1a002a08:	b184      	cbz	r4, 1a002a2c <fccloser+0x2c>
1a002a0a:	f000 fc33 	bl	1a003274 <__errno>
1a002a0e:	2300      	movs	r3, #0
1a002a10:	6003      	str	r3, [r0, #0]
1a002a12:	696b      	ldr	r3, [r5, #20]
1a002a14:	6828      	ldr	r0, [r5, #0]
1a002a16:	4798      	blx	r3
1a002a18:	1e04      	subs	r4, r0, #0
1a002a1a:	da07      	bge.n	1a002a2c <fccloser+0x2c>
1a002a1c:	f000 fc2a 	bl	1a003274 <__errno>
1a002a20:	6803      	ldr	r3, [r0, #0]
1a002a22:	b11b      	cbz	r3, 1a002a2c <fccloser+0x2c>
1a002a24:	f000 fc26 	bl	1a003274 <__errno>
1a002a28:	6803      	ldr	r3, [r0, #0]
1a002a2a:	6033      	str	r3, [r6, #0]
1a002a2c:	4630      	mov	r0, r6
1a002a2e:	4629      	mov	r1, r5
1a002a30:	f000 f912 	bl	1a002c58 <_free_r>
1a002a34:	4620      	mov	r0, r4
1a002a36:	bd70      	pop	{r4, r5, r6, pc}

1a002a38 <fcseeker>:
1a002a38:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a002a3a:	460c      	mov	r4, r1
1a002a3c:	461e      	mov	r6, r3
1a002a3e:	9201      	str	r2, [sp, #4]
1a002a40:	4605      	mov	r5, r0
1a002a42:	f000 fc17 	bl	1a003274 <__errno>
1a002a46:	2300      	movs	r3, #0
1a002a48:	6003      	str	r3, [r0, #0]
1a002a4a:	4632      	mov	r2, r6
1a002a4c:	6923      	ldr	r3, [r4, #16]
1a002a4e:	6820      	ldr	r0, [r4, #0]
1a002a50:	a901      	add	r1, sp, #4
1a002a52:	4798      	blx	r3
1a002a54:	2800      	cmp	r0, #0
1a002a56:	da07      	bge.n	1a002a68 <fcseeker+0x30>
1a002a58:	f000 fc0c 	bl	1a003274 <__errno>
1a002a5c:	6803      	ldr	r3, [r0, #0]
1a002a5e:	b11b      	cbz	r3, 1a002a68 <fcseeker+0x30>
1a002a60:	f000 fc08 	bl	1a003274 <__errno>
1a002a64:	6803      	ldr	r3, [r0, #0]
1a002a66:	602b      	str	r3, [r5, #0]
1a002a68:	9801      	ldr	r0, [sp, #4]
1a002a6a:	b002      	add	sp, #8
1a002a6c:	bd70      	pop	{r4, r5, r6, pc}

1a002a6e <fcreader>:
1a002a6e:	b537      	push	{r0, r1, r2, r4, r5, lr}
1a002a70:	460c      	mov	r4, r1
1a002a72:	9201      	str	r2, [sp, #4]
1a002a74:	9300      	str	r3, [sp, #0]
1a002a76:	4605      	mov	r5, r0
1a002a78:	f000 fbfc 	bl	1a003274 <__errno>
1a002a7c:	2300      	movs	r3, #0
1a002a7e:	6003      	str	r3, [r0, #0]
1a002a80:	e9dd 2100 	ldrd	r2, r1, [sp]
1a002a84:	68a3      	ldr	r3, [r4, #8]
1a002a86:	6820      	ldr	r0, [r4, #0]
1a002a88:	4798      	blx	r3
1a002a8a:	1e04      	subs	r4, r0, #0
1a002a8c:	da07      	bge.n	1a002a9e <fcreader+0x30>
1a002a8e:	f000 fbf1 	bl	1a003274 <__errno>
1a002a92:	6803      	ldr	r3, [r0, #0]
1a002a94:	b11b      	cbz	r3, 1a002a9e <fcreader+0x30>
1a002a96:	f000 fbed 	bl	1a003274 <__errno>
1a002a9a:	6803      	ldr	r3, [r0, #0]
1a002a9c:	602b      	str	r3, [r5, #0]
1a002a9e:	4620      	mov	r0, r4
1a002aa0:	b003      	add	sp, #12
1a002aa2:	bd30      	pop	{r4, r5, pc}

1a002aa4 <_fopencookie_r>:
1a002aa4:	b082      	sub	sp, #8
1a002aa6:	e92d 47f3 	stmdb	sp!, {r0, r1, r4, r5, r6, r7, r8, r9, sl, lr}
1a002aaa:	4689      	mov	r9, r1
1a002aac:	4611      	mov	r1, r2
1a002aae:	aa01      	add	r2, sp, #4
1a002ab0:	e9dd a70c 	ldrd	sl, r7, [sp, #48]	; 0x30
1a002ab4:	4605      	mov	r5, r0
1a002ab6:	930b      	str	r3, [sp, #44]	; 0x2c
1a002ab8:	4698      	mov	r8, r3
1a002aba:	f000 fbe1 	bl	1a003280 <__sflags>
1a002abe:	4606      	mov	r6, r0
1a002ac0:	b930      	cbnz	r0, 1a002ad0 <_fopencookie_r+0x2c>
1a002ac2:	2400      	movs	r4, #0
1a002ac4:	4620      	mov	r0, r4
1a002ac6:	b002      	add	sp, #8
1a002ac8:	e8bd 47f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a002acc:	b002      	add	sp, #8
1a002ace:	4770      	bx	lr
1a002ad0:	f010 0f14 	tst.w	r0, #20
1a002ad4:	d002      	beq.n	1a002adc <_fopencookie_r+0x38>
1a002ad6:	f1b8 0f00 	cmp.w	r8, #0
1a002ada:	d005      	beq.n	1a002ae8 <_fopencookie_r+0x44>
1a002adc:	f016 0f18 	tst.w	r6, #24
1a002ae0:	d005      	beq.n	1a002aee <_fopencookie_r+0x4a>
1a002ae2:	f1ba 0f00 	cmp.w	sl, #0
1a002ae6:	d102      	bne.n	1a002aee <_fopencookie_r+0x4a>
1a002ae8:	2316      	movs	r3, #22
1a002aea:	602b      	str	r3, [r5, #0]
1a002aec:	e7e9      	b.n	1a002ac2 <_fopencookie_r+0x1e>
1a002aee:	4628      	mov	r0, r5
1a002af0:	f7ff ff18 	bl	1a002924 <__sfp>
1a002af4:	4604      	mov	r4, r0
1a002af6:	2800      	cmp	r0, #0
1a002af8:	d0e3      	beq.n	1a002ac2 <_fopencookie_r+0x1e>
1a002afa:	4628      	mov	r0, r5
1a002afc:	2118      	movs	r1, #24
1a002afe:	f000 f8f7 	bl	1a002cf0 <_malloc_r>
1a002b02:	4605      	mov	r5, r0
1a002b04:	b940      	cbnz	r0, 1a002b18 <_fopencookie_r+0x74>
1a002b06:	f7ff febd 	bl	1a002884 <__sfp_lock_acquire>
1a002b0a:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002b0c:	81a5      	strh	r5, [r4, #12]
1a002b0e:	f000 f898 	bl	1a002c42 <__retarget_lock_close_recursive>
1a002b12:	f7ff febd 	bl	1a002890 <__sfp_lock_release>
1a002b16:	e7d4      	b.n	1a002ac2 <_fopencookie_r+0x1e>
1a002b18:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002b1a:	07d8      	lsls	r0, r3, #31
1a002b1c:	d405      	bmi.n	1a002b2a <_fopencookie_r+0x86>
1a002b1e:	89a3      	ldrh	r3, [r4, #12]
1a002b20:	0599      	lsls	r1, r3, #22
1a002b22:	d402      	bmi.n	1a002b2a <_fopencookie_r+0x86>
1a002b24:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002b26:	f000 f88d 	bl	1a002c44 <__retarget_lock_acquire_recursive>
1a002b2a:	f64f 73ff 	movw	r3, #65535	; 0xffff
1a002b2e:	81e3      	strh	r3, [r4, #14]
1a002b30:	4b0f      	ldr	r3, [pc, #60]	; (1a002b70 <_fopencookie_r+0xcc>)
1a002b32:	81a6      	strh	r6, [r4, #12]
1a002b34:	e9c5 9400 	strd	r9, r4, [r5]
1a002b38:	6225      	str	r5, [r4, #32]
1a002b3a:	f8c5 8008 	str.w	r8, [r5, #8]
1a002b3e:	6263      	str	r3, [r4, #36]	; 0x24
1a002b40:	4b0c      	ldr	r3, [pc, #48]	; (1a002b74 <_fopencookie_r+0xd0>)
1a002b42:	f8c5 a00c 	str.w	sl, [r5, #12]
1a002b46:	62a3      	str	r3, [r4, #40]	; 0x28
1a002b48:	4b0b      	ldr	r3, [pc, #44]	; (1a002b78 <_fopencookie_r+0xd4>)
1a002b4a:	612f      	str	r7, [r5, #16]
1a002b4c:	2f00      	cmp	r7, #0
1a002b4e:	bf18      	it	ne
1a002b50:	461f      	movne	r7, r3
1a002b52:	9b0e      	ldr	r3, [sp, #56]	; 0x38
1a002b54:	62e7      	str	r7, [r4, #44]	; 0x2c
1a002b56:	616b      	str	r3, [r5, #20]
1a002b58:	4b08      	ldr	r3, [pc, #32]	; (1a002b7c <_fopencookie_r+0xd8>)
1a002b5a:	6323      	str	r3, [r4, #48]	; 0x30
1a002b5c:	6e63      	ldr	r3, [r4, #100]	; 0x64
1a002b5e:	07da      	lsls	r2, r3, #31
1a002b60:	d4b0      	bmi.n	1a002ac4 <_fopencookie_r+0x20>
1a002b62:	05b3      	lsls	r3, r6, #22
1a002b64:	d4ae      	bmi.n	1a002ac4 <_fopencookie_r+0x20>
1a002b66:	6da0      	ldr	r0, [r4, #88]	; 0x58
1a002b68:	f000 f86d 	bl	1a002c46 <__retarget_lock_release_recursive>
1a002b6c:	e7aa      	b.n	1a002ac4 <_fopencookie_r+0x20>
1a002b6e:	bf00      	nop
1a002b70:	1a002a6f 	.word	0x1a002a6f
1a002b74:	1a0029b1 	.word	0x1a0029b1
1a002b78:	1a002a39 	.word	0x1a002a39
1a002b7c:	1a002a01 	.word	0x1a002a01

1a002b80 <fopencookie>:
1a002b80:	b082      	sub	sp, #8
1a002b82:	b530      	push	{r4, r5, lr}
1a002b84:	b085      	sub	sp, #20
1a002b86:	460d      	mov	r5, r1
1a002b88:	a908      	add	r1, sp, #32
1a002b8a:	e881 000c 	stmia.w	r1, {r2, r3}
1a002b8e:	ab09      	add	r3, sp, #36	; 0x24
1a002b90:	4604      	mov	r4, r0
1a002b92:	e893 0007 	ldmia.w	r3, {r0, r1, r2}
1a002b96:	e88d 0007 	stmia.w	sp, {r0, r1, r2}
1a002b9a:	4806      	ldr	r0, [pc, #24]	; (1a002bb4 <fopencookie+0x34>)
1a002b9c:	9b08      	ldr	r3, [sp, #32]
1a002b9e:	6800      	ldr	r0, [r0, #0]
1a002ba0:	462a      	mov	r2, r5
1a002ba2:	4621      	mov	r1, r4
1a002ba4:	f7ff ff7e 	bl	1a002aa4 <_fopencookie_r>
1a002ba8:	b005      	add	sp, #20
1a002baa:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a002bae:	b002      	add	sp, #8
1a002bb0:	4770      	bx	lr
1a002bb2:	bf00      	nop
1a002bb4:	10000088 	.word	0x10000088

1a002bb8 <_fwalk_reent>:
1a002bb8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a002bbc:	4606      	mov	r6, r0
1a002bbe:	4688      	mov	r8, r1
1a002bc0:	f100 0448 	add.w	r4, r0, #72	; 0x48
1a002bc4:	2700      	movs	r7, #0
1a002bc6:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
1a002bca:	f1b9 0901 	subs.w	r9, r9, #1
1a002bce:	d505      	bpl.n	1a002bdc <_fwalk_reent+0x24>
1a002bd0:	6824      	ldr	r4, [r4, #0]
1a002bd2:	2c00      	cmp	r4, #0
1a002bd4:	d1f7      	bne.n	1a002bc6 <_fwalk_reent+0xe>
1a002bd6:	4638      	mov	r0, r7
1a002bd8:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
1a002bdc:	89ab      	ldrh	r3, [r5, #12]
1a002bde:	2b01      	cmp	r3, #1
1a002be0:	d907      	bls.n	1a002bf2 <_fwalk_reent+0x3a>
1a002be2:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
1a002be6:	3301      	adds	r3, #1
1a002be8:	d003      	beq.n	1a002bf2 <_fwalk_reent+0x3a>
1a002bea:	4629      	mov	r1, r5
1a002bec:	4630      	mov	r0, r6
1a002bee:	47c0      	blx	r8
1a002bf0:	4307      	orrs	r7, r0
1a002bf2:	3568      	adds	r5, #104	; 0x68
1a002bf4:	e7e9      	b.n	1a002bca <_fwalk_reent+0x12>
	...

1a002bf8 <__libc_init_array>:
1a002bf8:	b570      	push	{r4, r5, r6, lr}
1a002bfa:	4d0d      	ldr	r5, [pc, #52]	; (1a002c30 <__libc_init_array+0x38>)
1a002bfc:	4c0d      	ldr	r4, [pc, #52]	; (1a002c34 <__libc_init_array+0x3c>)
1a002bfe:	1b64      	subs	r4, r4, r5
1a002c00:	10a4      	asrs	r4, r4, #2
1a002c02:	2600      	movs	r6, #0
1a002c04:	42a6      	cmp	r6, r4
1a002c06:	d109      	bne.n	1a002c1c <__libc_init_array+0x24>
1a002c08:	4d0b      	ldr	r5, [pc, #44]	; (1a002c38 <__libc_init_array+0x40>)
1a002c0a:	4c0c      	ldr	r4, [pc, #48]	; (1a002c3c <__libc_init_array+0x44>)
1a002c0c:	f7fd fcf1 	bl	1a0005f2 <_init>
1a002c10:	1b64      	subs	r4, r4, r5
1a002c12:	10a4      	asrs	r4, r4, #2
1a002c14:	2600      	movs	r6, #0
1a002c16:	42a6      	cmp	r6, r4
1a002c18:	d105      	bne.n	1a002c26 <__libc_init_array+0x2e>
1a002c1a:	bd70      	pop	{r4, r5, r6, pc}
1a002c1c:	f855 3b04 	ldr.w	r3, [r5], #4
1a002c20:	4798      	blx	r3
1a002c22:	3601      	adds	r6, #1
1a002c24:	e7ee      	b.n	1a002c04 <__libc_init_array+0xc>
1a002c26:	f855 3b04 	ldr.w	r3, [r5], #4
1a002c2a:	4798      	blx	r3
1a002c2c:	3601      	adds	r6, #1
1a002c2e:	e7f2      	b.n	1a002c16 <__libc_init_array+0x1e>
1a002c30:	1a000300 	.word	0x1a000300
1a002c34:	1a000300 	.word	0x1a000300
1a002c38:	1a000300 	.word	0x1a000300
1a002c3c:	1a000304 	.word	0x1a000304

1a002c40 <__retarget_lock_init_recursive>:
1a002c40:	4770      	bx	lr

1a002c42 <__retarget_lock_close_recursive>:
1a002c42:	4770      	bx	lr

1a002c44 <__retarget_lock_acquire_recursive>:
1a002c44:	4770      	bx	lr

1a002c46 <__retarget_lock_release_recursive>:
1a002c46:	4770      	bx	lr

1a002c48 <memset>:
1a002c48:	4402      	add	r2, r0
1a002c4a:	4603      	mov	r3, r0
1a002c4c:	4293      	cmp	r3, r2
1a002c4e:	d100      	bne.n	1a002c52 <memset+0xa>
1a002c50:	4770      	bx	lr
1a002c52:	f803 1b01 	strb.w	r1, [r3], #1
1a002c56:	e7f9      	b.n	1a002c4c <memset+0x4>

1a002c58 <_free_r>:
1a002c58:	b537      	push	{r0, r1, r2, r4, r5, lr}
1a002c5a:	2900      	cmp	r1, #0
1a002c5c:	d044      	beq.n	1a002ce8 <_free_r+0x90>
1a002c5e:	f851 3c04 	ldr.w	r3, [r1, #-4]
1a002c62:	9001      	str	r0, [sp, #4]
1a002c64:	2b00      	cmp	r3, #0
1a002c66:	f1a1 0404 	sub.w	r4, r1, #4
1a002c6a:	bfb8      	it	lt
1a002c6c:	18e4      	addlt	r4, r4, r3
1a002c6e:	f000 fbf7 	bl	1a003460 <__malloc_lock>
1a002c72:	4a1e      	ldr	r2, [pc, #120]	; (1a002cec <_free_r+0x94>)
1a002c74:	9801      	ldr	r0, [sp, #4]
1a002c76:	6813      	ldr	r3, [r2, #0]
1a002c78:	b933      	cbnz	r3, 1a002c88 <_free_r+0x30>
1a002c7a:	6063      	str	r3, [r4, #4]
1a002c7c:	6014      	str	r4, [r2, #0]
1a002c7e:	b003      	add	sp, #12
1a002c80:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
1a002c84:	f000 bbf2 	b.w	1a00346c <__malloc_unlock>
1a002c88:	42a3      	cmp	r3, r4
1a002c8a:	d908      	bls.n	1a002c9e <_free_r+0x46>
1a002c8c:	6825      	ldr	r5, [r4, #0]
1a002c8e:	1961      	adds	r1, r4, r5
1a002c90:	428b      	cmp	r3, r1
1a002c92:	bf01      	itttt	eq
1a002c94:	6819      	ldreq	r1, [r3, #0]
1a002c96:	685b      	ldreq	r3, [r3, #4]
1a002c98:	1949      	addeq	r1, r1, r5
1a002c9a:	6021      	streq	r1, [r4, #0]
1a002c9c:	e7ed      	b.n	1a002c7a <_free_r+0x22>
1a002c9e:	461a      	mov	r2, r3
1a002ca0:	685b      	ldr	r3, [r3, #4]
1a002ca2:	b10b      	cbz	r3, 1a002ca8 <_free_r+0x50>
1a002ca4:	42a3      	cmp	r3, r4
1a002ca6:	d9fa      	bls.n	1a002c9e <_free_r+0x46>
1a002ca8:	6811      	ldr	r1, [r2, #0]
1a002caa:	1855      	adds	r5, r2, r1
1a002cac:	42a5      	cmp	r5, r4
1a002cae:	d10b      	bne.n	1a002cc8 <_free_r+0x70>
1a002cb0:	6824      	ldr	r4, [r4, #0]
1a002cb2:	4421      	add	r1, r4
1a002cb4:	1854      	adds	r4, r2, r1
1a002cb6:	42a3      	cmp	r3, r4
1a002cb8:	6011      	str	r1, [r2, #0]
1a002cba:	d1e0      	bne.n	1a002c7e <_free_r+0x26>
1a002cbc:	681c      	ldr	r4, [r3, #0]
1a002cbe:	685b      	ldr	r3, [r3, #4]
1a002cc0:	6053      	str	r3, [r2, #4]
1a002cc2:	4421      	add	r1, r4
1a002cc4:	6011      	str	r1, [r2, #0]
1a002cc6:	e7da      	b.n	1a002c7e <_free_r+0x26>
1a002cc8:	d902      	bls.n	1a002cd0 <_free_r+0x78>
1a002cca:	230c      	movs	r3, #12
1a002ccc:	6003      	str	r3, [r0, #0]
1a002cce:	e7d6      	b.n	1a002c7e <_free_r+0x26>
1a002cd0:	6825      	ldr	r5, [r4, #0]
1a002cd2:	1961      	adds	r1, r4, r5
1a002cd4:	428b      	cmp	r3, r1
1a002cd6:	bf04      	itt	eq
1a002cd8:	6819      	ldreq	r1, [r3, #0]
1a002cda:	685b      	ldreq	r3, [r3, #4]
1a002cdc:	6063      	str	r3, [r4, #4]
1a002cde:	bf04      	itt	eq
1a002ce0:	1949      	addeq	r1, r1, r5
1a002ce2:	6021      	streq	r1, [r4, #0]
1a002ce4:	6054      	str	r4, [r2, #4]
1a002ce6:	e7ca      	b.n	1a002c7e <_free_r+0x26>
1a002ce8:	b003      	add	sp, #12
1a002cea:	bd30      	pop	{r4, r5, pc}
1a002cec:	100001b8 	.word	0x100001b8

1a002cf0 <_malloc_r>:
1a002cf0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002cf2:	1ccd      	adds	r5, r1, #3
1a002cf4:	f025 0503 	bic.w	r5, r5, #3
1a002cf8:	3508      	adds	r5, #8
1a002cfa:	2d0c      	cmp	r5, #12
1a002cfc:	bf38      	it	cc
1a002cfe:	250c      	movcc	r5, #12
1a002d00:	2d00      	cmp	r5, #0
1a002d02:	4606      	mov	r6, r0
1a002d04:	db01      	blt.n	1a002d0a <_malloc_r+0x1a>
1a002d06:	42a9      	cmp	r1, r5
1a002d08:	d903      	bls.n	1a002d12 <_malloc_r+0x22>
1a002d0a:	230c      	movs	r3, #12
1a002d0c:	6033      	str	r3, [r6, #0]
1a002d0e:	2000      	movs	r0, #0
1a002d10:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a002d12:	f000 fba5 	bl	1a003460 <__malloc_lock>
1a002d16:	4921      	ldr	r1, [pc, #132]	; (1a002d9c <_malloc_r+0xac>)
1a002d18:	680a      	ldr	r2, [r1, #0]
1a002d1a:	4614      	mov	r4, r2
1a002d1c:	b99c      	cbnz	r4, 1a002d46 <_malloc_r+0x56>
1a002d1e:	4f20      	ldr	r7, [pc, #128]	; (1a002da0 <_malloc_r+0xb0>)
1a002d20:	683b      	ldr	r3, [r7, #0]
1a002d22:	b923      	cbnz	r3, 1a002d2e <_malloc_r+0x3e>
1a002d24:	4621      	mov	r1, r4
1a002d26:	4630      	mov	r0, r6
1a002d28:	f7fd fcb8 	bl	1a00069c <_sbrk_r>
1a002d2c:	6038      	str	r0, [r7, #0]
1a002d2e:	4629      	mov	r1, r5
1a002d30:	4630      	mov	r0, r6
1a002d32:	f7fd fcb3 	bl	1a00069c <_sbrk_r>
1a002d36:	1c43      	adds	r3, r0, #1
1a002d38:	d123      	bne.n	1a002d82 <_malloc_r+0x92>
1a002d3a:	230c      	movs	r3, #12
1a002d3c:	6033      	str	r3, [r6, #0]
1a002d3e:	4630      	mov	r0, r6
1a002d40:	f000 fb94 	bl	1a00346c <__malloc_unlock>
1a002d44:	e7e3      	b.n	1a002d0e <_malloc_r+0x1e>
1a002d46:	6823      	ldr	r3, [r4, #0]
1a002d48:	1b5b      	subs	r3, r3, r5
1a002d4a:	d417      	bmi.n	1a002d7c <_malloc_r+0x8c>
1a002d4c:	2b0b      	cmp	r3, #11
1a002d4e:	d903      	bls.n	1a002d58 <_malloc_r+0x68>
1a002d50:	6023      	str	r3, [r4, #0]
1a002d52:	441c      	add	r4, r3
1a002d54:	6025      	str	r5, [r4, #0]
1a002d56:	e004      	b.n	1a002d62 <_malloc_r+0x72>
1a002d58:	6863      	ldr	r3, [r4, #4]
1a002d5a:	42a2      	cmp	r2, r4
1a002d5c:	bf0c      	ite	eq
1a002d5e:	600b      	streq	r3, [r1, #0]
1a002d60:	6053      	strne	r3, [r2, #4]
1a002d62:	4630      	mov	r0, r6
1a002d64:	f000 fb82 	bl	1a00346c <__malloc_unlock>
1a002d68:	f104 000b 	add.w	r0, r4, #11
1a002d6c:	1d23      	adds	r3, r4, #4
1a002d6e:	f020 0007 	bic.w	r0, r0, #7
1a002d72:	1ac2      	subs	r2, r0, r3
1a002d74:	d0cc      	beq.n	1a002d10 <_malloc_r+0x20>
1a002d76:	1a1b      	subs	r3, r3, r0
1a002d78:	50a3      	str	r3, [r4, r2]
1a002d7a:	e7c9      	b.n	1a002d10 <_malloc_r+0x20>
1a002d7c:	4622      	mov	r2, r4
1a002d7e:	6864      	ldr	r4, [r4, #4]
1a002d80:	e7cc      	b.n	1a002d1c <_malloc_r+0x2c>
1a002d82:	1cc4      	adds	r4, r0, #3
1a002d84:	f024 0403 	bic.w	r4, r4, #3
1a002d88:	42a0      	cmp	r0, r4
1a002d8a:	d0e3      	beq.n	1a002d54 <_malloc_r+0x64>
1a002d8c:	1a21      	subs	r1, r4, r0
1a002d8e:	4630      	mov	r0, r6
1a002d90:	f7fd fc84 	bl	1a00069c <_sbrk_r>
1a002d94:	3001      	adds	r0, #1
1a002d96:	d1dd      	bne.n	1a002d54 <_malloc_r+0x64>
1a002d98:	e7cf      	b.n	1a002d3a <_malloc_r+0x4a>
1a002d9a:	bf00      	nop
1a002d9c:	100001b8 	.word	0x100001b8
1a002da0:	100001bc 	.word	0x100001bc

1a002da4 <__sfputc_r>:
1a002da4:	6893      	ldr	r3, [r2, #8]
1a002da6:	3b01      	subs	r3, #1
1a002da8:	2b00      	cmp	r3, #0
1a002daa:	b410      	push	{r4}
1a002dac:	6093      	str	r3, [r2, #8]
1a002dae:	da08      	bge.n	1a002dc2 <__sfputc_r+0x1e>
1a002db0:	6994      	ldr	r4, [r2, #24]
1a002db2:	42a3      	cmp	r3, r4
1a002db4:	db01      	blt.n	1a002dba <__sfputc_r+0x16>
1a002db6:	290a      	cmp	r1, #10
1a002db8:	d103      	bne.n	1a002dc2 <__sfputc_r+0x1e>
1a002dba:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002dbe:	f000 b999 	b.w	1a0030f4 <__swbuf_r>
1a002dc2:	6813      	ldr	r3, [r2, #0]
1a002dc4:	1c58      	adds	r0, r3, #1
1a002dc6:	6010      	str	r0, [r2, #0]
1a002dc8:	7019      	strb	r1, [r3, #0]
1a002dca:	4608      	mov	r0, r1
1a002dcc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a002dd0:	4770      	bx	lr

1a002dd2 <__sfputs_r>:
1a002dd2:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a002dd4:	4606      	mov	r6, r0
1a002dd6:	460f      	mov	r7, r1
1a002dd8:	4614      	mov	r4, r2
1a002dda:	18d5      	adds	r5, r2, r3
1a002ddc:	42ac      	cmp	r4, r5
1a002dde:	d101      	bne.n	1a002de4 <__sfputs_r+0x12>
1a002de0:	2000      	movs	r0, #0
1a002de2:	e007      	b.n	1a002df4 <__sfputs_r+0x22>
1a002de4:	f814 1b01 	ldrb.w	r1, [r4], #1
1a002de8:	463a      	mov	r2, r7
1a002dea:	4630      	mov	r0, r6
1a002dec:	f7ff ffda 	bl	1a002da4 <__sfputc_r>
1a002df0:	1c43      	adds	r3, r0, #1
1a002df2:	d1f3      	bne.n	1a002ddc <__sfputs_r+0xa>
1a002df4:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

1a002df8 <_vfiprintf_r>:
1a002df8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a002dfc:	460d      	mov	r5, r1
1a002dfe:	b09d      	sub	sp, #116	; 0x74
1a002e00:	4614      	mov	r4, r2
1a002e02:	4698      	mov	r8, r3
1a002e04:	4606      	mov	r6, r0
1a002e06:	b118      	cbz	r0, 1a002e10 <_vfiprintf_r+0x18>
1a002e08:	6983      	ldr	r3, [r0, #24]
1a002e0a:	b90b      	cbnz	r3, 1a002e10 <_vfiprintf_r+0x18>
1a002e0c:	f7ff fd52 	bl	1a0028b4 <__sinit>
1a002e10:	4b89      	ldr	r3, [pc, #548]	; (1a003038 <_vfiprintf_r+0x240>)
1a002e12:	429d      	cmp	r5, r3
1a002e14:	d11b      	bne.n	1a002e4e <_vfiprintf_r+0x56>
1a002e16:	6875      	ldr	r5, [r6, #4]
1a002e18:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a002e1a:	07d9      	lsls	r1, r3, #31
1a002e1c:	d405      	bmi.n	1a002e2a <_vfiprintf_r+0x32>
1a002e1e:	89ab      	ldrh	r3, [r5, #12]
1a002e20:	059a      	lsls	r2, r3, #22
1a002e22:	d402      	bmi.n	1a002e2a <_vfiprintf_r+0x32>
1a002e24:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a002e26:	f7ff ff0d 	bl	1a002c44 <__retarget_lock_acquire_recursive>
1a002e2a:	89ab      	ldrh	r3, [r5, #12]
1a002e2c:	071b      	lsls	r3, r3, #28
1a002e2e:	d501      	bpl.n	1a002e34 <_vfiprintf_r+0x3c>
1a002e30:	692b      	ldr	r3, [r5, #16]
1a002e32:	b9eb      	cbnz	r3, 1a002e70 <_vfiprintf_r+0x78>
1a002e34:	4629      	mov	r1, r5
1a002e36:	4630      	mov	r0, r6
1a002e38:	f000 f9ae 	bl	1a003198 <__swsetup_r>
1a002e3c:	b1c0      	cbz	r0, 1a002e70 <_vfiprintf_r+0x78>
1a002e3e:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a002e40:	07dc      	lsls	r4, r3, #31
1a002e42:	d50e      	bpl.n	1a002e62 <_vfiprintf_r+0x6a>
1a002e44:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a002e48:	b01d      	add	sp, #116	; 0x74
1a002e4a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a002e4e:	4b7b      	ldr	r3, [pc, #492]	; (1a00303c <_vfiprintf_r+0x244>)
1a002e50:	429d      	cmp	r5, r3
1a002e52:	d101      	bne.n	1a002e58 <_vfiprintf_r+0x60>
1a002e54:	68b5      	ldr	r5, [r6, #8]
1a002e56:	e7df      	b.n	1a002e18 <_vfiprintf_r+0x20>
1a002e58:	4b79      	ldr	r3, [pc, #484]	; (1a003040 <_vfiprintf_r+0x248>)
1a002e5a:	429d      	cmp	r5, r3
1a002e5c:	bf08      	it	eq
1a002e5e:	68f5      	ldreq	r5, [r6, #12]
1a002e60:	e7da      	b.n	1a002e18 <_vfiprintf_r+0x20>
1a002e62:	89ab      	ldrh	r3, [r5, #12]
1a002e64:	0598      	lsls	r0, r3, #22
1a002e66:	d4ed      	bmi.n	1a002e44 <_vfiprintf_r+0x4c>
1a002e68:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a002e6a:	f7ff feec 	bl	1a002c46 <__retarget_lock_release_recursive>
1a002e6e:	e7e9      	b.n	1a002e44 <_vfiprintf_r+0x4c>
1a002e70:	2300      	movs	r3, #0
1a002e72:	9309      	str	r3, [sp, #36]	; 0x24
1a002e74:	2320      	movs	r3, #32
1a002e76:	f88d 3029 	strb.w	r3, [sp, #41]	; 0x29
1a002e7a:	f8cd 800c 	str.w	r8, [sp, #12]
1a002e7e:	2330      	movs	r3, #48	; 0x30
1a002e80:	f8df 81c0 	ldr.w	r8, [pc, #448]	; 1a003044 <_vfiprintf_r+0x24c>
1a002e84:	f88d 302a 	strb.w	r3, [sp, #42]	; 0x2a
1a002e88:	f04f 0901 	mov.w	r9, #1
1a002e8c:	4623      	mov	r3, r4
1a002e8e:	469a      	mov	sl, r3
1a002e90:	f813 2b01 	ldrb.w	r2, [r3], #1
1a002e94:	b10a      	cbz	r2, 1a002e9a <_vfiprintf_r+0xa2>
1a002e96:	2a25      	cmp	r2, #37	; 0x25
1a002e98:	d1f9      	bne.n	1a002e8e <_vfiprintf_r+0x96>
1a002e9a:	ebba 0b04 	subs.w	fp, sl, r4
1a002e9e:	d00b      	beq.n	1a002eb8 <_vfiprintf_r+0xc0>
1a002ea0:	465b      	mov	r3, fp
1a002ea2:	4622      	mov	r2, r4
1a002ea4:	4629      	mov	r1, r5
1a002ea6:	4630      	mov	r0, r6
1a002ea8:	f7ff ff93 	bl	1a002dd2 <__sfputs_r>
1a002eac:	3001      	adds	r0, #1
1a002eae:	f000 80aa 	beq.w	1a003006 <_vfiprintf_r+0x20e>
1a002eb2:	9a09      	ldr	r2, [sp, #36]	; 0x24
1a002eb4:	445a      	add	r2, fp
1a002eb6:	9209      	str	r2, [sp, #36]	; 0x24
1a002eb8:	f89a 3000 	ldrb.w	r3, [sl]
1a002ebc:	2b00      	cmp	r3, #0
1a002ebe:	f000 80a2 	beq.w	1a003006 <_vfiprintf_r+0x20e>
1a002ec2:	2300      	movs	r3, #0
1a002ec4:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
1a002ec8:	e9cd 2305 	strd	r2, r3, [sp, #20]
1a002ecc:	f10a 0a01 	add.w	sl, sl, #1
1a002ed0:	9304      	str	r3, [sp, #16]
1a002ed2:	9307      	str	r3, [sp, #28]
1a002ed4:	f88d 3053 	strb.w	r3, [sp, #83]	; 0x53
1a002ed8:	931a      	str	r3, [sp, #104]	; 0x68
1a002eda:	4654      	mov	r4, sl
1a002edc:	2205      	movs	r2, #5
1a002ede:	f814 1b01 	ldrb.w	r1, [r4], #1
1a002ee2:	4858      	ldr	r0, [pc, #352]	; (1a003044 <_vfiprintf_r+0x24c>)
1a002ee4:	f000 fa6c 	bl	1a0033c0 <memchr>
1a002ee8:	9a04      	ldr	r2, [sp, #16]
1a002eea:	b9d8      	cbnz	r0, 1a002f24 <_vfiprintf_r+0x12c>
1a002eec:	06d1      	lsls	r1, r2, #27
1a002eee:	bf44      	itt	mi
1a002ef0:	2320      	movmi	r3, #32
1a002ef2:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1a002ef6:	0713      	lsls	r3, r2, #28
1a002ef8:	bf44      	itt	mi
1a002efa:	232b      	movmi	r3, #43	; 0x2b
1a002efc:	f88d 3053 	strbmi.w	r3, [sp, #83]	; 0x53
1a002f00:	f89a 3000 	ldrb.w	r3, [sl]
1a002f04:	2b2a      	cmp	r3, #42	; 0x2a
1a002f06:	d015      	beq.n	1a002f34 <_vfiprintf_r+0x13c>
1a002f08:	9a07      	ldr	r2, [sp, #28]
1a002f0a:	4654      	mov	r4, sl
1a002f0c:	2000      	movs	r0, #0
1a002f0e:	f04f 0c0a 	mov.w	ip, #10
1a002f12:	4621      	mov	r1, r4
1a002f14:	f811 3b01 	ldrb.w	r3, [r1], #1
1a002f18:	3b30      	subs	r3, #48	; 0x30
1a002f1a:	2b09      	cmp	r3, #9
1a002f1c:	d94e      	bls.n	1a002fbc <_vfiprintf_r+0x1c4>
1a002f1e:	b1b0      	cbz	r0, 1a002f4e <_vfiprintf_r+0x156>
1a002f20:	9207      	str	r2, [sp, #28]
1a002f22:	e014      	b.n	1a002f4e <_vfiprintf_r+0x156>
1a002f24:	eba0 0308 	sub.w	r3, r0, r8
1a002f28:	fa09 f303 	lsl.w	r3, r9, r3
1a002f2c:	4313      	orrs	r3, r2
1a002f2e:	9304      	str	r3, [sp, #16]
1a002f30:	46a2      	mov	sl, r4
1a002f32:	e7d2      	b.n	1a002eda <_vfiprintf_r+0xe2>
1a002f34:	9b03      	ldr	r3, [sp, #12]
1a002f36:	1d19      	adds	r1, r3, #4
1a002f38:	681b      	ldr	r3, [r3, #0]
1a002f3a:	9103      	str	r1, [sp, #12]
1a002f3c:	2b00      	cmp	r3, #0
1a002f3e:	bfbb      	ittet	lt
1a002f40:	425b      	neglt	r3, r3
1a002f42:	f042 0202 	orrlt.w	r2, r2, #2
1a002f46:	9307      	strge	r3, [sp, #28]
1a002f48:	9307      	strlt	r3, [sp, #28]
1a002f4a:	bfb8      	it	lt
1a002f4c:	9204      	strlt	r2, [sp, #16]
1a002f4e:	7823      	ldrb	r3, [r4, #0]
1a002f50:	2b2e      	cmp	r3, #46	; 0x2e
1a002f52:	d10c      	bne.n	1a002f6e <_vfiprintf_r+0x176>
1a002f54:	7863      	ldrb	r3, [r4, #1]
1a002f56:	2b2a      	cmp	r3, #42	; 0x2a
1a002f58:	d135      	bne.n	1a002fc6 <_vfiprintf_r+0x1ce>
1a002f5a:	9b03      	ldr	r3, [sp, #12]
1a002f5c:	1d1a      	adds	r2, r3, #4
1a002f5e:	681b      	ldr	r3, [r3, #0]
1a002f60:	9203      	str	r2, [sp, #12]
1a002f62:	2b00      	cmp	r3, #0
1a002f64:	bfb8      	it	lt
1a002f66:	f04f 33ff 	movlt.w	r3, #4294967295	; 0xffffffff
1a002f6a:	3402      	adds	r4, #2
1a002f6c:	9305      	str	r3, [sp, #20]
1a002f6e:	f8df a0e4 	ldr.w	sl, [pc, #228]	; 1a003054 <_vfiprintf_r+0x25c>
1a002f72:	7821      	ldrb	r1, [r4, #0]
1a002f74:	2203      	movs	r2, #3
1a002f76:	4650      	mov	r0, sl
1a002f78:	f000 fa22 	bl	1a0033c0 <memchr>
1a002f7c:	b140      	cbz	r0, 1a002f90 <_vfiprintf_r+0x198>
1a002f7e:	2340      	movs	r3, #64	; 0x40
1a002f80:	eba0 000a 	sub.w	r0, r0, sl
1a002f84:	fa03 f000 	lsl.w	r0, r3, r0
1a002f88:	9b04      	ldr	r3, [sp, #16]
1a002f8a:	4303      	orrs	r3, r0
1a002f8c:	3401      	adds	r4, #1
1a002f8e:	9304      	str	r3, [sp, #16]
1a002f90:	f814 1b01 	ldrb.w	r1, [r4], #1
1a002f94:	482c      	ldr	r0, [pc, #176]	; (1a003048 <_vfiprintf_r+0x250>)
1a002f96:	f88d 1028 	strb.w	r1, [sp, #40]	; 0x28
1a002f9a:	2206      	movs	r2, #6
1a002f9c:	f000 fa10 	bl	1a0033c0 <memchr>
1a002fa0:	2800      	cmp	r0, #0
1a002fa2:	d03f      	beq.n	1a003024 <_vfiprintf_r+0x22c>
1a002fa4:	4b29      	ldr	r3, [pc, #164]	; (1a00304c <_vfiprintf_r+0x254>)
1a002fa6:	bb1b      	cbnz	r3, 1a002ff0 <_vfiprintf_r+0x1f8>
1a002fa8:	9b03      	ldr	r3, [sp, #12]
1a002faa:	3307      	adds	r3, #7
1a002fac:	f023 0307 	bic.w	r3, r3, #7
1a002fb0:	3308      	adds	r3, #8
1a002fb2:	9303      	str	r3, [sp, #12]
1a002fb4:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a002fb6:	443b      	add	r3, r7
1a002fb8:	9309      	str	r3, [sp, #36]	; 0x24
1a002fba:	e767      	b.n	1a002e8c <_vfiprintf_r+0x94>
1a002fbc:	fb0c 3202 	mla	r2, ip, r2, r3
1a002fc0:	460c      	mov	r4, r1
1a002fc2:	2001      	movs	r0, #1
1a002fc4:	e7a5      	b.n	1a002f12 <_vfiprintf_r+0x11a>
1a002fc6:	2300      	movs	r3, #0
1a002fc8:	3401      	adds	r4, #1
1a002fca:	9305      	str	r3, [sp, #20]
1a002fcc:	4619      	mov	r1, r3
1a002fce:	f04f 0c0a 	mov.w	ip, #10
1a002fd2:	4620      	mov	r0, r4
1a002fd4:	f810 2b01 	ldrb.w	r2, [r0], #1
1a002fd8:	3a30      	subs	r2, #48	; 0x30
1a002fda:	2a09      	cmp	r2, #9
1a002fdc:	d903      	bls.n	1a002fe6 <_vfiprintf_r+0x1ee>
1a002fde:	2b00      	cmp	r3, #0
1a002fe0:	d0c5      	beq.n	1a002f6e <_vfiprintf_r+0x176>
1a002fe2:	9105      	str	r1, [sp, #20]
1a002fe4:	e7c3      	b.n	1a002f6e <_vfiprintf_r+0x176>
1a002fe6:	fb0c 2101 	mla	r1, ip, r1, r2
1a002fea:	4604      	mov	r4, r0
1a002fec:	2301      	movs	r3, #1
1a002fee:	e7f0      	b.n	1a002fd2 <_vfiprintf_r+0x1da>
1a002ff0:	ab03      	add	r3, sp, #12
1a002ff2:	9300      	str	r3, [sp, #0]
1a002ff4:	462a      	mov	r2, r5
1a002ff6:	4b16      	ldr	r3, [pc, #88]	; (1a003050 <_vfiprintf_r+0x258>)
1a002ff8:	a904      	add	r1, sp, #16
1a002ffa:	4630      	mov	r0, r6
1a002ffc:	f3af 8000 	nop.w
1a003000:	4607      	mov	r7, r0
1a003002:	1c78      	adds	r0, r7, #1
1a003004:	d1d6      	bne.n	1a002fb4 <_vfiprintf_r+0x1bc>
1a003006:	6e6b      	ldr	r3, [r5, #100]	; 0x64
1a003008:	07d9      	lsls	r1, r3, #31
1a00300a:	d405      	bmi.n	1a003018 <_vfiprintf_r+0x220>
1a00300c:	89ab      	ldrh	r3, [r5, #12]
1a00300e:	059a      	lsls	r2, r3, #22
1a003010:	d402      	bmi.n	1a003018 <_vfiprintf_r+0x220>
1a003012:	6da8      	ldr	r0, [r5, #88]	; 0x58
1a003014:	f7ff fe17 	bl	1a002c46 <__retarget_lock_release_recursive>
1a003018:	89ab      	ldrh	r3, [r5, #12]
1a00301a:	065b      	lsls	r3, r3, #25
1a00301c:	f53f af12 	bmi.w	1a002e44 <_vfiprintf_r+0x4c>
1a003020:	9809      	ldr	r0, [sp, #36]	; 0x24
1a003022:	e711      	b.n	1a002e48 <_vfiprintf_r+0x50>
1a003024:	ab03      	add	r3, sp, #12
1a003026:	9300      	str	r3, [sp, #0]
1a003028:	462a      	mov	r2, r5
1a00302a:	4b09      	ldr	r3, [pc, #36]	; (1a003050 <_vfiprintf_r+0x258>)
1a00302c:	a904      	add	r1, sp, #16
1a00302e:	4630      	mov	r0, r6
1a003030:	f000 fa90 	bl	1a003554 <_printf_i>
1a003034:	e7e4      	b.n	1a003000 <_vfiprintf_r+0x208>
1a003036:	bf00      	nop
1a003038:	1a003b60 	.word	0x1a003b60
1a00303c:	1a003b80 	.word	0x1a003b80
1a003040:	1a003b40 	.word	0x1a003b40
1a003044:	1a003ba4 	.word	0x1a003ba4
1a003048:	1a003bae 	.word	0x1a003bae
1a00304c:	00000000 	.word	0x00000000
1a003050:	1a002dd3 	.word	0x1a002dd3
1a003054:	1a003baa 	.word	0x1a003baa

1a003058 <vfiprintf>:
1a003058:	4613      	mov	r3, r2
1a00305a:	460a      	mov	r2, r1
1a00305c:	4601      	mov	r1, r0
1a00305e:	4802      	ldr	r0, [pc, #8]	; (1a003068 <vfiprintf+0x10>)
1a003060:	6800      	ldr	r0, [r0, #0]
1a003062:	f7ff bec9 	b.w	1a002df8 <_vfiprintf_r>
1a003066:	bf00      	nop
1a003068:	10000088 	.word	0x10000088

1a00306c <__sread>:
1a00306c:	b510      	push	{r4, lr}
1a00306e:	460c      	mov	r4, r1
1a003070:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a003074:	f7fd fad6 	bl	1a000624 <_read_r>
1a003078:	2800      	cmp	r0, #0
1a00307a:	bfab      	itete	ge
1a00307c:	6d63      	ldrge	r3, [r4, #84]	; 0x54
1a00307e:	89a3      	ldrhlt	r3, [r4, #12]
1a003080:	181b      	addge	r3, r3, r0
1a003082:	f423 5380 	biclt.w	r3, r3, #4096	; 0x1000
1a003086:	bfac      	ite	ge
1a003088:	6563      	strge	r3, [r4, #84]	; 0x54
1a00308a:	81a3      	strhlt	r3, [r4, #12]
1a00308c:	bd10      	pop	{r4, pc}

1a00308e <__swrite>:
1a00308e:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a003092:	461f      	mov	r7, r3
1a003094:	898b      	ldrh	r3, [r1, #12]
1a003096:	05db      	lsls	r3, r3, #23
1a003098:	4605      	mov	r5, r0
1a00309a:	460c      	mov	r4, r1
1a00309c:	4616      	mov	r6, r2
1a00309e:	d505      	bpl.n	1a0030ac <__swrite+0x1e>
1a0030a0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0030a4:	2302      	movs	r3, #2
1a0030a6:	2200      	movs	r2, #0
1a0030a8:	f7fd fab7 	bl	1a00061a <_lseek_r>
1a0030ac:	89a3      	ldrh	r3, [r4, #12]
1a0030ae:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a0030b2:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
1a0030b6:	81a3      	strh	r3, [r4, #12]
1a0030b8:	4632      	mov	r2, r6
1a0030ba:	463b      	mov	r3, r7
1a0030bc:	4628      	mov	r0, r5
1a0030be:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
1a0030c2:	f7fd bad6 	b.w	1a000672 <_write_r>

1a0030c6 <__sseek>:
1a0030c6:	b510      	push	{r4, lr}
1a0030c8:	460c      	mov	r4, r1
1a0030ca:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0030ce:	f7fd faa4 	bl	1a00061a <_lseek_r>
1a0030d2:	1c43      	adds	r3, r0, #1
1a0030d4:	89a3      	ldrh	r3, [r4, #12]
1a0030d6:	bf15      	itete	ne
1a0030d8:	6560      	strne	r0, [r4, #84]	; 0x54
1a0030da:	f423 5380 	biceq.w	r3, r3, #4096	; 0x1000
1a0030de:	f443 5380 	orrne.w	r3, r3, #4096	; 0x1000
1a0030e2:	81a3      	strheq	r3, [r4, #12]
1a0030e4:	bf18      	it	ne
1a0030e6:	81a3      	strhne	r3, [r4, #12]
1a0030e8:	bd10      	pop	{r4, pc}

1a0030ea <__sclose>:
1a0030ea:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0030ee:	f7fd ba81 	b.w	1a0005f4 <_close_r>
	...

1a0030f4 <__swbuf_r>:
1a0030f4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
1a0030f6:	460e      	mov	r6, r1
1a0030f8:	4614      	mov	r4, r2
1a0030fa:	4605      	mov	r5, r0
1a0030fc:	b118      	cbz	r0, 1a003106 <__swbuf_r+0x12>
1a0030fe:	6983      	ldr	r3, [r0, #24]
1a003100:	b90b      	cbnz	r3, 1a003106 <__swbuf_r+0x12>
1a003102:	f7ff fbd7 	bl	1a0028b4 <__sinit>
1a003106:	4b21      	ldr	r3, [pc, #132]	; (1a00318c <__swbuf_r+0x98>)
1a003108:	429c      	cmp	r4, r3
1a00310a:	d12b      	bne.n	1a003164 <__swbuf_r+0x70>
1a00310c:	686c      	ldr	r4, [r5, #4]
1a00310e:	69a3      	ldr	r3, [r4, #24]
1a003110:	60a3      	str	r3, [r4, #8]
1a003112:	89a3      	ldrh	r3, [r4, #12]
1a003114:	071a      	lsls	r2, r3, #28
1a003116:	d52f      	bpl.n	1a003178 <__swbuf_r+0x84>
1a003118:	6923      	ldr	r3, [r4, #16]
1a00311a:	b36b      	cbz	r3, 1a003178 <__swbuf_r+0x84>
1a00311c:	6923      	ldr	r3, [r4, #16]
1a00311e:	6820      	ldr	r0, [r4, #0]
1a003120:	1ac0      	subs	r0, r0, r3
1a003122:	6963      	ldr	r3, [r4, #20]
1a003124:	b2f6      	uxtb	r6, r6
1a003126:	4283      	cmp	r3, r0
1a003128:	4637      	mov	r7, r6
1a00312a:	dc04      	bgt.n	1a003136 <__swbuf_r+0x42>
1a00312c:	4621      	mov	r1, r4
1a00312e:	4628      	mov	r0, r5
1a003130:	f7ff fb2c 	bl	1a00278c <_fflush_r>
1a003134:	bb30      	cbnz	r0, 1a003184 <__swbuf_r+0x90>
1a003136:	68a3      	ldr	r3, [r4, #8]
1a003138:	3b01      	subs	r3, #1
1a00313a:	60a3      	str	r3, [r4, #8]
1a00313c:	6823      	ldr	r3, [r4, #0]
1a00313e:	1c5a      	adds	r2, r3, #1
1a003140:	6022      	str	r2, [r4, #0]
1a003142:	701e      	strb	r6, [r3, #0]
1a003144:	6963      	ldr	r3, [r4, #20]
1a003146:	3001      	adds	r0, #1
1a003148:	4283      	cmp	r3, r0
1a00314a:	d004      	beq.n	1a003156 <__swbuf_r+0x62>
1a00314c:	89a3      	ldrh	r3, [r4, #12]
1a00314e:	07db      	lsls	r3, r3, #31
1a003150:	d506      	bpl.n	1a003160 <__swbuf_r+0x6c>
1a003152:	2e0a      	cmp	r6, #10
1a003154:	d104      	bne.n	1a003160 <__swbuf_r+0x6c>
1a003156:	4621      	mov	r1, r4
1a003158:	4628      	mov	r0, r5
1a00315a:	f7ff fb17 	bl	1a00278c <_fflush_r>
1a00315e:	b988      	cbnz	r0, 1a003184 <__swbuf_r+0x90>
1a003160:	4638      	mov	r0, r7
1a003162:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
1a003164:	4b0a      	ldr	r3, [pc, #40]	; (1a003190 <__swbuf_r+0x9c>)
1a003166:	429c      	cmp	r4, r3
1a003168:	d101      	bne.n	1a00316e <__swbuf_r+0x7a>
1a00316a:	68ac      	ldr	r4, [r5, #8]
1a00316c:	e7cf      	b.n	1a00310e <__swbuf_r+0x1a>
1a00316e:	4b09      	ldr	r3, [pc, #36]	; (1a003194 <__swbuf_r+0xa0>)
1a003170:	429c      	cmp	r4, r3
1a003172:	bf08      	it	eq
1a003174:	68ec      	ldreq	r4, [r5, #12]
1a003176:	e7ca      	b.n	1a00310e <__swbuf_r+0x1a>
1a003178:	4621      	mov	r1, r4
1a00317a:	4628      	mov	r0, r5
1a00317c:	f000 f80c 	bl	1a003198 <__swsetup_r>
1a003180:	2800      	cmp	r0, #0
1a003182:	d0cb      	beq.n	1a00311c <__swbuf_r+0x28>
1a003184:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff
1a003188:	e7ea      	b.n	1a003160 <__swbuf_r+0x6c>
1a00318a:	bf00      	nop
1a00318c:	1a003b60 	.word	0x1a003b60
1a003190:	1a003b80 	.word	0x1a003b80
1a003194:	1a003b40 	.word	0x1a003b40

1a003198 <__swsetup_r>:
1a003198:	4b32      	ldr	r3, [pc, #200]	; (1a003264 <__swsetup_r+0xcc>)
1a00319a:	b570      	push	{r4, r5, r6, lr}
1a00319c:	681d      	ldr	r5, [r3, #0]
1a00319e:	4606      	mov	r6, r0
1a0031a0:	460c      	mov	r4, r1
1a0031a2:	b125      	cbz	r5, 1a0031ae <__swsetup_r+0x16>
1a0031a4:	69ab      	ldr	r3, [r5, #24]
1a0031a6:	b913      	cbnz	r3, 1a0031ae <__swsetup_r+0x16>
1a0031a8:	4628      	mov	r0, r5
1a0031aa:	f7ff fb83 	bl	1a0028b4 <__sinit>
1a0031ae:	4b2e      	ldr	r3, [pc, #184]	; (1a003268 <__swsetup_r+0xd0>)
1a0031b0:	429c      	cmp	r4, r3
1a0031b2:	d10f      	bne.n	1a0031d4 <__swsetup_r+0x3c>
1a0031b4:	686c      	ldr	r4, [r5, #4]
1a0031b6:	89a3      	ldrh	r3, [r4, #12]
1a0031b8:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a0031bc:	0719      	lsls	r1, r3, #28
1a0031be:	d42c      	bmi.n	1a00321a <__swsetup_r+0x82>
1a0031c0:	06dd      	lsls	r5, r3, #27
1a0031c2:	d411      	bmi.n	1a0031e8 <__swsetup_r+0x50>
1a0031c4:	2309      	movs	r3, #9
1a0031c6:	6033      	str	r3, [r6, #0]
1a0031c8:	f042 0340 	orr.w	r3, r2, #64	; 0x40
1a0031cc:	81a3      	strh	r3, [r4, #12]
1a0031ce:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0031d2:	e03e      	b.n	1a003252 <__swsetup_r+0xba>
1a0031d4:	4b25      	ldr	r3, [pc, #148]	; (1a00326c <__swsetup_r+0xd4>)
1a0031d6:	429c      	cmp	r4, r3
1a0031d8:	d101      	bne.n	1a0031de <__swsetup_r+0x46>
1a0031da:	68ac      	ldr	r4, [r5, #8]
1a0031dc:	e7eb      	b.n	1a0031b6 <__swsetup_r+0x1e>
1a0031de:	4b24      	ldr	r3, [pc, #144]	; (1a003270 <__swsetup_r+0xd8>)
1a0031e0:	429c      	cmp	r4, r3
1a0031e2:	bf08      	it	eq
1a0031e4:	68ec      	ldreq	r4, [r5, #12]
1a0031e6:	e7e6      	b.n	1a0031b6 <__swsetup_r+0x1e>
1a0031e8:	0758      	lsls	r0, r3, #29
1a0031ea:	d512      	bpl.n	1a003212 <__swsetup_r+0x7a>
1a0031ec:	6b61      	ldr	r1, [r4, #52]	; 0x34
1a0031ee:	b141      	cbz	r1, 1a003202 <__swsetup_r+0x6a>
1a0031f0:	f104 0344 	add.w	r3, r4, #68	; 0x44
1a0031f4:	4299      	cmp	r1, r3
1a0031f6:	d002      	beq.n	1a0031fe <__swsetup_r+0x66>
1a0031f8:	4630      	mov	r0, r6
1a0031fa:	f7ff fd2d 	bl	1a002c58 <_free_r>
1a0031fe:	2300      	movs	r3, #0
1a003200:	6363      	str	r3, [r4, #52]	; 0x34
1a003202:	89a3      	ldrh	r3, [r4, #12]
1a003204:	f023 0324 	bic.w	r3, r3, #36	; 0x24
1a003208:	81a3      	strh	r3, [r4, #12]
1a00320a:	2300      	movs	r3, #0
1a00320c:	6063      	str	r3, [r4, #4]
1a00320e:	6923      	ldr	r3, [r4, #16]
1a003210:	6023      	str	r3, [r4, #0]
1a003212:	89a3      	ldrh	r3, [r4, #12]
1a003214:	f043 0308 	orr.w	r3, r3, #8
1a003218:	81a3      	strh	r3, [r4, #12]
1a00321a:	6923      	ldr	r3, [r4, #16]
1a00321c:	b94b      	cbnz	r3, 1a003232 <__swsetup_r+0x9a>
1a00321e:	89a3      	ldrh	r3, [r4, #12]
1a003220:	f403 7320 	and.w	r3, r3, #640	; 0x280
1a003224:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
1a003228:	d003      	beq.n	1a003232 <__swsetup_r+0x9a>
1a00322a:	4621      	mov	r1, r4
1a00322c:	4630      	mov	r0, r6
1a00322e:	f000 f883 	bl	1a003338 <__smakebuf_r>
1a003232:	89a0      	ldrh	r0, [r4, #12]
1a003234:	f9b4 200c 	ldrsh.w	r2, [r4, #12]
1a003238:	f010 0301 	ands.w	r3, r0, #1
1a00323c:	d00a      	beq.n	1a003254 <__swsetup_r+0xbc>
1a00323e:	2300      	movs	r3, #0
1a003240:	60a3      	str	r3, [r4, #8]
1a003242:	6963      	ldr	r3, [r4, #20]
1a003244:	425b      	negs	r3, r3
1a003246:	61a3      	str	r3, [r4, #24]
1a003248:	6923      	ldr	r3, [r4, #16]
1a00324a:	b943      	cbnz	r3, 1a00325e <__swsetup_r+0xc6>
1a00324c:	f010 0080 	ands.w	r0, r0, #128	; 0x80
1a003250:	d1ba      	bne.n	1a0031c8 <__swsetup_r+0x30>
1a003252:	bd70      	pop	{r4, r5, r6, pc}
1a003254:	0781      	lsls	r1, r0, #30
1a003256:	bf58      	it	pl
1a003258:	6963      	ldrpl	r3, [r4, #20]
1a00325a:	60a3      	str	r3, [r4, #8]
1a00325c:	e7f4      	b.n	1a003248 <__swsetup_r+0xb0>
1a00325e:	2000      	movs	r0, #0
1a003260:	e7f7      	b.n	1a003252 <__swsetup_r+0xba>
1a003262:	bf00      	nop
1a003264:	10000088 	.word	0x10000088
1a003268:	1a003b60 	.word	0x1a003b60
1a00326c:	1a003b80 	.word	0x1a003b80
1a003270:	1a003b40 	.word	0x1a003b40

1a003274 <__errno>:
1a003274:	4b01      	ldr	r3, [pc, #4]	; (1a00327c <__errno+0x8>)
1a003276:	6818      	ldr	r0, [r3, #0]
1a003278:	4770      	bx	lr
1a00327a:	bf00      	nop
1a00327c:	10000088 	.word	0x10000088

1a003280 <__sflags>:
1a003280:	780b      	ldrb	r3, [r1, #0]
1a003282:	2b72      	cmp	r3, #114	; 0x72
1a003284:	b530      	push	{r4, r5, lr}
1a003286:	d022      	beq.n	1a0032ce <__sflags+0x4e>
1a003288:	2b77      	cmp	r3, #119	; 0x77
1a00328a:	d024      	beq.n	1a0032d6 <__sflags+0x56>
1a00328c:	2b61      	cmp	r3, #97	; 0x61
1a00328e:	d027      	beq.n	1a0032e0 <__sflags+0x60>
1a003290:	2316      	movs	r3, #22
1a003292:	6003      	str	r3, [r0, #0]
1a003294:	2000      	movs	r0, #0
1a003296:	bd30      	pop	{r4, r5, pc}
1a003298:	2d62      	cmp	r5, #98	; 0x62
1a00329a:	d012      	beq.n	1a0032c2 <__sflags+0x42>
1a00329c:	2d78      	cmp	r5, #120	; 0x78
1a00329e:	d013      	beq.n	1a0032c8 <__sflags+0x48>
1a0032a0:	2d2b      	cmp	r5, #43	; 0x2b
1a0032a2:	d107      	bne.n	1a0032b4 <__sflags+0x34>
1a0032a4:	f020 001c 	bic.w	r0, r0, #28
1a0032a8:	f023 0303 	bic.w	r3, r3, #3
1a0032ac:	f040 0010 	orr.w	r0, r0, #16
1a0032b0:	f043 0302 	orr.w	r3, r3, #2
1a0032b4:	f811 5f01 	ldrb.w	r5, [r1, #1]!
1a0032b8:	2d00      	cmp	r5, #0
1a0032ba:	d1ed      	bne.n	1a003298 <__sflags+0x18>
1a0032bc:	4323      	orrs	r3, r4
1a0032be:	6013      	str	r3, [r2, #0]
1a0032c0:	e7e9      	b.n	1a003296 <__sflags+0x16>
1a0032c2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a0032c6:	e7f5      	b.n	1a0032b4 <__sflags+0x34>
1a0032c8:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0032cc:	e7f2      	b.n	1a0032b4 <__sflags+0x34>
1a0032ce:	2400      	movs	r4, #0
1a0032d0:	4623      	mov	r3, r4
1a0032d2:	2004      	movs	r0, #4
1a0032d4:	e7ee      	b.n	1a0032b4 <__sflags+0x34>
1a0032d6:	f44f 64c0 	mov.w	r4, #1536	; 0x600
1a0032da:	2301      	movs	r3, #1
1a0032dc:	2008      	movs	r0, #8
1a0032de:	e7e9      	b.n	1a0032b4 <__sflags+0x34>
1a0032e0:	f44f 7402 	mov.w	r4, #520	; 0x208
1a0032e4:	2301      	movs	r3, #1
1a0032e6:	f44f 7084 	mov.w	r0, #264	; 0x108
1a0032ea:	e7e3      	b.n	1a0032b4 <__sflags+0x34>

1a0032ec <__swhatbuf_r>:
1a0032ec:	b570      	push	{r4, r5, r6, lr}
1a0032ee:	460e      	mov	r6, r1
1a0032f0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
1a0032f4:	2900      	cmp	r1, #0
1a0032f6:	b096      	sub	sp, #88	; 0x58
1a0032f8:	4614      	mov	r4, r2
1a0032fa:	461d      	mov	r5, r3
1a0032fc:	da08      	bge.n	1a003310 <__swhatbuf_r+0x24>
1a0032fe:	f9b6 300c 	ldrsh.w	r3, [r6, #12]
1a003302:	2200      	movs	r2, #0
1a003304:	602a      	str	r2, [r5, #0]
1a003306:	061a      	lsls	r2, r3, #24
1a003308:	d410      	bmi.n	1a00332c <__swhatbuf_r+0x40>
1a00330a:	f44f 6380 	mov.w	r3, #1024	; 0x400
1a00330e:	e00e      	b.n	1a00332e <__swhatbuf_r+0x42>
1a003310:	466a      	mov	r2, sp
1a003312:	f7fd f974 	bl	1a0005fe <_fstat_r>
1a003316:	2800      	cmp	r0, #0
1a003318:	dbf1      	blt.n	1a0032fe <__swhatbuf_r+0x12>
1a00331a:	9a01      	ldr	r2, [sp, #4]
1a00331c:	f402 4270 	and.w	r2, r2, #61440	; 0xf000
1a003320:	f5a2 5300 	sub.w	r3, r2, #8192	; 0x2000
1a003324:	425a      	negs	r2, r3
1a003326:	415a      	adcs	r2, r3
1a003328:	602a      	str	r2, [r5, #0]
1a00332a:	e7ee      	b.n	1a00330a <__swhatbuf_r+0x1e>
1a00332c:	2340      	movs	r3, #64	; 0x40
1a00332e:	2000      	movs	r0, #0
1a003330:	6023      	str	r3, [r4, #0]
1a003332:	b016      	add	sp, #88	; 0x58
1a003334:	bd70      	pop	{r4, r5, r6, pc}
	...

1a003338 <__smakebuf_r>:
1a003338:	898b      	ldrh	r3, [r1, #12]
1a00333a:	b573      	push	{r0, r1, r4, r5, r6, lr}
1a00333c:	079d      	lsls	r5, r3, #30
1a00333e:	4606      	mov	r6, r0
1a003340:	460c      	mov	r4, r1
1a003342:	d507      	bpl.n	1a003354 <__smakebuf_r+0x1c>
1a003344:	f104 0347 	add.w	r3, r4, #71	; 0x47
1a003348:	6023      	str	r3, [r4, #0]
1a00334a:	6123      	str	r3, [r4, #16]
1a00334c:	2301      	movs	r3, #1
1a00334e:	6163      	str	r3, [r4, #20]
1a003350:	b002      	add	sp, #8
1a003352:	bd70      	pop	{r4, r5, r6, pc}
1a003354:	ab01      	add	r3, sp, #4
1a003356:	466a      	mov	r2, sp
1a003358:	f7ff ffc8 	bl	1a0032ec <__swhatbuf_r>
1a00335c:	9900      	ldr	r1, [sp, #0]
1a00335e:	4605      	mov	r5, r0
1a003360:	4630      	mov	r0, r6
1a003362:	f7ff fcc5 	bl	1a002cf0 <_malloc_r>
1a003366:	b948      	cbnz	r0, 1a00337c <__smakebuf_r+0x44>
1a003368:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
1a00336c:	059a      	lsls	r2, r3, #22
1a00336e:	d4ef      	bmi.n	1a003350 <__smakebuf_r+0x18>
1a003370:	f023 0303 	bic.w	r3, r3, #3
1a003374:	f043 0302 	orr.w	r3, r3, #2
1a003378:	81a3      	strh	r3, [r4, #12]
1a00337a:	e7e3      	b.n	1a003344 <__smakebuf_r+0xc>
1a00337c:	4b0d      	ldr	r3, [pc, #52]	; (1a0033b4 <__smakebuf_r+0x7c>)
1a00337e:	62b3      	str	r3, [r6, #40]	; 0x28
1a003380:	89a3      	ldrh	r3, [r4, #12]
1a003382:	6020      	str	r0, [r4, #0]
1a003384:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a003388:	81a3      	strh	r3, [r4, #12]
1a00338a:	9b00      	ldr	r3, [sp, #0]
1a00338c:	6163      	str	r3, [r4, #20]
1a00338e:	9b01      	ldr	r3, [sp, #4]
1a003390:	6120      	str	r0, [r4, #16]
1a003392:	b15b      	cbz	r3, 1a0033ac <__smakebuf_r+0x74>
1a003394:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
1a003398:	4630      	mov	r0, r6
1a00339a:	f7fd f935 	bl	1a000608 <_isatty_r>
1a00339e:	b128      	cbz	r0, 1a0033ac <__smakebuf_r+0x74>
1a0033a0:	89a3      	ldrh	r3, [r4, #12]
1a0033a2:	f023 0303 	bic.w	r3, r3, #3
1a0033a6:	f043 0301 	orr.w	r3, r3, #1
1a0033aa:	81a3      	strh	r3, [r4, #12]
1a0033ac:	89a0      	ldrh	r0, [r4, #12]
1a0033ae:	4305      	orrs	r5, r0
1a0033b0:	81a5      	strh	r5, [r4, #12]
1a0033b2:	e7cd      	b.n	1a003350 <__smakebuf_r+0x18>
1a0033b4:	1a00284d 	.word	0x1a00284d
	...

1a0033c0 <memchr>:
1a0033c0:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a0033c4:	2a10      	cmp	r2, #16
1a0033c6:	db2b      	blt.n	1a003420 <memchr+0x60>
1a0033c8:	f010 0f07 	tst.w	r0, #7
1a0033cc:	d008      	beq.n	1a0033e0 <memchr+0x20>
1a0033ce:	f810 3b01 	ldrb.w	r3, [r0], #1
1a0033d2:	3a01      	subs	r2, #1
1a0033d4:	428b      	cmp	r3, r1
1a0033d6:	d02d      	beq.n	1a003434 <memchr+0x74>
1a0033d8:	f010 0f07 	tst.w	r0, #7
1a0033dc:	b342      	cbz	r2, 1a003430 <memchr+0x70>
1a0033de:	d1f6      	bne.n	1a0033ce <memchr+0xe>
1a0033e0:	b4f0      	push	{r4, r5, r6, r7}
1a0033e2:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
1a0033e6:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
1a0033ea:	f022 0407 	bic.w	r4, r2, #7
1a0033ee:	f07f 0700 	mvns.w	r7, #0
1a0033f2:	2300      	movs	r3, #0
1a0033f4:	e8f0 5602 	ldrd	r5, r6, [r0], #8
1a0033f8:	3c08      	subs	r4, #8
1a0033fa:	ea85 0501 	eor.w	r5, r5, r1
1a0033fe:	ea86 0601 	eor.w	r6, r6, r1
1a003402:	fa85 f547 	uadd8	r5, r5, r7
1a003406:	faa3 f587 	sel	r5, r3, r7
1a00340a:	fa86 f647 	uadd8	r6, r6, r7
1a00340e:	faa5 f687 	sel	r6, r5, r7
1a003412:	b98e      	cbnz	r6, 1a003438 <memchr+0x78>
1a003414:	d1ee      	bne.n	1a0033f4 <memchr+0x34>
1a003416:	bcf0      	pop	{r4, r5, r6, r7}
1a003418:	f001 01ff 	and.w	r1, r1, #255	; 0xff
1a00341c:	f002 0207 	and.w	r2, r2, #7
1a003420:	b132      	cbz	r2, 1a003430 <memchr+0x70>
1a003422:	f810 3b01 	ldrb.w	r3, [r0], #1
1a003426:	3a01      	subs	r2, #1
1a003428:	ea83 0301 	eor.w	r3, r3, r1
1a00342c:	b113      	cbz	r3, 1a003434 <memchr+0x74>
1a00342e:	d1f8      	bne.n	1a003422 <memchr+0x62>
1a003430:	2000      	movs	r0, #0
1a003432:	4770      	bx	lr
1a003434:	3801      	subs	r0, #1
1a003436:	4770      	bx	lr
1a003438:	2d00      	cmp	r5, #0
1a00343a:	bf06      	itte	eq
1a00343c:	4635      	moveq	r5, r6
1a00343e:	3803      	subeq	r0, #3
1a003440:	3807      	subne	r0, #7
1a003442:	f015 0f01 	tst.w	r5, #1
1a003446:	d107      	bne.n	1a003458 <memchr+0x98>
1a003448:	3001      	adds	r0, #1
1a00344a:	f415 7f80 	tst.w	r5, #256	; 0x100
1a00344e:	bf02      	ittt	eq
1a003450:	3001      	addeq	r0, #1
1a003452:	f415 3fc0 	tsteq.w	r5, #98304	; 0x18000
1a003456:	3001      	addeq	r0, #1
1a003458:	bcf0      	pop	{r4, r5, r6, r7}
1a00345a:	3801      	subs	r0, #1
1a00345c:	4770      	bx	lr
1a00345e:	bf00      	nop

1a003460 <__malloc_lock>:
1a003460:	4801      	ldr	r0, [pc, #4]	; (1a003468 <__malloc_lock+0x8>)
1a003462:	f7ff bbef 	b.w	1a002c44 <__retarget_lock_acquire_recursive>
1a003466:	bf00      	nop
1a003468:	100001b4 	.word	0x100001b4

1a00346c <__malloc_unlock>:
1a00346c:	4801      	ldr	r0, [pc, #4]	; (1a003474 <__malloc_unlock+0x8>)
1a00346e:	f7ff bbea 	b.w	1a002c46 <__retarget_lock_release_recursive>
1a003472:	bf00      	nop
1a003474:	100001b4 	.word	0x100001b4

1a003478 <_printf_common>:
1a003478:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a00347c:	4616      	mov	r6, r2
1a00347e:	4699      	mov	r9, r3
1a003480:	688a      	ldr	r2, [r1, #8]
1a003482:	690b      	ldr	r3, [r1, #16]
1a003484:	f8dd 8020 	ldr.w	r8, [sp, #32]
1a003488:	4293      	cmp	r3, r2
1a00348a:	bfb8      	it	lt
1a00348c:	4613      	movlt	r3, r2
1a00348e:	6033      	str	r3, [r6, #0]
1a003490:	f891 2043 	ldrb.w	r2, [r1, #67]	; 0x43
1a003494:	4607      	mov	r7, r0
1a003496:	460c      	mov	r4, r1
1a003498:	b10a      	cbz	r2, 1a00349e <_printf_common+0x26>
1a00349a:	3301      	adds	r3, #1
1a00349c:	6033      	str	r3, [r6, #0]
1a00349e:	6823      	ldr	r3, [r4, #0]
1a0034a0:	0699      	lsls	r1, r3, #26
1a0034a2:	bf42      	ittt	mi
1a0034a4:	6833      	ldrmi	r3, [r6, #0]
1a0034a6:	3302      	addmi	r3, #2
1a0034a8:	6033      	strmi	r3, [r6, #0]
1a0034aa:	6825      	ldr	r5, [r4, #0]
1a0034ac:	f015 0506 	ands.w	r5, r5, #6
1a0034b0:	d106      	bne.n	1a0034c0 <_printf_common+0x48>
1a0034b2:	f104 0a19 	add.w	sl, r4, #25
1a0034b6:	68e3      	ldr	r3, [r4, #12]
1a0034b8:	6832      	ldr	r2, [r6, #0]
1a0034ba:	1a9b      	subs	r3, r3, r2
1a0034bc:	42ab      	cmp	r3, r5
1a0034be:	dc26      	bgt.n	1a00350e <_printf_common+0x96>
1a0034c0:	f894 2043 	ldrb.w	r2, [r4, #67]	; 0x43
1a0034c4:	1e13      	subs	r3, r2, #0
1a0034c6:	6822      	ldr	r2, [r4, #0]
1a0034c8:	bf18      	it	ne
1a0034ca:	2301      	movne	r3, #1
1a0034cc:	0692      	lsls	r2, r2, #26
1a0034ce:	d42b      	bmi.n	1a003528 <_printf_common+0xb0>
1a0034d0:	f104 0243 	add.w	r2, r4, #67	; 0x43
1a0034d4:	4649      	mov	r1, r9
1a0034d6:	4638      	mov	r0, r7
1a0034d8:	47c0      	blx	r8
1a0034da:	3001      	adds	r0, #1
1a0034dc:	d01e      	beq.n	1a00351c <_printf_common+0xa4>
1a0034de:	6823      	ldr	r3, [r4, #0]
1a0034e0:	68e5      	ldr	r5, [r4, #12]
1a0034e2:	6832      	ldr	r2, [r6, #0]
1a0034e4:	f003 0306 	and.w	r3, r3, #6
1a0034e8:	2b04      	cmp	r3, #4
1a0034ea:	bf08      	it	eq
1a0034ec:	1aad      	subeq	r5, r5, r2
1a0034ee:	68a3      	ldr	r3, [r4, #8]
1a0034f0:	6922      	ldr	r2, [r4, #16]
1a0034f2:	bf0c      	ite	eq
1a0034f4:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
1a0034f8:	2500      	movne	r5, #0
1a0034fa:	4293      	cmp	r3, r2
1a0034fc:	bfc4      	itt	gt
1a0034fe:	1a9b      	subgt	r3, r3, r2
1a003500:	18ed      	addgt	r5, r5, r3
1a003502:	2600      	movs	r6, #0
1a003504:	341a      	adds	r4, #26
1a003506:	42b5      	cmp	r5, r6
1a003508:	d11a      	bne.n	1a003540 <_printf_common+0xc8>
1a00350a:	2000      	movs	r0, #0
1a00350c:	e008      	b.n	1a003520 <_printf_common+0xa8>
1a00350e:	2301      	movs	r3, #1
1a003510:	4652      	mov	r2, sl
1a003512:	4649      	mov	r1, r9
1a003514:	4638      	mov	r0, r7
1a003516:	47c0      	blx	r8
1a003518:	3001      	adds	r0, #1
1a00351a:	d103      	bne.n	1a003524 <_printf_common+0xac>
1a00351c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a003520:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a003524:	3501      	adds	r5, #1
1a003526:	e7c6      	b.n	1a0034b6 <_printf_common+0x3e>
1a003528:	18e1      	adds	r1, r4, r3
1a00352a:	1c5a      	adds	r2, r3, #1
1a00352c:	2030      	movs	r0, #48	; 0x30
1a00352e:	f881 0043 	strb.w	r0, [r1, #67]	; 0x43
1a003532:	4422      	add	r2, r4
1a003534:	f894 1045 	ldrb.w	r1, [r4, #69]	; 0x45
1a003538:	f882 1043 	strb.w	r1, [r2, #67]	; 0x43
1a00353c:	3302      	adds	r3, #2
1a00353e:	e7c7      	b.n	1a0034d0 <_printf_common+0x58>
1a003540:	2301      	movs	r3, #1
1a003542:	4622      	mov	r2, r4
1a003544:	4649      	mov	r1, r9
1a003546:	4638      	mov	r0, r7
1a003548:	47c0      	blx	r8
1a00354a:	3001      	adds	r0, #1
1a00354c:	d0e6      	beq.n	1a00351c <_printf_common+0xa4>
1a00354e:	3601      	adds	r6, #1
1a003550:	e7d9      	b.n	1a003506 <_printf_common+0x8e>
	...

1a003554 <_printf_i>:
1a003554:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
1a003558:	7e0f      	ldrb	r7, [r1, #24]
1a00355a:	9d0c      	ldr	r5, [sp, #48]	; 0x30
1a00355c:	2f78      	cmp	r7, #120	; 0x78
1a00355e:	4691      	mov	r9, r2
1a003560:	4680      	mov	r8, r0
1a003562:	460c      	mov	r4, r1
1a003564:	469a      	mov	sl, r3
1a003566:	f101 0243 	add.w	r2, r1, #67	; 0x43
1a00356a:	d807      	bhi.n	1a00357c <_printf_i+0x28>
1a00356c:	2f62      	cmp	r7, #98	; 0x62
1a00356e:	d80a      	bhi.n	1a003586 <_printf_i+0x32>
1a003570:	2f00      	cmp	r7, #0
1a003572:	f000 80d8 	beq.w	1a003726 <_printf_i+0x1d2>
1a003576:	2f58      	cmp	r7, #88	; 0x58
1a003578:	f000 80a3 	beq.w	1a0036c2 <_printf_i+0x16e>
1a00357c:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a003580:	f884 7042 	strb.w	r7, [r4, #66]	; 0x42
1a003584:	e03a      	b.n	1a0035fc <_printf_i+0xa8>
1a003586:	f1a7 0363 	sub.w	r3, r7, #99	; 0x63
1a00358a:	2b15      	cmp	r3, #21
1a00358c:	d8f6      	bhi.n	1a00357c <_printf_i+0x28>
1a00358e:	a101      	add	r1, pc, #4	; (adr r1, 1a003594 <_printf_i+0x40>)
1a003590:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
1a003594:	1a0035ed 	.word	0x1a0035ed
1a003598:	1a003601 	.word	0x1a003601
1a00359c:	1a00357d 	.word	0x1a00357d
1a0035a0:	1a00357d 	.word	0x1a00357d
1a0035a4:	1a00357d 	.word	0x1a00357d
1a0035a8:	1a00357d 	.word	0x1a00357d
1a0035ac:	1a003601 	.word	0x1a003601
1a0035b0:	1a00357d 	.word	0x1a00357d
1a0035b4:	1a00357d 	.word	0x1a00357d
1a0035b8:	1a00357d 	.word	0x1a00357d
1a0035bc:	1a00357d 	.word	0x1a00357d
1a0035c0:	1a00370d 	.word	0x1a00370d
1a0035c4:	1a003631 	.word	0x1a003631
1a0035c8:	1a0036ef 	.word	0x1a0036ef
1a0035cc:	1a00357d 	.word	0x1a00357d
1a0035d0:	1a00357d 	.word	0x1a00357d
1a0035d4:	1a00372f 	.word	0x1a00372f
1a0035d8:	1a00357d 	.word	0x1a00357d
1a0035dc:	1a003631 	.word	0x1a003631
1a0035e0:	1a00357d 	.word	0x1a00357d
1a0035e4:	1a00357d 	.word	0x1a00357d
1a0035e8:	1a0036f7 	.word	0x1a0036f7
1a0035ec:	682b      	ldr	r3, [r5, #0]
1a0035ee:	1d1a      	adds	r2, r3, #4
1a0035f0:	681b      	ldr	r3, [r3, #0]
1a0035f2:	602a      	str	r2, [r5, #0]
1a0035f4:	f104 0542 	add.w	r5, r4, #66	; 0x42
1a0035f8:	f884 3042 	strb.w	r3, [r4, #66]	; 0x42
1a0035fc:	2301      	movs	r3, #1
1a0035fe:	e0a3      	b.n	1a003748 <_printf_i+0x1f4>
1a003600:	6820      	ldr	r0, [r4, #0]
1a003602:	6829      	ldr	r1, [r5, #0]
1a003604:	0606      	lsls	r6, r0, #24
1a003606:	f101 0304 	add.w	r3, r1, #4
1a00360a:	d50a      	bpl.n	1a003622 <_printf_i+0xce>
1a00360c:	680e      	ldr	r6, [r1, #0]
1a00360e:	602b      	str	r3, [r5, #0]
1a003610:	2e00      	cmp	r6, #0
1a003612:	da03      	bge.n	1a00361c <_printf_i+0xc8>
1a003614:	232d      	movs	r3, #45	; 0x2d
1a003616:	4276      	negs	r6, r6
1a003618:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a00361c:	485e      	ldr	r0, [pc, #376]	; (1a003798 <_printf_i+0x244>)
1a00361e:	230a      	movs	r3, #10
1a003620:	e019      	b.n	1a003656 <_printf_i+0x102>
1a003622:	680e      	ldr	r6, [r1, #0]
1a003624:	602b      	str	r3, [r5, #0]
1a003626:	f010 0f40 	tst.w	r0, #64	; 0x40
1a00362a:	bf18      	it	ne
1a00362c:	b236      	sxthne	r6, r6
1a00362e:	e7ef      	b.n	1a003610 <_printf_i+0xbc>
1a003630:	682b      	ldr	r3, [r5, #0]
1a003632:	6820      	ldr	r0, [r4, #0]
1a003634:	1d19      	adds	r1, r3, #4
1a003636:	6029      	str	r1, [r5, #0]
1a003638:	0601      	lsls	r1, r0, #24
1a00363a:	d501      	bpl.n	1a003640 <_printf_i+0xec>
1a00363c:	681e      	ldr	r6, [r3, #0]
1a00363e:	e002      	b.n	1a003646 <_printf_i+0xf2>
1a003640:	0646      	lsls	r6, r0, #25
1a003642:	d5fb      	bpl.n	1a00363c <_printf_i+0xe8>
1a003644:	881e      	ldrh	r6, [r3, #0]
1a003646:	4854      	ldr	r0, [pc, #336]	; (1a003798 <_printf_i+0x244>)
1a003648:	2f6f      	cmp	r7, #111	; 0x6f
1a00364a:	bf0c      	ite	eq
1a00364c:	2308      	moveq	r3, #8
1a00364e:	230a      	movne	r3, #10
1a003650:	2100      	movs	r1, #0
1a003652:	f884 1043 	strb.w	r1, [r4, #67]	; 0x43
1a003656:	6865      	ldr	r5, [r4, #4]
1a003658:	60a5      	str	r5, [r4, #8]
1a00365a:	2d00      	cmp	r5, #0
1a00365c:	bfa2      	ittt	ge
1a00365e:	6821      	ldrge	r1, [r4, #0]
1a003660:	f021 0104 	bicge.w	r1, r1, #4
1a003664:	6021      	strge	r1, [r4, #0]
1a003666:	b90e      	cbnz	r6, 1a00366c <_printf_i+0x118>
1a003668:	2d00      	cmp	r5, #0
1a00366a:	d04d      	beq.n	1a003708 <_printf_i+0x1b4>
1a00366c:	4615      	mov	r5, r2
1a00366e:	fbb6 f1f3 	udiv	r1, r6, r3
1a003672:	fb03 6711 	mls	r7, r3, r1, r6
1a003676:	5dc7      	ldrb	r7, [r0, r7]
1a003678:	f805 7d01 	strb.w	r7, [r5, #-1]!
1a00367c:	4637      	mov	r7, r6
1a00367e:	42bb      	cmp	r3, r7
1a003680:	460e      	mov	r6, r1
1a003682:	d9f4      	bls.n	1a00366e <_printf_i+0x11a>
1a003684:	2b08      	cmp	r3, #8
1a003686:	d10b      	bne.n	1a0036a0 <_printf_i+0x14c>
1a003688:	6823      	ldr	r3, [r4, #0]
1a00368a:	07de      	lsls	r6, r3, #31
1a00368c:	d508      	bpl.n	1a0036a0 <_printf_i+0x14c>
1a00368e:	6923      	ldr	r3, [r4, #16]
1a003690:	6861      	ldr	r1, [r4, #4]
1a003692:	4299      	cmp	r1, r3
1a003694:	bfde      	ittt	le
1a003696:	2330      	movle	r3, #48	; 0x30
1a003698:	f805 3c01 	strble.w	r3, [r5, #-1]
1a00369c:	f105 35ff 	addle.w	r5, r5, #4294967295	; 0xffffffff
1a0036a0:	1b52      	subs	r2, r2, r5
1a0036a2:	6122      	str	r2, [r4, #16]
1a0036a4:	f8cd a000 	str.w	sl, [sp]
1a0036a8:	464b      	mov	r3, r9
1a0036aa:	aa03      	add	r2, sp, #12
1a0036ac:	4621      	mov	r1, r4
1a0036ae:	4640      	mov	r0, r8
1a0036b0:	f7ff fee2 	bl	1a003478 <_printf_common>
1a0036b4:	3001      	adds	r0, #1
1a0036b6:	d14c      	bne.n	1a003752 <_printf_i+0x1fe>
1a0036b8:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a0036bc:	b004      	add	sp, #16
1a0036be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a0036c2:	4835      	ldr	r0, [pc, #212]	; (1a003798 <_printf_i+0x244>)
1a0036c4:	f881 7045 	strb.w	r7, [r1, #69]	; 0x45
1a0036c8:	6829      	ldr	r1, [r5, #0]
1a0036ca:	6823      	ldr	r3, [r4, #0]
1a0036cc:	f851 6b04 	ldr.w	r6, [r1], #4
1a0036d0:	6029      	str	r1, [r5, #0]
1a0036d2:	061d      	lsls	r5, r3, #24
1a0036d4:	d514      	bpl.n	1a003700 <_printf_i+0x1ac>
1a0036d6:	07df      	lsls	r7, r3, #31
1a0036d8:	bf44      	itt	mi
1a0036da:	f043 0320 	orrmi.w	r3, r3, #32
1a0036de:	6023      	strmi	r3, [r4, #0]
1a0036e0:	b91e      	cbnz	r6, 1a0036ea <_printf_i+0x196>
1a0036e2:	6823      	ldr	r3, [r4, #0]
1a0036e4:	f023 0320 	bic.w	r3, r3, #32
1a0036e8:	6023      	str	r3, [r4, #0]
1a0036ea:	2310      	movs	r3, #16
1a0036ec:	e7b0      	b.n	1a003650 <_printf_i+0xfc>
1a0036ee:	6823      	ldr	r3, [r4, #0]
1a0036f0:	f043 0320 	orr.w	r3, r3, #32
1a0036f4:	6023      	str	r3, [r4, #0]
1a0036f6:	2378      	movs	r3, #120	; 0x78
1a0036f8:	4828      	ldr	r0, [pc, #160]	; (1a00379c <_printf_i+0x248>)
1a0036fa:	f884 3045 	strb.w	r3, [r4, #69]	; 0x45
1a0036fe:	e7e3      	b.n	1a0036c8 <_printf_i+0x174>
1a003700:	0659      	lsls	r1, r3, #25
1a003702:	bf48      	it	mi
1a003704:	b2b6      	uxthmi	r6, r6
1a003706:	e7e6      	b.n	1a0036d6 <_printf_i+0x182>
1a003708:	4615      	mov	r5, r2
1a00370a:	e7bb      	b.n	1a003684 <_printf_i+0x130>
1a00370c:	682b      	ldr	r3, [r5, #0]
1a00370e:	6826      	ldr	r6, [r4, #0]
1a003710:	6961      	ldr	r1, [r4, #20]
1a003712:	1d18      	adds	r0, r3, #4
1a003714:	6028      	str	r0, [r5, #0]
1a003716:	0635      	lsls	r5, r6, #24
1a003718:	681b      	ldr	r3, [r3, #0]
1a00371a:	d501      	bpl.n	1a003720 <_printf_i+0x1cc>
1a00371c:	6019      	str	r1, [r3, #0]
1a00371e:	e002      	b.n	1a003726 <_printf_i+0x1d2>
1a003720:	0670      	lsls	r0, r6, #25
1a003722:	d5fb      	bpl.n	1a00371c <_printf_i+0x1c8>
1a003724:	8019      	strh	r1, [r3, #0]
1a003726:	2300      	movs	r3, #0
1a003728:	6123      	str	r3, [r4, #16]
1a00372a:	4615      	mov	r5, r2
1a00372c:	e7ba      	b.n	1a0036a4 <_printf_i+0x150>
1a00372e:	682b      	ldr	r3, [r5, #0]
1a003730:	1d1a      	adds	r2, r3, #4
1a003732:	602a      	str	r2, [r5, #0]
1a003734:	681d      	ldr	r5, [r3, #0]
1a003736:	6862      	ldr	r2, [r4, #4]
1a003738:	2100      	movs	r1, #0
1a00373a:	4628      	mov	r0, r5
1a00373c:	f7ff fe40 	bl	1a0033c0 <memchr>
1a003740:	b108      	cbz	r0, 1a003746 <_printf_i+0x1f2>
1a003742:	1b40      	subs	r0, r0, r5
1a003744:	6060      	str	r0, [r4, #4]
1a003746:	6863      	ldr	r3, [r4, #4]
1a003748:	6123      	str	r3, [r4, #16]
1a00374a:	2300      	movs	r3, #0
1a00374c:	f884 3043 	strb.w	r3, [r4, #67]	; 0x43
1a003750:	e7a8      	b.n	1a0036a4 <_printf_i+0x150>
1a003752:	6923      	ldr	r3, [r4, #16]
1a003754:	462a      	mov	r2, r5
1a003756:	4649      	mov	r1, r9
1a003758:	4640      	mov	r0, r8
1a00375a:	47d0      	blx	sl
1a00375c:	3001      	adds	r0, #1
1a00375e:	d0ab      	beq.n	1a0036b8 <_printf_i+0x164>
1a003760:	6823      	ldr	r3, [r4, #0]
1a003762:	079b      	lsls	r3, r3, #30
1a003764:	d413      	bmi.n	1a00378e <_printf_i+0x23a>
1a003766:	68e0      	ldr	r0, [r4, #12]
1a003768:	9b03      	ldr	r3, [sp, #12]
1a00376a:	4298      	cmp	r0, r3
1a00376c:	bfb8      	it	lt
1a00376e:	4618      	movlt	r0, r3
1a003770:	e7a4      	b.n	1a0036bc <_printf_i+0x168>
1a003772:	2301      	movs	r3, #1
1a003774:	4632      	mov	r2, r6
1a003776:	4649      	mov	r1, r9
1a003778:	4640      	mov	r0, r8
1a00377a:	47d0      	blx	sl
1a00377c:	3001      	adds	r0, #1
1a00377e:	d09b      	beq.n	1a0036b8 <_printf_i+0x164>
1a003780:	3501      	adds	r5, #1
1a003782:	68e3      	ldr	r3, [r4, #12]
1a003784:	9903      	ldr	r1, [sp, #12]
1a003786:	1a5b      	subs	r3, r3, r1
1a003788:	42ab      	cmp	r3, r5
1a00378a:	dcf2      	bgt.n	1a003772 <_printf_i+0x21e>
1a00378c:	e7eb      	b.n	1a003766 <_printf_i+0x212>
1a00378e:	2500      	movs	r5, #0
1a003790:	f104 0619 	add.w	r6, r4, #25
1a003794:	e7f5      	b.n	1a003782 <_printf_i+0x22e>
1a003796:	bf00      	nop
1a003798:	1a003bb5 	.word	0x1a003bb5
1a00379c:	1a003bc6 	.word	0x1a003bc6
1a0037a0:	0d0a6325 	.word	0x0d0a6325
1a0037a4:	00000000 	.word	0x00000000
1a0037a8:	6e656942 	.word	0x6e656942
1a0037ac:	696e6576 	.word	0x696e6576
1a0037b0:	61206f64 	.word	0x61206f64
1a0037b4:	6f63206c 	.word	0x6f63206c
1a0037b8:	6f72746e 	.word	0x6f72746e
1a0037bc:	6f64616c 	.word	0x6f64616c
1a0037c0:	47522072 	.word	0x47522072
1a0037c4:	6f702042 	.word	0x6f702042
1a0037c8:	41552072 	.word	0x41552072
1a0037cc:	0a2e5452 	.word	0x0a2e5452
1a0037d0:	0000000d 	.word	0x0000000d
1a0037d4:	203d2052 	.word	0x203d2052
1a0037d8:	4f4a4f52 	.word	0x4f4a4f52
1a0037dc:	00000d0a 	.word	0x00000d0a
1a0037e0:	203d2047 	.word	0x203d2047
1a0037e4:	44524556 	.word	0x44524556
1a0037e8:	000d0a45 	.word	0x000d0a45
1a0037ec:	203d2042 	.word	0x203d2042
1a0037f0:	4c555a41 	.word	0x4c555a41
1a0037f4:	00000d0a 	.word	0x00000d0a
1a0037f8:	203d2056 	.word	0x203d2056
1a0037fc:	4c4f4956 	.word	0x4c4f4956
1a003800:	0a415445 	.word	0x0a415445
1a003804:	0000000d 	.word	0x0000000d
1a003808:	203d2059 	.word	0x203d2059
1a00380c:	52414d41 	.word	0x52414d41
1a003810:	4f4c4c49 	.word	0x4f4c4c49
1a003814:	00000d0a 	.word	0x00000d0a
1a003818:	203d2057 	.word	0x203d2057
1a00381c:	4e414c42 	.word	0x4e414c42
1a003820:	0d0a4f43 	.word	0x0d0a4f43
1a003824:	00000000 	.word	0x00000000
1a003828:	203d2043 	.word	0x203d2043
1a00382c:	454c4543 	.word	0x454c4543
1a003830:	0a455453 	.word	0x0a455453
1a003834:	0000000d 	.word	0x0000000d
1a003838:	203d204e 	.word	0x203d204e
1a00383c:	5247454e 	.word	0x5247454e
1a003840:	000d0a4f 	.word	0x000d0a4f
1a003844:	203d2030 	.word	0x203d2030
1a003848:	47474f54 	.word	0x47474f54
1a00384c:	4c20454c 	.word	0x4c20454c
1a003850:	0d0a4445 	.word	0x0d0a4445
1a003854:	00000000 	.word	0x00000000

1a003858 <ExtRateIn>:
1a003858:	00000000                                ....

1a00385c <GpioButtons>:
1a00385c:	08000400 09010900                       ........

1a003864 <GpioLeds>:
1a003864:	01050005 0e000205 0c010b01              ............

1a003870 <GpioPorts>:
1a003870:	03030003 0f050403 05031005 07030603     ................
1a003880:	00000802                                ....

1a003884 <OscRateIn>:
1a003884:	00b71b00                                ....

1a003888 <InitClkStates>:
1a003888:	01010f01                                ....

1a00388c <pinmuxing>:
1a00388c:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a00389c:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a0038ac:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a0038bc:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a0038cc:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a0038dc:	00d50301 00d50401 00160107 00560207     ..............V.
1a0038ec:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a0038fc:	00570206 0f0f0f03 000000ff              ..W.........

1a003908 <periph_to_base>:
1a003908:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a003918:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a003928:	000100e0 01000100 01200003 00060120     .......... . ...
1a003938:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a003948:	01820013 00120182 01a201a2 01c20011     ................
1a003958:	001001c2 01e201e2 0202000f 000e0202     ................
1a003968:	02220222 0223000d 001c0223              "."...#.#...

1a003974 <InitClkStates>:
1a003974:	00010100 00010909 0001090a 01010701     ................
1a003984:	00010902 00010906 0101090c 0001090d     ................
1a003994:	0001090e 0001090f 00010910 00010911     ................
1a0039a4:	00010912 00010913 00011114 00011119     ................
1a0039b4:	0001111a 0001111b                       ........

1a0039bc <UART_BClock>:
1a0039bc:	01a201c2 01620182                       ......b.

1a0039c4 <UART_PClock>:
1a0039c4:	00820081 00a200a1                       ........

1a0039cc <gpioPinsInit>:
1a0039cc:	02000104 00050701 05010d03 04080100     ................
1a0039dc:	02020002 02000304 00000403 04070002     ................
1a0039ec:	030c0300 09050402 05040103 04030208     ................
1a0039fc:	04020305 06040504 0802000c 03000b06     ................
1a003a0c:	00090607 07060503 060f0504 03030004     ................
1a003a1c:	02000404 00050404 06040502 04060200     ................
1a003a2c:	0c050408 05040a04 0003010e 14010a00     ................
1a003a3c:	010f0000 0d000012 00001101 0010010c     ................
1a003a4c:	07070300 000f0300 01000001 00000000     ................
1a003a5c:	000a0600 08060603 06100504 04030005     ................
1a003a6c:	03000106 04090400 04010d05 010b0000     ................
1a003a7c:	0200000f 00000001 00010104 02010800     ................
1a003a8c:	01090000 09010006 05040002 04010200     ................
1a003a9c:	02020105 02020504 0e00000a 01000b02     ................
1a003aac:	000c020b 00000c01                       ........

1a003ab4 <timer_sd>:
1a003ab4:	40084000 00000020 0000000c 40085000     .@.@ ........P.@
1a003ac4:	00000021 0000000d 400c3000 00000022     !........0.@"...
1a003ad4:	0000000e 400c4000 00000023 0000000f     .....@.@#.......

1a003ae4 <lpcUarts>:
1a003ae4:	40081000 06020406 00180205 40081000     ...@...........@
1a003af4:	09070509 00180706 40082000 00000000     ......... .@....
1a003b04:	00190000 400c1000 07060107 001a0602     .......@........
1a003b14:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a003b24:	02020302 001b0204 00002b77              ........w+..

1a003b30 <uartfd_vtable>:
1a003b30:	1a001dff 1a001df1 00000000 00000000     ................

1a003b40 <__sf_fake_stderr>:
	...

1a003b60 <__sf_fake_stdin>:
	...

1a003b80 <__sf_fake_stdout>:
	...

1a003ba0 <_global_impure_ptr>:
1a003ba0:	1000008c 2b302d23 6c680020 6665004c     ....#-0+ .hlL.ef
1a003bb0:	47464567 32313000 36353433 41393837     gEFG.0123456789A
1a003bc0:	45444342 31300046 35343332 39383736     BCDEF.0123456789
1a003bd0:	64636261 00006665                       abcdef..
