
TP3/Ej5/out/Ej5.elf:     file format elf32-littlearm
TP3/Ej5/out/Ej5.elf
architecture: armv7e-m, flags 0x00000112:
EXEC_P, HAS_SYMS, D_PAGED
start address 0x1a00041d

Program Header:
0x70000001 off    0x00011fd8 vaddr 0x1a001fd8 paddr 0x1a001fd8 align 2**2
         filesz 0x00000008 memsz 0x00000008 flags r--
    LOAD off    0x00000048 vaddr 0x10000048 paddr 0x10000048 align 2**16
         filesz 0x00000000 memsz 0x00000034 flags rw-
    LOAD off    0x00010000 vaddr 0x1a000000 paddr 0x1a000000 align 2**16
         filesz 0x00001fe0 memsz 0x00001fe0 flags rwx
    LOAD off    0x00020000 vaddr 0x10000000 paddr 0x1a001fe0 align 2**16
         filesz 0x00000048 memsz 0x00000048 flags rw-
private flags = 0x5000400: [Version5 EABI] [hard-float ABI]

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .text         00000300  1a000000  1a000000  00010000  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  1 .data         00000048  10000000  1a001fe0  00020000  2**3
                  CONTENTS, ALLOC, LOAD, DATA
  2 .data_RAM2    00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  3 .data_RAM3    00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  4 .data_RAM4    00000000  20008000  20008000  00020048  2**2
                  CONTENTS
  5 .data_RAM5    00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
  6 .bss          00000034  10000048  10000048  00010048  2**3
                  ALLOC
  7 .bss_RAM2     00000000  10080000  10080000  00020048  2**2
                  CONTENTS
  8 .bss_RAM3     00000000  20000000  20000000  00020048  2**2
                  CONTENTS
  9 .bss_RAM4     00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 10 .bss_RAM5     00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 11 .init_array   00000004  1a000300  1a000300  00010300  2**2
                  CONTENTS, ALLOC, LOAD, DATA
 12 .text         00001cd4  1a000304  1a000304  00010304  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
 13 .ARM.exidx    00000008  1a001fd8  1a001fd8  00011fd8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
 14 .uninit_RESERVED 00000000  10000000  10000000  00020048  2**2
                  CONTENTS
 15 .noinit_RAM2  00000000  10080000  10080000  00020048  2**2
                  CONTENTS
 16 .noinit_RAM3  00000000  20000000  20000000  00020048  2**2
                  CONTENTS
 17 .noinit_RAM4  00000000  20008000  20008000  00020048  2**2
                  CONTENTS
 18 .noinit_RAM5  00000000  2000c000  2000c000  00020048  2**2
                  CONTENTS
 19 .noinit       00000000  1000007c  1000007c  00000000  2**2
                  ALLOC
 20 .debug_info   000159f6  00000000  00000000  00020048  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_abbrev 00003d26  00000000  00000000  00035a3e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loclists 0000542a  00000000  00000000  00039764  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_aranges 00000a28  00000000  00000000  0003eb90  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 24 .debug_rnglists 00000812  00000000  00000000  0003f5b8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 25 .debug_macro  0000d71d  00000000  00000000  0003fdca  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 26 .debug_line   000108b2  00000000  00000000  0004d4e7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 27 .debug_str    00029f24  00000000  00000000  0005dd99  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 28 .comment      0000001e  00000000  00000000  00087cbd  2**0
                  CONTENTS, READONLY
 29 .ARM.attributes 00000032  00000000  00000000  00087cdb  2**0
                  CONTENTS, READONLY
 30 .debug_frame  00001770  00000000  00000000  00087d10  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 31 .debug_line_str 0000004e  00000000  00000000  00089480  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
SYMBOL TABLE:
1a000000 l    d  .text	00000000 .text
10000000 l    d  .data	00000000 .data
10080000 l    d  .data_RAM2	00000000 .data_RAM2
20000000 l    d  .data_RAM3	00000000 .data_RAM3
20008000 l    d  .data_RAM4	00000000 .data_RAM4
2000c000 l    d  .data_RAM5	00000000 .data_RAM5
10000048 l    d  .bss	00000000 .bss
10080000 l    d  .bss_RAM2	00000000 .bss_RAM2
20000000 l    d  .bss_RAM3	00000000 .bss_RAM3
20008000 l    d  .bss_RAM4	00000000 .bss_RAM4
2000c000 l    d  .bss_RAM5	00000000 .bss_RAM5
1a000300 l    d  .init_array	00000000 .init_array
1a000304 l    d  .text	00000000 .text
1a001fd8 l    d  .ARM.exidx	00000000 .ARM.exidx
10000000 l    d  .uninit_RESERVED	00000000 .uninit_RESERVED
10080000 l    d  .noinit_RAM2	00000000 .noinit_RAM2
20000000 l    d  .noinit_RAM3	00000000 .noinit_RAM3
20008000 l    d  .noinit_RAM4	00000000 .noinit_RAM4
2000c000 l    d  .noinit_RAM5	00000000 .noinit_RAM5
1000007c l    d  .noinit	00000000 .noinit
00000000 l    d  .debug_info	00000000 .debug_info
00000000 l    d  .debug_abbrev	00000000 .debug_abbrev
00000000 l    d  .debug_loclists	00000000 .debug_loclists
00000000 l    d  .debug_aranges	00000000 .debug_aranges
00000000 l    d  .debug_rnglists	00000000 .debug_rnglists
00000000 l    d  .debug_macro	00000000 .debug_macro
00000000 l    d  .debug_line	00000000 .debug_line
00000000 l    d  .debug_str	00000000 .debug_str
00000000 l    d  .comment	00000000 .comment
00000000 l    d  .ARM.attributes	00000000 .ARM.attributes
00000000 l    d  .debug_frame	00000000 .debug_frame
00000000 l    d  .debug_line_str	00000000 .debug_line_str
00000000 l    df *ABS*	00000000 armv7m_startup.c
00000000 l    df *ABS*	00000000 vendor_interrupt.c
00000000 l    df *ABS*	00000000 crp.c
00000000 l    df *ABS*	00000000 i2c_18xx_43xx.c
10000000 l     O .data	00000038 i2c
00000000 l    df *ABS*	00000000 sapi_cyclesCounter.c
10000038 l     O .data	00000004 ClockSpeed
00000000 l    df *ABS*	00000000 sapi_tick.c
10000060 l     O .bss	00000004 callBackFuncParams
10000068 l     O .bss	00000008 tickCounter
10000070 l     O .bss	00000004 tickHookFunction
00000000 l    df *ABS*	00000000 system.c
00000000 l    df *ABS*	00000000 Ej5.c
10000048 l     O .bss	0000000a uartBuff.0
00000000 l    df *ABS*	00000000 board.c
1a0004a8 l     F .text	00000048 Board_LED_Init
1a0004f0 l     F .text	00000044 Board_TEC_Init
1a000534 l     F .text	00000044 Board_GPIO_Init
1a000578 l     F .text	00000030 Board_ADC_Init
1a0005a8 l     F .text	00000038 Board_SPI_Init
1a0005e0 l     F .text	00000024 Board_I2C_Init
1a001d30 l     O .text	00000008 GpioButtons
1a001d38 l     O .text	0000000c GpioLeds
1a001d44 l     O .text	00000012 GpioPorts
00000000 l    df *ABS*	00000000 board_sysinit.c
1a001d5c l     O .text	00000004 InitClkStates
1a001d60 l     O .text	00000074 pinmuxing
00000000 l    df *ABS*	00000000 adc_18xx_43xx.c
1a000704 l     F .text	00000014 Chip_ADC_GetClockIndex
1a000718 l     F .text	00000032 getClkDiv
00000000 l    df *ABS*	00000000 chip_18xx_43xx.c
00000000 l    df *ABS*	00000000 clock_18xx_43xx.c
1a0008d4 l     F .text	000000a8 pll_calc_divs
1a00097c l     F .text	00000110 pll_get_frac
1a000a8c l     F .text	00000054 Chip_Clock_FindBaseClock
1a000d04 l     F .text	00000022 Chip_Clock_GetDivRate
10000058 l     O .bss	00000008 audio_usb_pll_freq
1a001ddc l     O .text	0000006c periph_to_base
00000000 l    df *ABS*	00000000 dac_18xx_43xx.c
00000000 l    df *ABS*	00000000 gpio_18xx_43xx.c
00000000 l    df *ABS*	00000000 ssp_18xx_43xx.c
1a000f60 l     F .text	00000014 Chip_SSP_GetClockIndex
1a000f74 l     F .text	00000018 Chip_SSP_GetPeriphClockIndex
00000000 l    df *ABS*	00000000 sysinit_18xx_43xx.c
1a001e48 l     O .text	00000048 InitClkStates
00000000 l    df *ABS*	00000000 uart_18xx_43xx.c
1a001170 l     F .text	0000002c Chip_UART_GetIndex
1a001e90 l     O .text	00000008 UART_BClock
1a001e98 l     O .text	00000008 UART_PClock
00000000 l    df *ABS*	00000000 sysinit.c
00000000 l    df *ABS*	00000000 sapi_adc.c
00000000 l    df *ABS*	00000000 sapi_dac.c
00000000 l    df *ABS*	00000000 sapi_gpio.c
1a0014d0 l     F .text	00000038 gpioObtainPinInit
00000000 l    df *ABS*	00000000 sapi_uart.c
1a001f90 l     O .text	00000048 lpcUarts
00000000 l    df *ABS*	00000000 sapi_usb_device.c
10000074 l     O .bss	00000004 g_hUsb
00000000 l    df *ABS*	00000000 sapi_board.c
00000000 l    df *ABS*	00000000 sapi_delay.c
00000000 l    df *ABS*	00000000 _aeabi_uldivmod.o
00000000 l    df *ABS*	00000000 libgcc2.c
00000000 l    df *ABS*	00000000 _dvmd_tls.o
00000000 l    df *ABS*	00000000 init.c
00000000 l    df *ABS*	00000000 memset.c
00000000 l    df *ABS*	00000000 
1a000304 l       .init_array	00000000 __init_array_end
1a000300 l       .bss_RAM5	00000000 __preinit_array_end
1a000300 l       .init_array	00000000 __init_array_start
1a000300 l       .bss_RAM5	00000000 __preinit_array_start
1a000b2c g     F .text	0000001c Chip_Clock_GetDividerSource
1a0001ba  w    F .text	00000002 TIMER2_IRQHandler
1a000184  w    F .text	00000002 DebugMon_Handler
1a0001ba  w    F .text	00000002 RIT_IRQHandler
1a0007b0 g     F .text	00000016 Chip_ADC_DeInit
1a080000 g       *ABS*	00000000 __top_MFlashA512
1a0001ba  w    F .text	00000002 ADCHS_IRQHandler
1a000114 g       .text	00000000 __section_table_start
1a0001ba  w    F .text	00000002 FLASH_EEPROM_IRQHandler
1a0001ba  w    F .text	00000002 I2C0_IRQHandler
1a000658 g     F .text	00000008 __stdio_init
1a001970 g     F .text	0000003c delayRead
1a00017a  w    F .text	00000002 HardFault_Handler
1a000000 g       *ABS*	00000000 __vectors_start__
1a00086e g     F .text	0000000c Chip_ADC_SetResolution
1a0017b8 g     F .text	0000002c SysTick_Handler
1a0011f0 g     F .text	00000040 Chip_UART_SetBaud
1a000418  w    F .text	00000002 initialise_monitor_handles
1a0001ba  w    F .text	00000002 SDIO_IRQHandler
1a0001ba  w    F .text	00000002 ATIMER_IRQHandler
1a000186  w    F .text	00000002 PendSV_Handler
1a000178  w    F .text	00000002 NMI_Handler
1a001fe0 g       .ARM.exidx	00000000 __exidx_end
1a000150 g       .text	00000000 __data_section_table_end
1a0001ba  w    F .text	00000002 I2C1_IRQHandler
1a0001ba  w    F .text	00000002 UART1_IRQHandler
1a0001ba  w    F .text	00000002 GPIO5_IRQHandler
1a0001ba  w    F .text	00000002 CAN1_IRQHandler
53ff7472 g       *ABS*	00000000 __valid_user_code_checksum
1a001fe0 g       .ARM.exidx	00000000 _etext
1a0001ba  w    F .text	00000002 USB1_IRQHandler
1a0001ba  w    F .text	00000002 I2S0_IRQHandler
1a0001ba  w    F .text	00000002 TIMER3_IRQHandler
1a000dac g     F .text	0000000c Chip_Clock_GetBaseClocktHz
1a0001ba  w    F .text	00000002 UART0_IRQHandler
1a0001a8 g     F .text	00000012 bss_init
1a0001ba  w    F .text	00000002 SGPIO_IRQHandler
1a0019c8 g     F .text	00000000 .hidden __aeabi_uldivmod
1000007c g       .noinit	00000000 _noinit
1a0018a6 g     F .text	00000018 uartWriteString
10000054 g     O .bss	00000004 SystemCoreClock
1a00119c g     F .text	00000054 Chip_UART_Init
1a000eb2 g     F .text	00000010 Chip_DAC_UpdateValue
1a0001ba  w    F .text	00000002 ADC0_IRQHandler
1a000758 g     F .text	00000018 readAdcVal
1a000180  w    F .text	00000002 UsageFault_Handler
1a000e5c g     F .text	0000004c Chip_Clock_GetRate
1a0001ba  w    F .text	00000002 GPIO6_IRQHandler
1a00068c g     F .text	0000006c Board_SetupClocking
20008000 g       *ABS*	00000000 __top_RamAHB32
1a000304 g     F .text	00000064 itoa
1a0019f8 g     F .text	0000027a .hidden __udivmoddi4
1a001d2c g     O .text	00000004 ExtRateIn
1a0001ba  w    F .text	00000002 IntDefaultHandler
1a000300 g       .text	00000000 __CRP_WORD_END__
1a0001ba  w    F .text	00000002 GPIO1_IRQHandler
1a0001ba  w    F .text	00000002 SSP0_IRQHandler
1a001fd8 g       .text	00000000 __exidx_start
1a0002fc g     O .text	00000004 CRP_WORD
1a00074a g     F .text	0000000e setStartMode
1a001c78 g     F .text	00000048 __libc_init_array
1a001360 g     F .text	000000b8 adcInit
1a0001ba  w    F .text	00000002 ADC1_IRQHandler
1a000628 g     F .text	00000030 Board_Init
1a0004a6  w    F .text	00000002 _init
1a000114 g       .text	00000000 __data_section_table
1a0001ba  w    F .text	00000002 RTC_IRQHandler
1000007c g       .bss	00000000 _ebss
1a00087a g     F .text	00000024 Chip_ADC_EnableChannel
1a0001ba  w    F .text	00000002 TIMER0_IRQHandler
1a00041c g     F .text	00000088 Reset_Handler
1a001744 g     F .text	00000074 tickInit
20010000 g       *ABS*	00000000 __top_RamAHB_ETB16
1a0001ba  w    F .text	00000002 SPI_IRQHandler
1a000f24 g     F .text	0000003c Chip_I2C_SetClockRate
1a0001ba  w    F .text	00000002 LCD_IRQHandler
1a000ae0 g     F .text	0000004c Chip_Clock_EnableCrystal
1a0007c6 g     F .text	00000008 Chip_ADC_ReadValue
10008000 g       *ABS*	00000000 __top_RamLoc32
1a00018a g     F .text	0000001e data_init
1a00081c g     F .text	00000020 Chip_ADC_SetStartMode
1a0001ba  w    F .text	00000002 TIMER1_IRQHandler
1a000efc g     F .text	00000028 Chip_I2C_Init
1a0001ba  w    F .text	00000002 UART2_IRQHandler
1a000c9c g     F .text	00000068 Chip_Clock_GetMainPLLHz
1a001ea8 g     O .text	000000e6 gpioPinsInit
1a00188c g     F .text	0000001a uartWriteByte
1a000f8c g     F .text	00000012 Chip_SSP_SetClockRate
1a0001ba  w    F .text	00000002 GPIO2_IRQHandler
1a001418 g     F .text	00000058 adcRead
1a000d84 g     F .text	00000028 Chip_Clock_GetBaseClock
10000048 g       .bss	00000000 _bss
1a0007ce g     F .text	00000032 Chip_ADC_ReadStatus
1a00083c g     F .text	00000032 Chip_ADC_SetSampleRate
1a001950 g     F .text	00000020 delayInit
1a0001ba  w    F .text	00000002 I2S1_IRQHandler
1a000f9e g     F .text	00000042 Chip_SSP_SetBitRate
1a000eda g     F .text	00000002 Chip_GPIO_Init
1a001d58 g     O .text	00000004 OscRateIn
1a001810 g     F .text	0000007c uartInit
1000007c g       .noinit	00000000 _end_noinit
10008000 g       *ABS*	00000000 _vStackTop
1a0001ba  w    F .text	00000002 SSP1_IRQHandler
1a000178 g       .text	00000000 __bss_section_table_end
1a001508 g     F .text	000001ac gpioInit
1a001c74  w    F .text	00000002 .hidden __aeabi_ldiv0
1a0018c0 g     F .text	0000001c USB0_IRQHandler
1a000e28 g     F .text	00000034 Chip_Clock_Disable
1a0001ba  w    F .text	00000002 GPIO3_IRQHandler
1a0001ba  w    F .text	00000002 SCT_IRQHandler
1a000b48 g     F .text	0000001c Chip_Clock_GetDividerDivisor
1a0002fc g       .text	00000000 __CRP_WORD_START__
1a001cc0 g     F .text	00000010 memset
1a00017c  w    F .text	00000002 MemManage_Handler
1a000368 g     F .text	000000b0 main
1a0001ba  w    F .text	00000002 WDT_IRQHandler
2000c000 g       *ABS*	00000000 __top_RamAHB16
1008a000 g       *ABS*	00000000 __top_RamLoc40
1a000182  w    F .text	00000002 SVC_Handler
1a0017e4 g     F .text	00000018 uartTxReady
1a0001ba  w    F .text	00000002 GPIO7_IRQHandler
1a000db8 g     F .text	0000003c Chip_Clock_EnableOpts
1a000ea8 g     F .text	0000000a Chip_DAC_DeInit
1a000b64 g     F .text	000000b8 Chip_Clock_GetClockInputHz
1a000c1c g     F .text	00000080 Chip_Clock_CalcMainPLLValue
1a00130c g     F .text	00000038 SystemInit
1a0001ba  w    F .text	00000002 SPIFI_IRQHandler
1a0001ba  w    F .text	00000002 QEI_IRQHandler
1a000150 g       .text	00000000 __bss_section_table
1a0016b4 g     F .text	0000006a gpioWrite
1a0004a4  w    F .text	00000002 _fini
1a000770 g     F .text	00000040 Chip_ADC_Init
10000078 g     O .bss	00000004 g_pUsbApi
1a000660 g     F .text	0000002c Board_SetupMuxing
1a001230 g     F .text	000000dc Chip_UART_SetBaudFDR
1a001720 g     F .text	0000000c tickRead
10000040 g     O .data	00000008 tickRateMS
1a00089e g     F .text	00000022 Chip_ADC_SetBurstCmd
1a0001ba  w    F .text	00000002 ETH_IRQHandler
10000000 g       .uninit_RESERVED	00000000 _end_uninit_RESERVED
1a001470 g     F .text	00000044 dacInit
1b000000 g       .text	00000000 __core_m0app_START__
1a0017fc g     F .text	00000014 uartTxWrite
1a0001ba  w    F .text	00000002 CAN0_IRQHandler
10000000 g       .data	00000000 _data
1000007c g       .bss	00000000 _pvHeapStart
1a000178 g       .text	00000000 __section_table_end
1a000fe0 g     F .text	00000038 Chip_SSP_Init
1a0001ba  w    F .text	00000002 GINT0_IRQHandler
1a000ec2 g     F .text	00000018 Chip_DAC_SetBias
1a0001ba  w    F .text	00000002 DAC_IRQHandler
1a000604 g     F .text	00000024 Board_Debug_Init
1a000800 g     F .text	0000001c Chip_ADC_Int_SetChannelCmd
10000048 g       .data	00000000 _edata
1a0014b4 g     F .text	0000001c dacWrite
1a000edc g     F .text	00000020 Chip_I2C_EventHandler
1a0001ba  w    F .text	00000002 M0SUB_IRQHandler
1a001018 g     F .text	00000158 Chip_SetupCoreClock
1a0001ba  w    F .text	00000002 GPIO0_IRQHandler
1a000000 g     O .text	00000040 g_pfnVectors
1a0008c0 g     F .text	00000014 SystemCoreClockUpdate
1a0001ba  w    F .text	00000002 DMA_IRQHandler
1a0001ba  w    F .text	00000002 EVRT_IRQHandler
1b080000 g       *ABS*	00000000 __top_MFlashB512
1a001c74  w    F .text	00000002 .hidden __aeabi_idiv0
1a00017e  w    F .text	00000002 BusFault_Handler
1a000df4 g     F .text	00000034 Chip_Clock_Enable
1a0001ba  w    F .text	00000002 UART3_IRQHandler
1a0019ac g     F .text	0000001c delayWrite
1a0001ba  w    F .text	00000002 MCPWM_IRQHandler
1a0001ba  w    F .text	00000002 M0APP_IRQHandler
1a0018dc g     F .text	00000074 boardInit
1a000040 g     O .text	000000d4 g_pfnVendorVectors
1a0001ba  w    F .text	00000002 GINT1_IRQHandler
1a00172c g     F .text	00000016 tickPowerSet
1a000d28 g     F .text	0000005c Chip_Clock_SetBaseClock
1a001344 g     F .text	0000001c cyclesCounterInit
1a0001ba  w    F .text	00000002 GPIO4_IRQHandler
1a0006f8 g     F .text	0000000c Board_SystemInit



Disassembly of section .text:

1a000000 <g_pfnVectors>:
1a000000:	00 80 00 10 1d 04 00 1a 79 01 00 1a 7b 01 00 1a     ........y...{...
1a000010:	7d 01 00 1a 7f 01 00 1a 81 01 00 1a 72 74 ff 53     }...........rt.S
	...
1a00002c:	83 01 00 1a 85 01 00 1a 00 00 00 00 87 01 00 1a     ................
1a00003c:	b9 17 00 1a                                         ....

1a000040 <g_pfnVendorVectors>:
1a000040:	bb 01 00 1a bb 01 00 1a bb 01 00 1a 00 00 00 00     ................
1a000050:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000060:	c1 18 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000070:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000080:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000090:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000a0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000b0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000c0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000d0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000e0:	bb 01 00 1a bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a0000f0:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000100:	00 00 00 00 bb 01 00 1a bb 01 00 1a bb 01 00 1a     ................
1a000110:	bb 01 00 1a                                         ....

1a000114 <__data_section_table>:
1a000114:	1a001fe0 	.word	0x1a001fe0
1a000118:	10000000 	.word	0x10000000
1a00011c:	00000048 	.word	0x00000048
1a000120:	1a001fe0 	.word	0x1a001fe0
1a000124:	10080000 	.word	0x10080000
1a000128:	00000000 	.word	0x00000000
1a00012c:	1a001fe0 	.word	0x1a001fe0
1a000130:	20000000 	.word	0x20000000
1a000134:	00000000 	.word	0x00000000
1a000138:	1a001fe0 	.word	0x1a001fe0
1a00013c:	20008000 	.word	0x20008000
1a000140:	00000000 	.word	0x00000000
1a000144:	1a001fe0 	.word	0x1a001fe0
1a000148:	2000c000 	.word	0x2000c000
1a00014c:	00000000 	.word	0x00000000

1a000150 <__bss_section_table>:
1a000150:	10000048 	.word	0x10000048
1a000154:	00000034 	.word	0x00000034
1a000158:	10080000 	.word	0x10080000
1a00015c:	00000000 	.word	0x00000000
1a000160:	20000000 	.word	0x20000000
1a000164:	00000000 	.word	0x00000000
1a000168:	20008000 	.word	0x20008000
1a00016c:	00000000 	.word	0x00000000
1a000170:	2000c000 	.word	0x2000c000
1a000174:	00000000 	.word	0x00000000

1a000178 <NMI_Handler>:

}

__attribute__ ((section(".after_vectors")))
void NMI_Handler(void) {
    while (1) {
1a000178:	e7fe      	b.n	1a000178 <NMI_Handler>

1a00017a <HardFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void HardFault_Handler(void) {
    while (1) {
1a00017a:	e7fe      	b.n	1a00017a <HardFault_Handler>

1a00017c <MemManage_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void MemManage_Handler(void) {
    while (1) {
1a00017c:	e7fe      	b.n	1a00017c <MemManage_Handler>

1a00017e <BusFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void BusFault_Handler(void) {
    while (1) {
1a00017e:	e7fe      	b.n	1a00017e <BusFault_Handler>

1a000180 <UsageFault_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void UsageFault_Handler(void) {
    while (1) {
1a000180:	e7fe      	b.n	1a000180 <UsageFault_Handler>

1a000182 <SVC_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void SVC_Handler(void) {
    while (1) {
1a000182:	e7fe      	b.n	1a000182 <SVC_Handler>

1a000184 <DebugMon_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void DebugMon_Handler(void) {
    while (1) {
1a000184:	e7fe      	b.n	1a000184 <DebugMon_Handler>

1a000186 <PendSV_Handler>:
    }
}
__attribute__ ((section(".after_vectors")))
void PendSV_Handler(void) {
    while (1) {
1a000186:	e7fe      	b.n	1a000186 <PendSV_Handler>
    }
}
__attribute__ ((section(".after_vectors")))
void SysTick_Handler(void) {
    while (1) {
1a000188:	e7fe      	b.n	1a000188 <PendSV_Handler+0x2>

1a00018a <data_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a00018a:	2300      	movs	r3, #0
1a00018c:	4293      	cmp	r3, r2
1a00018e:	d20a      	bcs.n	1a0001a6 <data_init+0x1c>
void data_init(unsigned int romstart, unsigned int start, unsigned int len) {
1a000190:	b410      	push	{r4}
        *pulDest++ = *pulSrc++;
1a000192:	f850 4b04 	ldr.w	r4, [r0], #4
1a000196:	f841 4b04 	str.w	r4, [r1], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a00019a:	3304      	adds	r3, #4
1a00019c:	4293      	cmp	r3, r2
1a00019e:	d3f8      	bcc.n	1a000192 <data_init+0x8>
}
1a0001a0:	f85d 4b04 	ldr.w	r4, [sp], #4
1a0001a4:	4770      	bx	lr
1a0001a6:	4770      	bx	lr

1a0001a8 <bss_init>:
    for (loop = 0; loop < len; loop = loop + 4)
1a0001a8:	2300      	movs	r3, #0
1a0001aa:	e003      	b.n	1a0001b4 <bss_init+0xc>
        *pulDest++ = 0;
1a0001ac:	2200      	movs	r2, #0
1a0001ae:	f840 2b04 	str.w	r2, [r0], #4
    for (loop = 0; loop < len; loop = loop + 4)
1a0001b2:	3304      	adds	r3, #4
1a0001b4:	428b      	cmp	r3, r1
1a0001b6:	d3f9      	bcc.n	1a0001ac <bss_init+0x4>
}
1a0001b8:	4770      	bx	lr

1a0001ba <ADC0_IRQHandler>:
};
#endif

__attribute__ ((section(".after_vectors")))
void IntDefaultHandler(void) {
    while (1) {
1a0001ba:	e7fe      	b.n	1a0001ba <ADC0_IRQHandler>
1a0001bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0001fc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000200:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000204:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000208:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00020c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000210:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000214:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000218:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00021c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000220:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000224:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000228:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00022c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000230:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000234:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000238:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00023c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000240:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000244:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000248:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00024c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000250:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000254:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000258:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00025c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000260:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000264:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000268:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00026c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000270:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000274:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000278:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00027c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000280:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000284:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000288:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00028c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000290:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000294:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a000298:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a00029c:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002a8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ac:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002b8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002bc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002c8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002cc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002d8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002dc:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002e8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002ec:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f0:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f4:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff
1a0002f8:	ffff ffff 			; <UNDEFINED> instruction: 0xffffffff

1a0002fc <CRP_WORD>:
1a0002fc:	ffff ffff                                   ....

Disassembly of section .text:

1a000304 <itoa>:
 * C++ version 0.4 char* style "itoa":
 * Written by Lukás Chmela
 * Released under GPLv3.

 */
char* itoa(int value, char* result, int base) {
1a000304:	b530      	push	{r4, r5, lr}
1a000306:	4604      	mov	r4, r0
1a000308:	4608      	mov	r0, r1
   // check that the base if valid
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a00030a:	1e93      	subs	r3, r2, #2
1a00030c:	2b22      	cmp	r3, #34	; 0x22
1a00030e:	d818      	bhi.n	1a000342 <itoa+0x3e>

   char* ptr = result, *ptr1 = result, tmp_char;
1a000310:	460b      	mov	r3, r1
   int tmp_value;

   do {
      tmp_value = value;
      value /= base;
1a000312:	46a6      	mov	lr, r4
1a000314:	fb94 f4f2 	sdiv	r4, r4, r2
      *ptr++ = "zyxwvutsrqponmlkjihgfedcba9876543210123456789abcdefghijklmnopqrstuvwxyz" [35 + (tmp_value - value * base)];
1a000318:	fb02 ec14 	mls	ip, r2, r4, lr
1a00031c:	f10c 0c23 	add.w	ip, ip, #35	; 0x23
1a000320:	4619      	mov	r1, r3
1a000322:	3301      	adds	r3, #1
1a000324:	4d0f      	ldr	r5, [pc, #60]	; (1a000364 <itoa+0x60>)
1a000326:	f815 c00c 	ldrb.w	ip, [r5, ip]
1a00032a:	f881 c000 	strb.w	ip, [r1]
   } while ( value );
1a00032e:	2c00      	cmp	r4, #0
1a000330:	d1ef      	bne.n	1a000312 <itoa+0xe>

   // Apply negative sign
   if (tmp_value < 0) *ptr++ = '-';
1a000332:	f1be 0f00 	cmp.w	lr, #0
1a000336:	db07      	blt.n	1a000348 <itoa+0x44>
   *ptr-- = '\0';
1a000338:	2200      	movs	r2, #0
1a00033a:	f803 2901 	strb.w	r2, [r3], #-1
   char* ptr = result, *ptr1 = result, tmp_char;
1a00033e:	4602      	mov	r2, r0
   while(ptr1 < ptr) {
1a000340:	e00c      	b.n	1a00035c <itoa+0x58>
   if (base < 2 || base > 36) { *result = '\0'; return result; }
1a000342:	2300      	movs	r3, #0
1a000344:	700b      	strb	r3, [r1, #0]
1a000346:	e00b      	b.n	1a000360 <itoa+0x5c>
   if (tmp_value < 0) *ptr++ = '-';
1a000348:	222d      	movs	r2, #45	; 0x2d
1a00034a:	701a      	strb	r2, [r3, #0]
1a00034c:	1c8b      	adds	r3, r1, #2
1a00034e:	e7f3      	b.n	1a000338 <itoa+0x34>
      tmp_char = *ptr;
1a000350:	7819      	ldrb	r1, [r3, #0]
      *ptr--= *ptr1;
1a000352:	7814      	ldrb	r4, [r2, #0]
1a000354:	f803 4901 	strb.w	r4, [r3], #-1
      *ptr1++ = tmp_char;
1a000358:	f802 1b01 	strb.w	r1, [r2], #1
   while(ptr1 < ptr) {
1a00035c:	4293      	cmp	r3, r2
1a00035e:	d8f7      	bhi.n	1a000350 <itoa+0x4c>
   }
   return result;
}
1a000360:	bd30      	pop	{r4, r5, pc}
1a000362:	bf00      	nop
1a000364:	1a001cd0 	.word	0x1a001cd0

1a000368 <main>:


/* FUNCION PRINCIPAL, PUNTO DE ENTRADA AL PROGRAMA LUEGO DE RESET. */
int main(void){
1a000368:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00036a:	b08d      	sub	sp, #52	; 0x34

   /* ------------- INICIALIZACIONES ------------- */

   /* Inicializar la placa */
   boardConfig();
1a00036c:	f001 fab6 	bl	1a0018dc <boardInit>

   /* Inicializar UART_USB a 115200 baudios */
   uartConfig( UART_USB, 115200 );
1a000370:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000374:	2003      	movs	r0, #3
1a000376:	f001 fa4b 	bl	1a001810 <uartInit>
   /* Inicializar AnalogIO */
   /* Posibles configuraciones:
    *    ADC_ENABLE,  ADC_DISABLE,
    *    ADC_ENABLE,  ADC_DISABLE,
    */
   adcConfig( ADC_ENABLE ); /* ADC */
1a00037a:	2000      	movs	r0, #0
1a00037c:	f000 fff0 	bl	1a001360 <adcInit>
   dacConfig( DAC_ENABLE ); /* DAC */
1a000380:	2000      	movs	r0, #0
1a000382:	f001 f875 	bl	1a001470 <dacInit>
   /* Variables de delays no bloqueantes */
   delay_t delay1;
   delay_t delay2;

   /* Inicializar Retardo no bloqueante con tiempo en ms */
   delayConfig( &delay1, 500 );
1a000386:	f44f 72fa 	mov.w	r2, #500	; 0x1f4
1a00038a:	2300      	movs	r3, #0
1a00038c:	a806      	add	r0, sp, #24
1a00038e:	f001 fadf 	bl	1a001950 <delayInit>
   delayConfig( &delay2, 200 );
1a000392:	22c8      	movs	r2, #200	; 0xc8
1a000394:	2300      	movs	r3, #0
1a000396:	4668      	mov	r0, sp
1a000398:	f001 fada 	bl	1a001950 <delayInit>
   uint32_t i = 0;
1a00039c:	2600      	movs	r6, #0
   bool_t ledState1 = OFF;
1a00039e:	4637      	mov	r7, r6
1a0003a0:	e003      	b.n	1a0003aa <main+0x42>
         /* Escribo la muestra en la Salida AnalogicaAO - DAC */
         dacWrite( DAC, muestra );
      }

      /* delayRead retorna TRUE cuando se cumple el tiempo de retardo */
      if ( delayRead( &delay2 ) ){
1a0003a2:	4668      	mov	r0, sp
1a0003a4:	f001 fae4 	bl	1a001970 <delayRead>
1a0003a8:	b9f8      	cbnz	r0, 1a0003ea <main+0x82>
      if ( delayRead( &delay1 ) ){
1a0003aa:	a806      	add	r0, sp, #24
1a0003ac:	f001 fae0 	bl	1a001970 <delayRead>
1a0003b0:	2800      	cmp	r0, #0
1a0003b2:	d0f6      	beq.n	1a0003a2 <main+0x3a>
         muestra = adcRead( CH1 );
1a0003b4:	2000      	movs	r0, #0
1a0003b6:	f001 f82f 	bl	1a001418 <adcRead>
1a0003ba:	4604      	mov	r4, r0
         uartWriteString( UART_USB, "ADC CH1 value: " );
1a0003bc:	4913      	ldr	r1, [pc, #76]	; (1a00040c <main+0xa4>)
1a0003be:	2003      	movs	r0, #3
1a0003c0:	f001 fa71 	bl	1a0018a6 <uartWriteString>
         itoa( muestra, uartBuff, 10 ); /* 10 significa decimal */
1a0003c4:	4d12      	ldr	r5, [pc, #72]	; (1a000410 <main+0xa8>)
1a0003c6:	220a      	movs	r2, #10
1a0003c8:	4629      	mov	r1, r5
1a0003ca:	4620      	mov	r0, r4
1a0003cc:	f7ff ff9a 	bl	1a000304 <itoa>
         uartWriteString( UART_USB, uartBuff );
1a0003d0:	4629      	mov	r1, r5
1a0003d2:	2003      	movs	r0, #3
1a0003d4:	f001 fa67 	bl	1a0018a6 <uartWriteString>
         uartWriteString( UART_USB, ";\r\n" );
1a0003d8:	490e      	ldr	r1, [pc, #56]	; (1a000414 <main+0xac>)
1a0003da:	2003      	movs	r0, #3
1a0003dc:	f001 fa63 	bl	1a0018a6 <uartWriteString>
         dacWrite( DAC, muestra );
1a0003e0:	4621      	mov	r1, r4
1a0003e2:	2000      	movs	r0, #0
1a0003e4:	f001 f866 	bl	1a0014b4 <dacWrite>
1a0003e8:	e7db      	b.n	1a0003a2 <main+0x3a>
         ledState1 = !ledState1;
1a0003ea:	f087 0701 	eor.w	r7, r7, #1
         gpioWrite( LED1, ledState1 );
1a0003ee:	4639      	mov	r1, r7
1a0003f0:	202b      	movs	r0, #43	; 0x2b
1a0003f2:	f001 f95f 	bl	1a0016b4 <gpioWrite>

         /* Si pasaron 20 delays le aumento el tiempo */
         i++;
1a0003f6:	3601      	adds	r6, #1
         if( i == 20 )
1a0003f8:	2e14      	cmp	r6, #20
1a0003fa:	d1d6      	bne.n	1a0003aa <main+0x42>
            delayWrite( &delay2, 1000 );
1a0003fc:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a000400:	2300      	movs	r3, #0
1a000402:	4668      	mov	r0, sp
1a000404:	f001 fad2 	bl	1a0019ac <delayWrite>
1a000408:	e7cf      	b.n	1a0003aa <main+0x42>
1a00040a:	bf00      	nop
1a00040c:	1a001d18 	.word	0x1a001d18
1a000410:	10000048 	.word	0x10000048
1a000414:	1a001d28 	.word	0x1a001d28

1a000418 <initialise_monitor_handles>:
}
1a000418:	4770      	bx	lr
	...

1a00041c <Reset_Handler>:
void Reset_Handler(void) {
1a00041c:	b510      	push	{r4, lr}
    __asm__ volatile("cpsid i");
1a00041e:	b672      	cpsid	i
    *(RESET_CONTROL + 0) = 0x10DF1000;
1a000420:	4b19      	ldr	r3, [pc, #100]	; (1a000488 <Reset_Handler+0x6c>)
1a000422:	4a1a      	ldr	r2, [pc, #104]	; (1a00048c <Reset_Handler+0x70>)
1a000424:	f8c3 2100 	str.w	r2, [r3, #256]	; 0x100
    *(RESET_CONTROL + 1) = 0x01DFF7FF;
1a000428:	4a19      	ldr	r2, [pc, #100]	; (1a000490 <Reset_Handler+0x74>)
1a00042a:	f8c3 2104 	str.w	r2, [r3, #260]	; 0x104
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00042e:	2300      	movs	r3, #0
1a000430:	e005      	b.n	1a00043e <Reset_Handler+0x22>
        *(NVIC_ICPR + irqpendloop) = 0xFFFFFFFF;
1a000432:	4a18      	ldr	r2, [pc, #96]	; (1a000494 <Reset_Handler+0x78>)
1a000434:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
1a000438:	f842 1023 	str.w	r1, [r2, r3, lsl #2]
    for (irqpendloop = 0; irqpendloop < 8; irqpendloop++) {
1a00043c:	3301      	adds	r3, #1
1a00043e:	2b07      	cmp	r3, #7
1a000440:	d9f7      	bls.n	1a000432 <Reset_Handler+0x16>
    __asm__ volatile("cpsie i");
1a000442:	b662      	cpsie	i
    SectionTableAddr = &__data_section_table;
1a000444:	4b14      	ldr	r3, [pc, #80]	; (1a000498 <Reset_Handler+0x7c>)
    while (SectionTableAddr < &__data_section_table_end) {
1a000446:	e007      	b.n	1a000458 <Reset_Handler+0x3c>
        SectionLen = *SectionTableAddr++;
1a000448:	f103 040c 	add.w	r4, r3, #12
        data_init(LoadAddr, ExeAddr, SectionLen);
1a00044c:	689a      	ldr	r2, [r3, #8]
1a00044e:	6859      	ldr	r1, [r3, #4]
1a000450:	6818      	ldr	r0, [r3, #0]
1a000452:	f7ff fe9a 	bl	1a00018a <data_init>
        SectionLen = *SectionTableAddr++;
1a000456:	4623      	mov	r3, r4
    while (SectionTableAddr < &__data_section_table_end) {
1a000458:	4a10      	ldr	r2, [pc, #64]	; (1a00049c <Reset_Handler+0x80>)
1a00045a:	4293      	cmp	r3, r2
1a00045c:	d3f4      	bcc.n	1a000448 <Reset_Handler+0x2c>
1a00045e:	e006      	b.n	1a00046e <Reset_Handler+0x52>
        ExeAddr = *SectionTableAddr++;
1a000460:	461c      	mov	r4, r3
        bss_init(ExeAddr, SectionLen);
1a000462:	6859      	ldr	r1, [r3, #4]
1a000464:	f854 0b08 	ldr.w	r0, [r4], #8
1a000468:	f7ff fe9e 	bl	1a0001a8 <bss_init>
        SectionLen = *SectionTableAddr++;
1a00046c:	4623      	mov	r3, r4
    while (SectionTableAddr < &__bss_section_table_end) {
1a00046e:	4a0c      	ldr	r2, [pc, #48]	; (1a0004a0 <Reset_Handler+0x84>)
1a000470:	4293      	cmp	r3, r2
1a000472:	d3f5      	bcc.n	1a000460 <Reset_Handler+0x44>
    SystemInit();
1a000474:	f000 ff4a 	bl	1a00130c <SystemInit>
    __libc_init_array();
1a000478:	f001 fbfe 	bl	1a001c78 <__libc_init_array>
    initialise_monitor_handles();
1a00047c:	f7ff ffcc 	bl	1a000418 <initialise_monitor_handles>
    main();
1a000480:	f7ff ff72 	bl	1a000368 <main>
        __asm__ volatile("wfi");
1a000484:	bf30      	wfi
    while (1) {
1a000486:	e7fd      	b.n	1a000484 <Reset_Handler+0x68>
1a000488:	40053000 	.word	0x40053000
1a00048c:	10df1000 	.word	0x10df1000
1a000490:	01dff7ff 	.word	0x01dff7ff
1a000494:	e000e280 	.word	0xe000e280
1a000498:	1a000114 	.word	0x1a000114
1a00049c:	1a000150 	.word	0x1a000150
1a0004a0:	1a000178 	.word	0x1a000178

1a0004a4 <_fini>:
void _fini(void) {}
1a0004a4:	4770      	bx	lr

1a0004a6 <_init>:
void _init(void) {}
1a0004a6:	4770      	bx	lr

1a0004a8 <Board_LED_Init>:
#define GPIO_PORTS_SIZE     (sizeof(GpioPorts) / sizeof(struct gpio_t))


static void Board_LED_Init()
{
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0004a8:	2200      	movs	r2, #0
1a0004aa:	2a05      	cmp	r2, #5
1a0004ac:	d81b      	bhi.n	1a0004e6 <Board_LED_Init+0x3e>
{
1a0004ae:	b510      	push	{r4, lr}
      const struct gpio_t *io = &GpioLeds[i];
      Chip_GPIO_SetPinDIROutput(LPC_GPIO_PORT, io->port, io->pin);
1a0004b0:	4b0d      	ldr	r3, [pc, #52]	; (1a0004e8 <Board_LED_Init+0x40>)
1a0004b2:	f813 e012 	ldrb.w	lr, [r3, r2, lsl #1]
1a0004b6:	eb03 0342 	add.w	r3, r3, r2, lsl #1
1a0004ba:	f893 c001 	ldrb.w	ip, [r3, #1]
 * @param	pin		: GPIO pin to set direction on as output
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIROutput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] |= 1UL << pin;
1a0004be:	4b0b      	ldr	r3, [pc, #44]	; (1a0004ec <Board_LED_Init+0x44>)
1a0004c0:	f50e 6400 	add.w	r4, lr, #2048	; 0x800
1a0004c4:	f853 1024 	ldr.w	r1, [r3, r4, lsl #2]
1a0004c8:	2001      	movs	r0, #1
1a0004ca:	fa00 f00c 	lsl.w	r0, r0, ip
1a0004ce:	4301      	orrs	r1, r0
1a0004d0:	f843 1024 	str.w	r1, [r3, r4, lsl #2]
	pGPIO->B[port][pin] = setting;
1a0004d4:	eb03 134e 	add.w	r3, r3, lr, lsl #5
1a0004d8:	2100      	movs	r1, #0
1a0004da:	f803 100c 	strb.w	r1, [r3, ip]
   for (uint32_t i = 0; i < GPIO_LEDS_SIZE; ++i) {
1a0004de:	3201      	adds	r2, #1
1a0004e0:	2a05      	cmp	r2, #5
1a0004e2:	d9e5      	bls.n	1a0004b0 <Board_LED_Init+0x8>
      Chip_GPIO_SetPinState(LPC_GPIO_PORT, io->port, io->pin, false);
   }
}
1a0004e4:	bd10      	pop	{r4, pc}
1a0004e6:	4770      	bx	lr
1a0004e8:	1a001d38 	.word	0x1a001d38
1a0004ec:	400f4000 	.word	0x400f4000

1a0004f0 <Board_TEC_Init>:


static void Board_TEC_Init()
{
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a0004f0:	2300      	movs	r3, #0
1a0004f2:	2b03      	cmp	r3, #3
1a0004f4:	d819      	bhi.n	1a00052a <Board_TEC_Init+0x3a>
{
1a0004f6:	b410      	push	{r4}
      const struct gpio_t *io = &GpioButtons[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a0004f8:	490c      	ldr	r1, [pc, #48]	; (1a00052c <Board_TEC_Init+0x3c>)
1a0004fa:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a0004fe:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000502:	f891 c001 	ldrb.w	ip, [r1, #1]
 * @param	pin		: GPIO pin to set direction on as input
 * @return	Nothing
 */
STATIC INLINE void Chip_GPIO_SetPinDIRInput(LPC_GPIO_T *pGPIO, uint8_t port, uint8_t pin)
{
	pGPIO->DIR[port] &= ~(1UL << pin);
1a000506:	4c0a      	ldr	r4, [pc, #40]	; (1a000530 <Board_TEC_Init+0x40>)
1a000508:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a00050c:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000510:	2001      	movs	r0, #1
1a000512:	fa00 f00c 	lsl.w	r0, r0, ip
1a000516:	ea21 0100 	bic.w	r1, r1, r0
1a00051a:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_BUTTONS_SIZE; ++i) {
1a00051e:	3301      	adds	r3, #1
1a000520:	2b03      	cmp	r3, #3
1a000522:	d9e9      	bls.n	1a0004f8 <Board_TEC_Init+0x8>
   }
}
1a000524:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000528:	4770      	bx	lr
1a00052a:	4770      	bx	lr
1a00052c:	1a001d30 	.word	0x1a001d30
1a000530:	400f4000 	.word	0x400f4000

1a000534 <Board_GPIO_Init>:


static void Board_GPIO_Init()
{
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000534:	2300      	movs	r3, #0
1a000536:	2b08      	cmp	r3, #8
1a000538:	d819      	bhi.n	1a00056e <Board_GPIO_Init+0x3a>
{
1a00053a:	b410      	push	{r4}
      const struct gpio_t *io = &GpioPorts[i];
      Chip_GPIO_SetPinDIRInput(LPC_GPIO_PORT, io->port, io->pin);
1a00053c:	490c      	ldr	r1, [pc, #48]	; (1a000570 <Board_GPIO_Init+0x3c>)
1a00053e:	f811 2013 	ldrb.w	r2, [r1, r3, lsl #1]
1a000542:	eb01 0143 	add.w	r1, r1, r3, lsl #1
1a000546:	f891 c001 	ldrb.w	ip, [r1, #1]
1a00054a:	4c0a      	ldr	r4, [pc, #40]	; (1a000574 <Board_GPIO_Init+0x40>)
1a00054c:	f502 6200 	add.w	r2, r2, #2048	; 0x800
1a000550:	f854 1022 	ldr.w	r1, [r4, r2, lsl #2]
1a000554:	2001      	movs	r0, #1
1a000556:	fa00 f00c 	lsl.w	r0, r0, ip
1a00055a:	ea21 0100 	bic.w	r1, r1, r0
1a00055e:	f844 1022 	str.w	r1, [r4, r2, lsl #2]
   for (uint32_t i = 0; i < GPIO_PORTS_SIZE; ++i) {
1a000562:	3301      	adds	r3, #1
1a000564:	2b08      	cmp	r3, #8
1a000566:	d9e9      	bls.n	1a00053c <Board_GPIO_Init+0x8>
   }
}
1a000568:	f85d 4b04 	ldr.w	r4, [sp], #4
1a00056c:	4770      	bx	lr
1a00056e:	4770      	bx	lr
1a000570:	1a001d44 	.word	0x1a001d44
1a000574:	400f4000 	.word	0x400f4000

1a000578 <Board_ADC_Init>:
   Chip_SSP_Enable(LPC_SSP1);
}


static void Board_ADC_Init()
{
1a000578:	b510      	push	{r4, lr}
1a00057a:	b082      	sub	sp, #8
   ADC_CLOCK_SETUP_T cs;

   Chip_ADC_Init(LPC_ADC0, &cs);
1a00057c:	4c08      	ldr	r4, [pc, #32]	; (1a0005a0 <Board_ADC_Init+0x28>)
1a00057e:	4669      	mov	r1, sp
1a000580:	4620      	mov	r0, r4
1a000582:	f000 f8f5 	bl	1a000770 <Chip_ADC_Init>
   Chip_ADC_SetSampleRate(LPC_ADC0, &cs, BOARD_ADC_SAMPLE_RATE);
1a000586:	4a07      	ldr	r2, [pc, #28]	; (1a0005a4 <Board_ADC_Init+0x2c>)
1a000588:	4669      	mov	r1, sp
1a00058a:	4620      	mov	r0, r4
1a00058c:	f000 f956 	bl	1a00083c <Chip_ADC_SetSampleRate>
   Chip_ADC_SetResolution(LPC_ADC0, &cs, BOARD_ADC_RESOLUTION);
1a000590:	2200      	movs	r2, #0
1a000592:	4669      	mov	r1, sp
1a000594:	4620      	mov	r0, r4
1a000596:	f000 f96a 	bl	1a00086e <Chip_ADC_SetResolution>
}
1a00059a:	b002      	add	sp, #8
1a00059c:	bd10      	pop	{r4, pc}
1a00059e:	bf00      	nop
1a0005a0:	400e3000 	.word	0x400e3000
1a0005a4:	00061a80 	.word	0x00061a80

1a0005a8 <Board_SPI_Init>:
{
1a0005a8:	b510      	push	{r4, lr}
   Chip_SSP_Init(LPC_SSP1);
1a0005aa:	4c0b      	ldr	r4, [pc, #44]	; (1a0005d8 <Board_SPI_Init+0x30>)
1a0005ac:	4620      	mov	r0, r4
1a0005ae:	f000 fd17 	bl	1a000fe0 <Chip_SSP_Init>
 *						- SSP_MODE_SLAVE
 * @return	 Nothing
 */
STATIC INLINE void Chip_SSP_Set_Mode(LPC_SSP_T *pSSP, uint32_t mode)
{
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a0005b2:	6863      	ldr	r3, [r4, #4]
1a0005b4:	f023 0304 	bic.w	r3, r3, #4
1a0005b8:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a0005ba:	6823      	ldr	r3, [r4, #0]
1a0005bc:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a0005c0:	f043 0307 	orr.w	r3, r3, #7
1a0005c4:	6023      	str	r3, [r4, #0]
   Chip_SSP_SetBitRate(LPC_SSP1, BOARD_SPI_SPEED);
1a0005c6:	4905      	ldr	r1, [pc, #20]	; (1a0005dc <Board_SPI_Init+0x34>)
1a0005c8:	4620      	mov	r0, r4
1a0005ca:	f000 fce8 	bl	1a000f9e <Chip_SSP_SetBitRate>
	pSSP->CR1 |= SSP_CR1_SSP_EN;
1a0005ce:	6863      	ldr	r3, [r4, #4]
1a0005d0:	f043 0302 	orr.w	r3, r3, #2
1a0005d4:	6063      	str	r3, [r4, #4]
}
1a0005d6:	bd10      	pop	{r4, pc}
1a0005d8:	400c5000 	.word	0x400c5000
1a0005dc:	000186a0 	.word	0x000186a0

1a0005e0 <Board_I2C_Init>:
{
1a0005e0:	b508      	push	{r3, lr}
   Chip_I2C_Init(I2C0);
1a0005e2:	2000      	movs	r0, #0
1a0005e4:	f000 fc8a 	bl	1a000efc <Chip_I2C_Init>
 *                  - I2C0_FAST_MODE_PLUS: Fast-mode Plus transmit
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_I2C0PinConfig(uint32_t I2C0Mode)
{
	LPC_SCU->SFSI2C0 = I2C0Mode;
1a0005e8:	4b04      	ldr	r3, [pc, #16]	; (1a0005fc <Board_I2C_Init+0x1c>)
1a0005ea:	f640 0208 	movw	r2, #2056	; 0x808
1a0005ee:	f8c3 2c84 	str.w	r2, [r3, #3204]	; 0xc84
   Chip_I2C_SetClockRate(I2C0, BOARD_I2C_SPEED);
1a0005f2:	4903      	ldr	r1, [pc, #12]	; (1a000600 <Board_I2C_Init+0x20>)
1a0005f4:	2000      	movs	r0, #0
1a0005f6:	f000 fc95 	bl	1a000f24 <Chip_I2C_SetClockRate>
}
1a0005fa:	bd08      	pop	{r3, pc}
1a0005fc:	40086000 	.word	0x40086000
1a000600:	000f4240 	.word	0x000f4240

1a000604 <Board_Debug_Init>:


void Board_Debug_Init(void)
{
1a000604:	b510      	push	{r4, lr}
   Chip_UART_Init(DEBUG_UART);
1a000606:	4c07      	ldr	r4, [pc, #28]	; (1a000624 <Board_Debug_Init+0x20>)
1a000608:	4620      	mov	r0, r4
1a00060a:	f000 fdc7 	bl	1a00119c <Chip_UART_Init>
   Chip_UART_SetBaudFDR(DEBUG_UART, DEBUG_UART_BAUD_RATE);
1a00060e:	f44f 31e1 	mov.w	r1, #115200	; 0x1c200
1a000612:	4620      	mov	r0, r4
1a000614:	f000 fe0c 	bl	1a001230 <Chip_UART_SetBaudFDR>
 *			stop bit, and even (enabled) parity would be
 *			(UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_EN | UART_LCR_PARITY_EVEN)
 */
STATIC INLINE void Chip_UART_ConfigData(LPC_USART_T *pUART, uint32_t config)
{
	pUART->LCR = config;
1a000618:	2303      	movs	r3, #3
1a00061a:	60e3      	str	r3, [r4, #12]
    pUART->TER2 = UART_TER2_TXEN;
1a00061c:	2301      	movs	r3, #1
1a00061e:	65e3      	str	r3, [r4, #92]	; 0x5c
   Chip_UART_ConfigData(DEBUG_UART, DEBUG_UART_CONFIG);
   Chip_UART_TXEnable(DEBUG_UART);
}
1a000620:	bd10      	pop	{r4, pc}
1a000622:	bf00      	nop
1a000624:	400c1000 	.word	0x400c1000

1a000628 <Board_Init>:
   Board_LED_Set(LEDNumber, !Board_LED_Test(LEDNumber));
}


void Board_Init(void)
{
1a000628:	b508      	push	{r3, lr}
   DEBUGINIT();
1a00062a:	f7ff ffeb 	bl	1a000604 <Board_Debug_Init>
   Chip_GPIO_Init (LPC_GPIO_PORT);
1a00062e:	4809      	ldr	r0, [pc, #36]	; (1a000654 <Board_Init+0x2c>)
1a000630:	f000 fc53 	bl	1a000eda <Chip_GPIO_Init>

   Board_GPIO_Init();
1a000634:	f7ff ff7e 	bl	1a000534 <Board_GPIO_Init>
   Board_ADC_Init();
1a000638:	f7ff ff9e 	bl	1a000578 <Board_ADC_Init>
   Board_SPI_Init();
1a00063c:	f7ff ffb4 	bl	1a0005a8 <Board_SPI_Init>
   Board_I2C_Init();
1a000640:	f7ff ffce 	bl	1a0005e0 <Board_I2C_Init>

   Board_LED_Init();
1a000644:	f7ff ff30 	bl	1a0004a8 <Board_LED_Init>
   Board_TEC_Init();
1a000648:	f7ff ff52 	bl	1a0004f0 <Board_TEC_Init>
#ifdef USE_RMII
   Chip_ENET_RMIIEnable(LPC_ETHERNET);
#endif

   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate(); // @Eric
1a00064c:	f000 f938 	bl	1a0008c0 <SystemCoreClockUpdate>
}
1a000650:	bd08      	pop	{r3, pc}
1a000652:	bf00      	nop
1a000654:	400f4000 	.word	0x400f4000

1a000658 <__stdio_init>:
{
   return Board_UARTGetChar();;
}

void __stdio_init()
{
1a000658:	b508      	push	{r3, lr}
   Board_Debug_Init();
1a00065a:	f7ff ffd3 	bl	1a000604 <Board_Debug_Init>
1a00065e:	bd08      	pop	{r3, pc}

1a000660 <Board_SetupMuxing>:
 * @return	Nothing
 */
STATIC INLINE void Chip_SCU_SetPinMuxing(const PINMUX_GRP_T *pinArray, uint32_t arrayLength)
{
	uint32_t ix;
	for (ix = 0; ix < arrayLength; ix++ ) {
1a000660:	2300      	movs	r3, #0
1a000662:	e00c      	b.n	1a00067e <Board_SetupMuxing+0x1e>
		Chip_SCU_PinMuxSet(pinArray[ix].pingrp, pinArray[ix].pinnum, pinArray[ix].modefunc);
1a000664:	4a07      	ldr	r2, [pc, #28]	; (1a000684 <Board_SetupMuxing+0x24>)
1a000666:	eb02 0183 	add.w	r1, r2, r3, lsl #2
1a00066a:	f812 c023 	ldrb.w	ip, [r2, r3, lsl #2]
1a00066e:	784a      	ldrb	r2, [r1, #1]
1a000670:	8848      	ldrh	r0, [r1, #2]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a000672:	eb02 124c 	add.w	r2, r2, ip, lsl #5
1a000676:	4904      	ldr	r1, [pc, #16]	; (1a000688 <Board_SetupMuxing+0x28>)
1a000678:	f841 0022 	str.w	r0, [r1, r2, lsl #2]
	for (ix = 0; ix < arrayLength; ix++ ) {
1a00067c:	3301      	adds	r3, #1
1a00067e:	2b1c      	cmp	r3, #28
1a000680:	d9f0      	bls.n	1a000664 <Board_SetupMuxing+0x4>


void Board_SetupMuxing(void)
{
    Chip_SCU_SetPinMuxing(pinmuxing, sizeof(pinmuxing) / sizeof(PINMUX_GRP_T));
}
1a000682:	4770      	bx	lr
1a000684:	1a001d60 	.word	0x1a001d60
1a000688:	40086000 	.word	0x40086000

1a00068c <Board_SetupClocking>:


void Board_SetupClocking(void)
{
1a00068c:	b510      	push	{r4, lr}
 */
STATIC INLINE void Chip_CREG_SetFlashAcceleration(uint32_t Hz)
{
	uint32_t FAValue = Hz / 21510000;

	LPC_CREG->FLASHCFGA = (LPC_CREG->FLASHCFGA & (~(0xF << 12))) | (FAValue << 12);
1a00068e:	4a17      	ldr	r2, [pc, #92]	; (1a0006ec <Board_SetupClocking+0x60>)
1a000690:	f8d2 3120 	ldr.w	r3, [r2, #288]	; 0x120
1a000694:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a000698:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a00069c:	f8c2 3120 	str.w	r3, [r2, #288]	; 0x120
	LPC_CREG->FLASHCFGB = (LPC_CREG->FLASHCFGB & (~(0xF << 12))) | (FAValue << 12);
1a0006a0:	f8d2 3124 	ldr.w	r3, [r2, #292]	; 0x124
1a0006a4:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
1a0006a8:	f443 4310 	orr.w	r3, r3, #36864	; 0x9000
1a0006ac:	f8c2 3124 	str.w	r3, [r2, #292]	; 0x124
    Chip_CREG_SetFlashAcceleration(MAX_CLOCK_FREQ);
    Chip_SetupCoreClock(CLKIN_CRYSTAL, MAX_CLOCK_FREQ, true);
1a0006b0:	2201      	movs	r2, #1
1a0006b2:	490f      	ldr	r1, [pc, #60]	; (1a0006f0 <Board_SetupClocking+0x64>)
1a0006b4:	2006      	movs	r0, #6
1a0006b6:	f000 fcaf 	bl	1a001018 <Chip_SetupCoreClock>

    /* Setup system base clocks and initial states. This won't enable and
       disable individual clocks, but sets up the base clock sources for
       each individual peripheral clock. */
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0006ba:	2400      	movs	r4, #0
1a0006bc:	b14c      	cbz	r4, 1a0006d2 <Board_SetupClocking+0x46>
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
                                c->powerdn);
    }

    /* Reset and enable 32Khz oscillator */
    LPC_CREG->CREG0 &= ~((1 << 3) | (1 << 2));
1a0006be:	4b0b      	ldr	r3, [pc, #44]	; (1a0006ec <Board_SetupClocking+0x60>)
1a0006c0:	685a      	ldr	r2, [r3, #4]
1a0006c2:	f022 020c 	bic.w	r2, r2, #12
1a0006c6:	605a      	str	r2, [r3, #4]
    LPC_CREG->CREG0 |= (1 << 1) | (1 << 0);
1a0006c8:	685a      	ldr	r2, [r3, #4]
1a0006ca:	f042 0203 	orr.w	r2, r2, #3
1a0006ce:	605a      	str	r2, [r3, #4]
}
1a0006d0:	bd10      	pop	{r4, pc}
        Chip_Clock_SetBaseClock (c->clk, c->clkin, c->autoblock_enab,
1a0006d2:	4808      	ldr	r0, [pc, #32]	; (1a0006f4 <Board_SetupClocking+0x68>)
1a0006d4:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a0006d8:	2301      	movs	r3, #1
1a0006da:	788a      	ldrb	r2, [r1, #2]
1a0006dc:	7849      	ldrb	r1, [r1, #1]
1a0006de:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a0006e2:	f000 fb21 	bl	1a000d28 <Chip_Clock_SetBaseClock>
    for (uint32_t i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); ++i)
1a0006e6:	3401      	adds	r4, #1
1a0006e8:	e7e8      	b.n	1a0006bc <Board_SetupClocking+0x30>
1a0006ea:	bf00      	nop
1a0006ec:	40043000 	.word	0x40043000
1a0006f0:	0c28cb00 	.word	0x0c28cb00
1a0006f4:	1a001d5c 	.word	0x1a001d5c

1a0006f8 <Board_SystemInit>:


/* Set up and initialize hardware prior to call to main */
void Board_SystemInit(void)
{
1a0006f8:	b508      	push	{r3, lr}
    /* Setup system clocking and memory. This is done early to allow the
       application and tools to clear memory and use scatter loading to
       external memory. */
    Board_SetupMuxing();
1a0006fa:	f7ff ffb1 	bl	1a000660 <Board_SetupMuxing>
    Board_SetupClocking();
1a0006fe:	f7ff ffc5 	bl	1a00068c <Board_SetupClocking>
}
1a000702:	bd08      	pop	{r3, pc}

1a000704 <Chip_ADC_GetClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_ADC_GetClockIndex(LPC_ADC_T *pADC)
{
	CHIP_CCU_CLK_T clkADC;

	if (pADC == LPC_ADC1) {
1a000704:	4b03      	ldr	r3, [pc, #12]	; (1a000714 <Chip_ADC_GetClockIndex+0x10>)
1a000706:	4298      	cmp	r0, r3
1a000708:	d001      	beq.n	1a00070e <Chip_ADC_GetClockIndex+0xa>
		clkADC = CLK_APB3_ADC1;
	}
	else {
		clkADC = CLK_APB3_ADC0;
1a00070a:	2003      	movs	r0, #3
	}

	return clkADC;
}
1a00070c:	4770      	bx	lr
		clkADC = CLK_APB3_ADC1;
1a00070e:	2004      	movs	r0, #4
1a000710:	4770      	bx	lr
1a000712:	bf00      	nop
1a000714:	400e4000 	.word	0x400e4000

1a000718 <getClkDiv>:

/* Get divider value */
STATIC uint8_t getClkDiv(LPC_ADC_T *pADC, bool burstMode, uint32_t adcRate, uint8_t clks)
{
1a000718:	b570      	push	{r4, r5, r6, lr}
1a00071a:	460d      	mov	r5, r1
1a00071c:	4614      	mov	r4, r2
1a00071e:	461e      	mov	r6, r3
	   A/D converter, which should be less than or equal to 4.5MHz.
	   A fully conversion requires (bits_accuracy+1) of these clocks.
	   ADC Clock = PCLK_ADC0 / (CLKDIV + 1);
	   ADC rate = ADC clock / (the number of clocks required for each conversion);
	 */
	adcBlockFreq = Chip_Clock_GetRate(Chip_ADC_GetClockIndex(pADC));
1a000720:	f7ff fff0 	bl	1a000704 <Chip_ADC_GetClockIndex>
1a000724:	f000 fb9a 	bl	1a000e5c <Chip_Clock_GetRate>
	if (burstMode) {
1a000728:	b155      	cbz	r5, 1a000740 <getClkDiv+0x28>
		fullAdcRate = adcRate * clks;
1a00072a:	fb06 f404 	mul.w	r4, r6, r4
	else {
		fullAdcRate = adcRate * getFullConvClk();
	}

	/* Get the round value by fomular: (2*A + B)/(2*B) */
	div = ((adcBlockFreq * 2 + fullAdcRate) / (fullAdcRate * 2)) - 1;
1a00072e:	eb04 0040 	add.w	r0, r4, r0, lsl #1
1a000732:	0064      	lsls	r4, r4, #1
1a000734:	fbb0 f0f4 	udiv	r0, r0, r4
1a000738:	b2c0      	uxtb	r0, r0
1a00073a:	3801      	subs	r0, #1
	return div;
}
1a00073c:	b2c0      	uxtb	r0, r0
1a00073e:	bd70      	pop	{r4, r5, r6, pc}
		fullAdcRate = adcRate * getFullConvClk();
1a000740:	eb04 0384 	add.w	r3, r4, r4, lsl #2
1a000744:	eb04 0443 	add.w	r4, r4, r3, lsl #1
1a000748:	e7f1      	b.n	1a00072e <getClkDiv+0x16>

1a00074a <setStartMode>:

/* Set start mode for ADC */
void setStartMode(LPC_ADC_T *pADC, uint8_t start_mode)
{
	uint32_t temp;
	temp = pADC->CR & (~ADC_CR_START_MASK);
1a00074a:	6803      	ldr	r3, [r0, #0]
1a00074c:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
	pADC->CR = temp | (ADC_CR_START_MODE_SEL((uint32_t) start_mode));
1a000750:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a000754:	6003      	str	r3, [r0, #0]
}
1a000756:	4770      	bx	lr

1a000758 <readAdcVal>:

/* Get the ADC value */
Status readAdcVal(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
	uint32_t temp;
	temp = pADC->DR[channel];
1a000758:	3104      	adds	r1, #4
1a00075a:	f850 3021 	ldr.w	r3, [r0, r1, lsl #2]
	if (!ADC_DR_DONE(temp)) {
1a00075e:	2b00      	cmp	r3, #0
1a000760:	da04      	bge.n	1a00076c <readAdcVal+0x14>
		return ERROR;
	}
	/*	if(ADC_DR_OVERRUN(temp) && (pADC->CR & ADC_CR_BURST)) */
	/*	return ERROR; */
	*data = (uint16_t) ADC_DR_RESULT(temp);
1a000762:	f3c3 1389 	ubfx	r3, r3, #6, #10
1a000766:	8013      	strh	r3, [r2, #0]
	return SUCCESS;
1a000768:	2001      	movs	r0, #1
1a00076a:	4770      	bx	lr
		return ERROR;
1a00076c:	2000      	movs	r0, #0
}
1a00076e:	4770      	bx	lr

1a000770 <Chip_ADC_Init>:
 * Public functions
 ****************************************************************************/

/* Initialize the ADC peripheral and the ADC setup structure to default value */
void Chip_ADC_Init(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup)
{
1a000770:	b538      	push	{r3, r4, r5, lr}
1a000772:	4605      	mov	r5, r0
1a000774:	460c      	mov	r4, r1
	uint8_t div;
	uint32_t cr = 0;
	uint32_t clk;

	Chip_Clock_EnableOpts(Chip_ADC_GetClockIndex(pADC), true, true, 1);
1a000776:	f7ff ffc5 	bl	1a000704 <Chip_ADC_GetClockIndex>
1a00077a:	2301      	movs	r3, #1
1a00077c:	461a      	mov	r2, r3
1a00077e:	4619      	mov	r1, r3
1a000780:	f000 fb1a 	bl	1a000db8 <Chip_Clock_EnableOpts>

	pADC->INTEN = 0;		/* Disable all interrupts */
1a000784:	2100      	movs	r1, #0
1a000786:	60e9      	str	r1, [r5, #12]

	cr |= ADC_CR_PDN;
	ADCSetup->adcRate = ADC_MAX_SAMPLE_RATE;
1a000788:	4a08      	ldr	r2, [pc, #32]	; (1a0007ac <Chip_ADC_Init+0x3c>)
1a00078a:	6022      	str	r2, [r4, #0]
	ADCSetup->bitsAccuracy = ADC_10BITS;
1a00078c:	7121      	strb	r1, [r4, #4]
	clk = 11;
	ADCSetup->burstMode = false;
1a00078e:	7161      	strb	r1, [r4, #5]
	div = getClkDiv(pADC, false, ADCSetup->adcRate, clk);
1a000790:	230b      	movs	r3, #11
1a000792:	4628      	mov	r0, r5
1a000794:	f7ff ffc0 	bl	1a000718 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a000798:	0200      	lsls	r0, r0, #8
1a00079a:	f440 1000 	orr.w	r0, r0, #2097152	; 0x200000
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a00079e:	7923      	ldrb	r3, [r4, #4]
1a0007a0:	045b      	lsls	r3, r3, #17
1a0007a2:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a0007a6:	4303      	orrs	r3, r0
	pADC->CR = cr;
1a0007a8:	602b      	str	r3, [r5, #0]
}
1a0007aa:	bd38      	pop	{r3, r4, r5, pc}
1a0007ac:	00061a80 	.word	0x00061a80

1a0007b0 <Chip_ADC_DeInit>:

/* Shutdown ADC */
void Chip_ADC_DeInit(LPC_ADC_T *pADC)
{
1a0007b0:	b508      	push	{r3, lr}
	pADC->INTEN = 0x00000100;
1a0007b2:	f44f 7280 	mov.w	r2, #256	; 0x100
1a0007b6:	60c2      	str	r2, [r0, #12]
	pADC->CR = 0;
1a0007b8:	2200      	movs	r2, #0
1a0007ba:	6002      	str	r2, [r0, #0]
	Chip_Clock_Disable(Chip_ADC_GetClockIndex(pADC));
1a0007bc:	f7ff ffa2 	bl	1a000704 <Chip_ADC_GetClockIndex>
1a0007c0:	f000 fb32 	bl	1a000e28 <Chip_Clock_Disable>
}
1a0007c4:	bd08      	pop	{r3, pc}

1a0007c6 <Chip_ADC_ReadValue>:

/* Get the ADC value */
Status Chip_ADC_ReadValue(LPC_ADC_T *pADC, uint8_t channel, uint16_t *data)
{
1a0007c6:	b508      	push	{r3, lr}
	return readAdcVal(pADC, channel, data);
1a0007c8:	f7ff ffc6 	bl	1a000758 <readAdcVal>
}
1a0007cc:	bd08      	pop	{r3, pc}

1a0007ce <Chip_ADC_ReadStatus>:

/* Get ADC Channel status from ADC data register */
FlagStatus Chip_ADC_ReadStatus(LPC_ADC_T *pADC, uint8_t channel, uint32_t StatusType)
{
	switch (StatusType) {
1a0007ce:	2a01      	cmp	r2, #1
1a0007d0:	d009      	beq.n	1a0007e6 <Chip_ADC_ReadStatus+0x18>
1a0007d2:	2a02      	cmp	r2, #2
1a0007d4:	d00e      	beq.n	1a0007f4 <Chip_ADC_ReadStatus+0x26>
1a0007d6:	b10a      	cbz	r2, 1a0007dc <Chip_ADC_ReadStatus+0xe>
1a0007d8:	2000      	movs	r0, #0

	default:
		break;
	}
	return RESET;
}
1a0007da:	4770      	bx	lr
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0007dc:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0007de:	40c8      	lsrs	r0, r1
1a0007e0:	f000 0001 	and.w	r0, r0, #1
1a0007e4:	4770      	bx	lr
		channel += 8;
1a0007e6:	3108      	adds	r1, #8
1a0007e8:	b2c9      	uxtb	r1, r1
		return (pADC->STAT & (1UL << channel)) ? SET : RESET;
1a0007ea:	6b00      	ldr	r0, [r0, #48]	; 0x30
1a0007ec:	40c8      	lsrs	r0, r1
1a0007ee:	f000 0001 	and.w	r0, r0, #1
1a0007f2:	4770      	bx	lr
		return pADC->STAT >> 16 ? SET : RESET;
1a0007f4:	6b03      	ldr	r3, [r0, #48]	; 0x30
1a0007f6:	0c1b      	lsrs	r3, r3, #16
1a0007f8:	bf14      	ite	ne
1a0007fa:	2001      	movne	r0, #1
1a0007fc:	2000      	moveq	r0, #0
1a0007fe:	4770      	bx	lr

1a000800 <Chip_ADC_Int_SetChannelCmd>:

/* Enable/Disable interrupt for ADC channel */
void Chip_ADC_Int_SetChannelCmd(LPC_ADC_T *pADC, uint8_t channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a000800:	2a01      	cmp	r2, #1
1a000802:	d006      	beq.n	1a000812 <Chip_ADC_Int_SetChannelCmd+0x12>
		pADC->INTEN |= (1UL << channel);
	}
	else {
		pADC->INTEN &= (~(1UL << channel));
1a000804:	68c3      	ldr	r3, [r0, #12]
1a000806:	2201      	movs	r2, #1
1a000808:	408a      	lsls	r2, r1
1a00080a:	ea23 0302 	bic.w	r3, r3, r2
1a00080e:	60c3      	str	r3, [r0, #12]
	}
}
1a000810:	4770      	bx	lr
		pADC->INTEN |= (1UL << channel);
1a000812:	68c3      	ldr	r3, [r0, #12]
1a000814:	408a      	lsls	r2, r1
1a000816:	4313      	orrs	r3, r2
1a000818:	60c3      	str	r3, [r0, #12]
1a00081a:	4770      	bx	lr

1a00081c <Chip_ADC_SetStartMode>:

/* Select the mode starting the AD conversion */
void Chip_ADC_SetStartMode(LPC_ADC_T *pADC, ADC_START_MODE_T mode, ADC_EDGE_CFG_T EdgeOption)
{
1a00081c:	b508      	push	{r3, lr}
	if ((mode != ADC_START_NOW) && (mode != ADC_NO_START)) {
1a00081e:	2901      	cmp	r1, #1
1a000820:	d904      	bls.n	1a00082c <Chip_ADC_SetStartMode+0x10>
		if (EdgeOption) {
1a000822:	b132      	cbz	r2, 1a000832 <Chip_ADC_SetStartMode+0x16>
			pADC->CR |= ADC_CR_EDGE;
1a000824:	6803      	ldr	r3, [r0, #0]
1a000826:	f043 6300 	orr.w	r3, r3, #134217728	; 0x8000000
1a00082a:	6003      	str	r3, [r0, #0]
		}
		else {
			pADC->CR &= ~ADC_CR_EDGE;
		}
	}
	setStartMode(pADC, (uint8_t) mode);
1a00082c:	f7ff ff8d 	bl	1a00074a <setStartMode>
}
1a000830:	bd08      	pop	{r3, pc}
			pADC->CR &= ~ADC_CR_EDGE;
1a000832:	6803      	ldr	r3, [r0, #0]
1a000834:	f023 6300 	bic.w	r3, r3, #134217728	; 0x8000000
1a000838:	6003      	str	r3, [r0, #0]
1a00083a:	e7f7      	b.n	1a00082c <Chip_ADC_SetStartMode+0x10>

1a00083c <Chip_ADC_SetSampleRate>:

/* Set the ADC Sample rate */
void Chip_ADC_SetSampleRate(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, uint32_t rate)
{
1a00083c:	b570      	push	{r4, r5, r6, lr}
1a00083e:	4605      	mov	r5, r0
1a000840:	460e      	mov	r6, r1
	uint8_t div;
	uint32_t cr;

	cr = pADC->CR & (~ADC_SAMPLE_RATE_CONFIG_MASK);
1a000842:	6804      	ldr	r4, [r0, #0]
1a000844:	f424 246f 	bic.w	r4, r4, #978944	; 0xef000
1a000848:	f424 6470 	bic.w	r4, r4, #3840	; 0xf00
	ADCSetup->adcRate = rate;
1a00084c:	600a      	str	r2, [r1, #0]
	div = getClkDiv(pADC, ADCSetup->burstMode, rate, (11 - ADCSetup->bitsAccuracy));
1a00084e:	790b      	ldrb	r3, [r1, #4]
1a000850:	f1c3 030b 	rsb	r3, r3, #11
1a000854:	b2db      	uxtb	r3, r3
1a000856:	7949      	ldrb	r1, [r1, #5]
1a000858:	f7ff ff5e 	bl	1a000718 <getClkDiv>
	cr |= ADC_CR_CLKDIV(div);
1a00085c:	ea44 2400 	orr.w	r4, r4, r0, lsl #8
	cr |= ADC_CR_BITACC(ADCSetup->bitsAccuracy);
1a000860:	7933      	ldrb	r3, [r6, #4]
1a000862:	045b      	lsls	r3, r3, #17
1a000864:	f403 2360 	and.w	r3, r3, #917504	; 0xe0000
1a000868:	4323      	orrs	r3, r4
	pADC->CR = cr;
1a00086a:	602b      	str	r3, [r5, #0]
}
1a00086c:	bd70      	pop	{r4, r5, r6, pc}

1a00086e <Chip_ADC_SetResolution>:

/* Set the ADC accuracy bits */
void Chip_ADC_SetResolution(LPC_ADC_T *pADC, ADC_CLOCK_SETUP_T *ADCSetup, ADC_RESOLUTION_T resolution)
{
1a00086e:	b508      	push	{r3, lr}
	ADCSetup->bitsAccuracy = resolution;
1a000870:	710a      	strb	r2, [r1, #4]
	Chip_ADC_SetSampleRate(pADC, ADCSetup, ADCSetup->adcRate);
1a000872:	680a      	ldr	r2, [r1, #0]
1a000874:	f7ff ffe2 	bl	1a00083c <Chip_ADC_SetSampleRate>
}
1a000878:	bd08      	pop	{r3, pc}

1a00087a <Chip_ADC_EnableChannel>:

/* Enable or disable the ADC channel on ADC peripheral */
void Chip_ADC_EnableChannel(LPC_ADC_T *pADC, ADC_CHANNEL_T channel, FunctionalState NewState)
{
	if (NewState == ENABLE) {
1a00087a:	2a01      	cmp	r2, #1
1a00087c:	d00a      	beq.n	1a000894 <Chip_ADC_EnableChannel+0x1a>
		pADC->CR |= ADC_CR_CH_SEL(channel);
	}
	else {
		pADC->CR &= ~ADC_CR_START_MASK;
1a00087e:	6803      	ldr	r3, [r0, #0]
1a000880:	f023 63e0 	bic.w	r3, r3, #117440512	; 0x7000000
1a000884:	6003      	str	r3, [r0, #0]
		pADC->CR &= ~ADC_CR_CH_SEL(channel);
1a000886:	6803      	ldr	r3, [r0, #0]
1a000888:	2201      	movs	r2, #1
1a00088a:	408a      	lsls	r2, r1
1a00088c:	ea23 0302 	bic.w	r3, r3, r2
1a000890:	6003      	str	r3, [r0, #0]
	}
}
1a000892:	4770      	bx	lr
		pADC->CR |= ADC_CR_CH_SEL(channel);
1a000894:	6803      	ldr	r3, [r0, #0]
1a000896:	408a      	lsls	r2, r1
1a000898:	4313      	orrs	r3, r2
1a00089a:	6003      	str	r3, [r0, #0]
1a00089c:	4770      	bx	lr

1a00089e <Chip_ADC_SetBurstCmd>:

/* Enable burst mode */
void Chip_ADC_SetBurstCmd(LPC_ADC_T *pADC, FunctionalState NewState)
{
1a00089e:	b538      	push	{r3, r4, r5, lr}
1a0008a0:	4604      	mov	r4, r0
1a0008a2:	460d      	mov	r5, r1
	setStartMode(pADC, ADC_NO_START);
1a0008a4:	2100      	movs	r1, #0
1a0008a6:	f7ff ff50 	bl	1a00074a <setStartMode>
	
    if (NewState == DISABLE) {
1a0008aa:	b925      	cbnz	r5, 1a0008b6 <Chip_ADC_SetBurstCmd+0x18>
		pADC->CR &= ~ADC_CR_BURST;
1a0008ac:	6823      	ldr	r3, [r4, #0]
1a0008ae:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a0008b2:	6023      	str	r3, [r4, #0]
	}
	else {
		pADC->CR |= ADC_CR_BURST;
	}
}
1a0008b4:	bd38      	pop	{r3, r4, r5, pc}
		pADC->CR |= ADC_CR_BURST;
1a0008b6:	6823      	ldr	r3, [r4, #0]
1a0008b8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a0008bc:	6023      	str	r3, [r4, #0]
}
1a0008be:	e7f9      	b.n	1a0008b4 <Chip_ADC_SetBurstCmd+0x16>

1a0008c0 <SystemCoreClockUpdate>:


/* Update system core clock rate, should be called if the system has
   a clock rate change */
void SystemCoreClockUpdate(void)
{
1a0008c0:	b508      	push	{r3, lr}
	/* CPU core speed */
	SystemCoreClock = Chip_Clock_GetRate(CLK_MX_MXCORE);
1a0008c2:	2069      	movs	r0, #105	; 0x69
1a0008c4:	f000 faca 	bl	1a000e5c <Chip_Clock_GetRate>
1a0008c8:	4b01      	ldr	r3, [pc, #4]	; (1a0008d0 <SystemCoreClockUpdate+0x10>)
1a0008ca:	6018      	str	r0, [r3, #0]
}
1a0008cc:	bd08      	pop	{r3, pc}
1a0008ce:	bf00      	nop
1a0008d0:	10000054 	.word	0x10000054

1a0008d4 <pll_calc_divs>:
		return -val;
	return val;
}

static void pll_calc_divs(uint32_t freq, PLL_PARAM_T *ppll)
{
1a0008d4:	b570      	push	{r4, r5, r6, lr}
1a0008d6:	4686      	mov	lr, r0

	uint32_t prev = freq;
	int n, m, p;

	/* When direct mode is set FBSEL should be a don't care */
	if (ppll->ctrl & (1 << 7)) {
1a0008d8:	680b      	ldr	r3, [r1, #0]
1a0008da:	f013 0f80 	tst.w	r3, #128	; 0x80
1a0008de:	d002      	beq.n	1a0008e6 <pll_calc_divs+0x12>
		ppll->ctrl &= ~(1 << 6);
1a0008e0:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0008e4:	600b      	str	r3, [r1, #0]
	}
	for (n = 1; n <= 4; n++) {
		for (p = 0; p < 4; p ++) {
1a0008e6:	4675      	mov	r5, lr
1a0008e8:	2401      	movs	r4, #1
1a0008ea:	e03c      	b.n	1a000966 <pll_calc_divs+0x92>
			for (m = 1; m <= 256; m++) {
				uint32_t fcco, fout;
				if (ppll->ctrl & (1 << 6)) {
					fcco = ((m << (p + 1)) * ppll->fin) / n;
				} else {
					fcco = (m * ppll->fin) / n;
1a0008ec:	694b      	ldr	r3, [r1, #20]
1a0008ee:	fb02 f303 	mul.w	r3, r2, r3
1a0008f2:	fbb3 f3f4 	udiv	r3, r3, r4
1a0008f6:	e01e      	b.n	1a000936 <pll_calc_divs+0x62>
				}
				if (fcco < PLL_MIN_CCO_FREQ) continue;
				if (fcco > PLL_MAX_CCO_FREQ) break;
				if (ppll->ctrl & (1 << 7)) {
					fout = fcco;
1a0008f8:	4618      	mov	r0, r3
	if (val < 0)
1a0008fa:	ebbe 0600 	subs.w	r6, lr, r0
1a0008fe:	d428      	bmi.n	1a000952 <pll_calc_divs+0x7e>
				} else {
					fout = fcco >> (p + 1);
				}

				if (ABS(freq - fout) < prev) {
1a000900:	42b5      	cmp	r5, r6
1a000902:	d907      	bls.n	1a000914 <pll_calc_divs+0x40>
					ppll->nsel = n;
1a000904:	608c      	str	r4, [r1, #8]
					ppll->psel = p + 1;
1a000906:	f10c 0501 	add.w	r5, ip, #1
1a00090a:	60cd      	str	r5, [r1, #12]
					ppll->msel = m;
1a00090c:	610a      	str	r2, [r1, #16]
					ppll->fout = fout;
1a00090e:	6188      	str	r0, [r1, #24]
					ppll->fcco = fcco;
1a000910:	61cb      	str	r3, [r1, #28]
					prev = ABS(freq - fout);
1a000912:	4635      	mov	r5, r6
			for (m = 1; m <= 256; m++) {
1a000914:	3201      	adds	r2, #1
1a000916:	f5b2 7f80 	cmp.w	r2, #256	; 0x100
1a00091a:	dc1c      	bgt.n	1a000956 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 6)) {
1a00091c:	680e      	ldr	r6, [r1, #0]
1a00091e:	f016 0f40 	tst.w	r6, #64	; 0x40
1a000922:	d0e3      	beq.n	1a0008ec <pll_calc_divs+0x18>
					fcco = ((m << (p + 1)) * ppll->fin) / n;
1a000924:	f10c 0301 	add.w	r3, ip, #1
1a000928:	fa02 f303 	lsl.w	r3, r2, r3
1a00092c:	6948      	ldr	r0, [r1, #20]
1a00092e:	fb00 f303 	mul.w	r3, r0, r3
1a000932:	fbb3 f3f4 	udiv	r3, r3, r4
				if (fcco < PLL_MIN_CCO_FREQ) continue;
1a000936:	480f      	ldr	r0, [pc, #60]	; (1a000974 <pll_calc_divs+0xa0>)
1a000938:	4283      	cmp	r3, r0
1a00093a:	d9eb      	bls.n	1a000914 <pll_calc_divs+0x40>
				if (fcco > PLL_MAX_CCO_FREQ) break;
1a00093c:	480e      	ldr	r0, [pc, #56]	; (1a000978 <pll_calc_divs+0xa4>)
1a00093e:	4283      	cmp	r3, r0
1a000940:	d809      	bhi.n	1a000956 <pll_calc_divs+0x82>
				if (ppll->ctrl & (1 << 7)) {
1a000942:	f016 0f80 	tst.w	r6, #128	; 0x80
1a000946:	d1d7      	bne.n	1a0008f8 <pll_calc_divs+0x24>
					fout = fcco >> (p + 1);
1a000948:	f10c 0001 	add.w	r0, ip, #1
1a00094c:	fa23 f000 	lsr.w	r0, r3, r0
1a000950:	e7d3      	b.n	1a0008fa <pll_calc_divs+0x26>
		return -val;
1a000952:	4276      	negs	r6, r6
1a000954:	e7d4      	b.n	1a000900 <pll_calc_divs+0x2c>
		for (p = 0; p < 4; p ++) {
1a000956:	f10c 0c01 	add.w	ip, ip, #1
1a00095a:	f1bc 0f03 	cmp.w	ip, #3
1a00095e:	dc01      	bgt.n	1a000964 <pll_calc_divs+0x90>
			for (m = 1; m <= 256; m++) {
1a000960:	2201      	movs	r2, #1
1a000962:	e7d8      	b.n	1a000916 <pll_calc_divs+0x42>
	for (n = 1; n <= 4; n++) {
1a000964:	3401      	adds	r4, #1
1a000966:	2c04      	cmp	r4, #4
1a000968:	dc02      	bgt.n	1a000970 <pll_calc_divs+0x9c>
		for (p = 0; p < 4; p ++) {
1a00096a:	f04f 0c00 	mov.w	ip, #0
1a00096e:	e7f4      	b.n	1a00095a <pll_calc_divs+0x86>
				}
			}
		}
	}
}
1a000970:	bd70      	pop	{r4, r5, r6, pc}
1a000972:	bf00      	nop
1a000974:	094c5eff 	.word	0x094c5eff
1a000978:	1312d000 	.word	0x1312d000

1a00097c <pll_get_frac>:

static void pll_get_frac(uint32_t freq, PLL_PARAM_T *ppll)
{
1a00097c:	b5f0      	push	{r4, r5, r6, r7, lr}
1a00097e:	b09d      	sub	sp, #116	; 0x74
1a000980:	4605      	mov	r5, r0
1a000982:	460c      	mov	r4, r1
	int diff[3];
	PLL_PARAM_T pll[3] = {{0},{0},{0}};
1a000984:	2260      	movs	r2, #96	; 0x60
1a000986:	2100      	movs	r1, #0
1a000988:	a801      	add	r0, sp, #4
1a00098a:	f001 f999 	bl	1a001cc0 <memset>

	/* Try direct mode */
	pll[0].ctrl |= (1 << 7);
1a00098e:	2380      	movs	r3, #128	; 0x80
1a000990:	9301      	str	r3, [sp, #4]
	pll[0].fin = ppll->fin;
1a000992:	6963      	ldr	r3, [r4, #20]
1a000994:	9306      	str	r3, [sp, #24]
	pll[0].srcin = ppll->srcin;
1a000996:	7923      	ldrb	r3, [r4, #4]
1a000998:	f88d 3008 	strb.w	r3, [sp, #8]
	pll_calc_divs(freq, &pll[0]);
1a00099c:	a901      	add	r1, sp, #4
1a00099e:	4628      	mov	r0, r5
1a0009a0:	f7ff ff98 	bl	1a0008d4 <pll_calc_divs>
	if (pll[0].fout == freq) {
1a0009a4:	9b07      	ldr	r3, [sp, #28]
1a0009a6:	42ab      	cmp	r3, r5
1a0009a8:	d02a      	beq.n	1a000a00 <pll_get_frac+0x84>
	if (val < 0)
1a0009aa:	1aeb      	subs	r3, r5, r3
1a0009ac:	d431      	bmi.n	1a000a12 <pll_get_frac+0x96>
		*ppll = pll[0];
		return ;
	}
	diff[0] = ABS(freq - pll[0].fout);
1a0009ae:	461e      	mov	r6, r3
1a0009b0:	9319      	str	r3, [sp, #100]	; 0x64

	/* Try non-Integer mode */
	pll[2].ctrl &= ~(1 << 6);			// need to set FBSEL to 0
1a0009b2:	9b11      	ldr	r3, [sp, #68]	; 0x44
1a0009b4:	f023 0340 	bic.w	r3, r3, #64	; 0x40
1a0009b8:	9311      	str	r3, [sp, #68]	; 0x44
	pll[2].fin = ppll->fin;
1a0009ba:	6963      	ldr	r3, [r4, #20]
1a0009bc:	9316      	str	r3, [sp, #88]	; 0x58
	pll[2].srcin = ppll->srcin;
1a0009be:	7923      	ldrb	r3, [r4, #4]
1a0009c0:	f88d 3048 	strb.w	r3, [sp, #72]	; 0x48
	pll_calc_divs(freq, &pll[2]);
1a0009c4:	a911      	add	r1, sp, #68	; 0x44
1a0009c6:	4628      	mov	r0, r5
1a0009c8:	f7ff ff84 	bl	1a0008d4 <pll_calc_divs>
	if (pll[2].fout == freq) {
1a0009cc:	9b17      	ldr	r3, [sp, #92]	; 0x5c
1a0009ce:	42ab      	cmp	r3, r5
1a0009d0:	d021      	beq.n	1a000a16 <pll_get_frac+0x9a>
	if (val < 0)
1a0009d2:	1aeb      	subs	r3, r5, r3
1a0009d4:	d427      	bmi.n	1a000a26 <pll_get_frac+0xaa>
		*ppll = pll[2];
		return ;
	}
	diff[2] = ABS(freq - pll[2].fout);
1a0009d6:	461f      	mov	r7, r3
1a0009d8:	931b      	str	r3, [sp, #108]	; 0x6c
	
	if (freq <= 110000000) {
1a0009da:	4b2b      	ldr	r3, [pc, #172]	; (1a000a88 <pll_get_frac+0x10c>)
1a0009dc:	429d      	cmp	r5, r3
1a0009de:	d924      	bls.n	1a000a2a <pll_get_frac+0xae>
		if (pll[1].fout == freq) {
			*ppll = pll[1];
			return ;
		}
	}
	diff[1] = ABS(freq - pll[1].fout);
1a0009e0:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
	if (val < 0)
1a0009e2:	1aed      	subs	r5, r5, r3
1a0009e4:	d434      	bmi.n	1a000a50 <pll_get_frac+0xd4>
	diff[1] = ABS(freq - pll[1].fout);
1a0009e6:	951a      	str	r5, [sp, #104]	; 0x68

	/* Find the min of 3 and return */
	if (diff[0] <= diff[1]) {
1a0009e8:	42ae      	cmp	r6, r5
1a0009ea:	dc3b      	bgt.n	1a000a64 <pll_get_frac+0xe8>
		if (diff[0] <= diff[2]) {
1a0009ec:	42be      	cmp	r6, r7
1a0009ee:	dc31      	bgt.n	1a000a54 <pll_get_frac+0xd8>
			*ppll = pll[0];
1a0009f0:	ad01      	add	r5, sp, #4
1a0009f2:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a0009f4:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a0009f6:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a0009fa:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a0009fe:	e006      	b.n	1a000a0e <pll_get_frac+0x92>
		*ppll = pll[0];
1a000a00:	ad01      	add	r5, sp, #4
1a000a02:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a04:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a06:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a0a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			*ppll = pll[1];
		} else {
			*ppll = pll[2];
		}
	}
}
1a000a0e:	b01d      	add	sp, #116	; 0x74
1a000a10:	bdf0      	pop	{r4, r5, r6, r7, pc}
		return -val;
1a000a12:	425b      	negs	r3, r3
1a000a14:	e7cb      	b.n	1a0009ae <pll_get_frac+0x32>
		*ppll = pll[2];
1a000a16:	ad11      	add	r5, sp, #68	; 0x44
1a000a18:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a1a:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a1c:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a20:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
		return ;
1a000a24:	e7f3      	b.n	1a000a0e <pll_get_frac+0x92>
		return -val;
1a000a26:	425b      	negs	r3, r3
1a000a28:	e7d5      	b.n	1a0009d6 <pll_get_frac+0x5a>
		pll[1].ctrl = (1 << 6);
1a000a2a:	2340      	movs	r3, #64	; 0x40
1a000a2c:	9309      	str	r3, [sp, #36]	; 0x24
		pll[1].fin = ppll->fin;
1a000a2e:	6963      	ldr	r3, [r4, #20]
1a000a30:	930e      	str	r3, [sp, #56]	; 0x38
		pll_calc_divs(freq, &pll[1]);
1a000a32:	a909      	add	r1, sp, #36	; 0x24
1a000a34:	4628      	mov	r0, r5
1a000a36:	f7ff ff4d 	bl	1a0008d4 <pll_calc_divs>
		if (pll[1].fout == freq) {
1a000a3a:	9b0f      	ldr	r3, [sp, #60]	; 0x3c
1a000a3c:	42ab      	cmp	r3, r5
1a000a3e:	d1cf      	bne.n	1a0009e0 <pll_get_frac+0x64>
			*ppll = pll[1];
1a000a40:	ad09      	add	r5, sp, #36	; 0x24
1a000a42:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a44:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a46:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a4a:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
			return ;
1a000a4e:	e7de      	b.n	1a000a0e <pll_get_frac+0x92>
		return -val;
1a000a50:	426d      	negs	r5, r5
1a000a52:	e7c8      	b.n	1a0009e6 <pll_get_frac+0x6a>
			*ppll = pll[2];
1a000a54:	ad11      	add	r5, sp, #68	; 0x44
1a000a56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a5a:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a5e:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a62:	e7d4      	b.n	1a000a0e <pll_get_frac+0x92>
		if (diff[1] <= diff[2]) {
1a000a64:	42af      	cmp	r7, r5
1a000a66:	db07      	blt.n	1a000a78 <pll_get_frac+0xfc>
			*ppll = pll[1];
1a000a68:	ad09      	add	r5, sp, #36	; 0x24
1a000a6a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a6c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a6e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a72:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a76:	e7ca      	b.n	1a000a0e <pll_get_frac+0x92>
			*ppll = pll[2];
1a000a78:	ad11      	add	r5, sp, #68	; 0x44
1a000a7a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
1a000a7c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
1a000a7e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
1a000a82:	e884 000f 	stmia.w	r4, {r0, r1, r2, r3}
1a000a86:	e7c2      	b.n	1a000a0e <pll_get_frac+0x92>
1a000a88:	068e7780 	.word	0x068e7780

1a000a8c <Chip_Clock_FindBaseClock>:
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
}

/* Finds the base clock for the peripheral clock */
static CHIP_CGU_BASE_CLK_T Chip_Clock_FindBaseClock(CHIP_CCU_CLK_T clk)
{
1a000a8c:	4684      	mov	ip, r0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
	int i = 0;
1a000a8e:	2300      	movs	r3, #0
	CHIP_CGU_BASE_CLK_T baseclk = CLK_BASE_NONE;
1a000a90:	201c      	movs	r0, #28

	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000a92:	281c      	cmp	r0, #28
1a000a94:	d120      	bne.n	1a000ad8 <Chip_Clock_FindBaseClock+0x4c>
{
1a000a96:	b410      	push	{r4}
1a000a98:	e002      	b.n	1a000aa0 <Chip_Clock_FindBaseClock+0x14>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
			baseclk = periph_to_base[i].clkbase;
		}
		else {
			i++;
1a000a9a:	3301      	adds	r3, #1
	while ((baseclk == CLK_BASE_NONE) && (periph_to_base[i].clkbase != baseclk)) {
1a000a9c:	281c      	cmp	r0, #28
1a000a9e:	d118      	bne.n	1a000ad2 <Chip_Clock_FindBaseClock+0x46>
1a000aa0:	eb03 0143 	add.w	r1, r3, r3, lsl #1
1a000aa4:	4a0d      	ldr	r2, [pc, #52]	; (1a000adc <Chip_Clock_FindBaseClock+0x50>)
1a000aa6:	eb02 0241 	add.w	r2, r2, r1, lsl #1
1a000aaa:	7911      	ldrb	r1, [r2, #4]
1a000aac:	4281      	cmp	r1, r0
1a000aae:	d010      	beq.n	1a000ad2 <Chip_Clock_FindBaseClock+0x46>
		if ((clk >= periph_to_base[i].clkstart) && (clk <= periph_to_base[i].clkend)) {
1a000ab0:	eb03 0243 	add.w	r2, r3, r3, lsl #1
1a000ab4:	4c09      	ldr	r4, [pc, #36]	; (1a000adc <Chip_Clock_FindBaseClock+0x50>)
1a000ab6:	f834 2012 	ldrh.w	r2, [r4, r2, lsl #1]
1a000aba:	4562      	cmp	r2, ip
1a000abc:	d8ed      	bhi.n	1a000a9a <Chip_Clock_FindBaseClock+0xe>
1a000abe:	eb03 0443 	add.w	r4, r3, r3, lsl #1
1a000ac2:	4a06      	ldr	r2, [pc, #24]	; (1a000adc <Chip_Clock_FindBaseClock+0x50>)
1a000ac4:	eb02 0244 	add.w	r2, r2, r4, lsl #1
1a000ac8:	8852      	ldrh	r2, [r2, #2]
1a000aca:	4562      	cmp	r2, ip
1a000acc:	d3e5      	bcc.n	1a000a9a <Chip_Clock_FindBaseClock+0xe>
			baseclk = periph_to_base[i].clkbase;
1a000ace:	4608      	mov	r0, r1
1a000ad0:	e7e4      	b.n	1a000a9c <Chip_Clock_FindBaseClock+0x10>
		}
	}

	return baseclk;
}
1a000ad2:	f85d 4b04 	ldr.w	r4, [sp], #4
1a000ad6:	4770      	bx	lr
1a000ad8:	4770      	bx	lr
1a000ada:	bf00      	nop
1a000adc:	1a001ddc 	.word	0x1a001ddc

1a000ae0 <Chip_Clock_EnableCrystal>:
 * Public functions
 ****************************************************************************/

/* Enables the crystal oscillator */
void Chip_Clock_EnableCrystal(void)
{
1a000ae0:	b082      	sub	sp, #8
	volatile uint32_t delay = 1000;
1a000ae2:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
1a000ae6:	9301      	str	r3, [sp, #4]

	uint32_t OldCrystalConfig = LPC_CGU->XTAL_OSC_CTRL;
1a000ae8:	4a0d      	ldr	r2, [pc, #52]	; (1a000b20 <Chip_Clock_EnableCrystal+0x40>)
1a000aea:	6993      	ldr	r3, [r2, #24]

	/* Clear bypass mode */
	OldCrystalConfig &= (~2);
1a000aec:	f023 0102 	bic.w	r1, r3, #2
	if (OldCrystalConfig != LPC_CGU->XTAL_OSC_CTRL) {
1a000af0:	6992      	ldr	r2, [r2, #24]
1a000af2:	428a      	cmp	r2, r1
1a000af4:	d001      	beq.n	1a000afa <Chip_Clock_EnableCrystal+0x1a>
		LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000af6:	4a0a      	ldr	r2, [pc, #40]	; (1a000b20 <Chip_Clock_EnableCrystal+0x40>)
1a000af8:	6191      	str	r1, [r2, #24]
	}

	/* Enable crystal oscillator */
	OldCrystalConfig &= (~1);
1a000afa:	f023 0303 	bic.w	r3, r3, #3
	if (OscRateIn >= 20000000) {
1a000afe:	4a09      	ldr	r2, [pc, #36]	; (1a000b24 <Chip_Clock_EnableCrystal+0x44>)
1a000b00:	6811      	ldr	r1, [r2, #0]
1a000b02:	4a09      	ldr	r2, [pc, #36]	; (1a000b28 <Chip_Clock_EnableCrystal+0x48>)
1a000b04:	4291      	cmp	r1, r2
1a000b06:	d901      	bls.n	1a000b0c <Chip_Clock_EnableCrystal+0x2c>
		OldCrystalConfig |= 4;	/* Set high frequency mode */
1a000b08:	f043 0304 	orr.w	r3, r3, #4

	}
	LPC_CGU->XTAL_OSC_CTRL = OldCrystalConfig;
1a000b0c:	4a04      	ldr	r2, [pc, #16]	; (1a000b20 <Chip_Clock_EnableCrystal+0x40>)
1a000b0e:	6193      	str	r3, [r2, #24]

	/* Delay for 250uSec */
	while(delay--) {}
1a000b10:	9b01      	ldr	r3, [sp, #4]
1a000b12:	1e5a      	subs	r2, r3, #1
1a000b14:	9201      	str	r2, [sp, #4]
1a000b16:	2b00      	cmp	r3, #0
1a000b18:	d1fa      	bne.n	1a000b10 <Chip_Clock_EnableCrystal+0x30>
}
1a000b1a:	b002      	add	sp, #8
1a000b1c:	4770      	bx	lr
1a000b1e:	bf00      	nop
1a000b20:	40050000 	.word	0x40050000
1a000b24:	1a001d58 	.word	0x1a001d58
1a000b28:	01312cff 	.word	0x01312cff

1a000b2c <Chip_Clock_GetDividerSource>:
}

/* Gets a CGU clock divider source */
CHIP_CGU_CLKIN_T Chip_Clock_GetDividerSource(CHIP_CGU_IDIV_T Divider)
{
	uint32_t reg = LPC_CGU->IDIV_CTRL[Divider];
1a000b2c:	3012      	adds	r0, #18
1a000b2e:	4b05      	ldr	r3, [pc, #20]	; (1a000b44 <Chip_Clock_GetDividerSource+0x18>)
1a000b30:	f853 0020 	ldr.w	r0, [r3, r0, lsl #2]

	if (reg & 1) {	/* divider is powered down */
1a000b34:	f010 0f01 	tst.w	r0, #1
1a000b38:	d102      	bne.n	1a000b40 <Chip_Clock_GetDividerSource+0x14>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000b3a:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000b3e:	4770      	bx	lr
		return CLKINPUT_PD;
1a000b40:	2011      	movs	r0, #17
}
1a000b42:	4770      	bx	lr
1a000b44:	40050000 	.word	0x40050000

1a000b48 <Chip_Clock_GetDividerDivisor>:

/* Gets a CGU clock divider divisor */
uint32_t Chip_Clock_GetDividerDivisor(CHIP_CGU_IDIV_T Divider)
{
	return (CHIP_CGU_CLKIN_T) ((LPC_CGU->IDIV_CTRL[Divider] >> 2) & CHIP_CGU_IDIV_MASK(Divider));
1a000b48:	f100 0212 	add.w	r2, r0, #18
1a000b4c:	4b03      	ldr	r3, [pc, #12]	; (1a000b5c <Chip_Clock_GetDividerDivisor+0x14>)
1a000b4e:	f853 2022 	ldr.w	r2, [r3, r2, lsl #2]
1a000b52:	4b03      	ldr	r3, [pc, #12]	; (1a000b60 <Chip_Clock_GetDividerDivisor+0x18>)
1a000b54:	5c18      	ldrb	r0, [r3, r0]
}
1a000b56:	ea00 0092 	and.w	r0, r0, r2, lsr #2
1a000b5a:	4770      	bx	lr
1a000b5c:	40050000 	.word	0x40050000
1a000b60:	1a001dd4 	.word	0x1a001dd4

1a000b64 <Chip_Clock_GetClockInputHz>:

/* Returns the frequency of the specified input clock source */
uint32_t Chip_Clock_GetClockInputHz(CHIP_CGU_CLKIN_T input)
{
1a000b64:	b508      	push	{r3, lr}
	uint32_t rate = 0;

	switch (input) {
1a000b66:	2810      	cmp	r0, #16
1a000b68:	d80a      	bhi.n	1a000b80 <Chip_Clock_GetClockInputHz+0x1c>
1a000b6a:	e8df f000 	tbb	[pc, r0]
1a000b6e:	0b44      	.short	0x0b44
1a000b70:	0921180d 	.word	0x0921180d
1a000b74:	2d2a2724 	.word	0x2d2a2724
1a000b78:	34300909 	.word	0x34300909
1a000b7c:	3c38      	.short	0x3c38
1a000b7e:	40          	.byte	0x40
1a000b7f:	00          	.byte	0x00
1a000b80:	2000      	movs	r0, #0
	default:
		break;
	}

	return rate;
}
1a000b82:	bd08      	pop	{r3, pc}
		rate = CGU_IRC_FREQ;
1a000b84:	481e      	ldr	r0, [pc, #120]	; (1a000c00 <Chip_Clock_GetClockInputHz+0x9c>)
		break;
1a000b86:	e7fc      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000b88:	4b1e      	ldr	r3, [pc, #120]	; (1a000c04 <Chip_Clock_GetClockInputHz+0xa0>)
1a000b8a:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000b8e:	f003 0307 	and.w	r3, r3, #7
1a000b92:	2b04      	cmp	r3, #4
1a000b94:	d001      	beq.n	1a000b9a <Chip_Clock_GetClockInputHz+0x36>
			rate = 25000000;
1a000b96:	481c      	ldr	r0, [pc, #112]	; (1a000c08 <Chip_Clock_GetClockInputHz+0xa4>)
1a000b98:	e7f3      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
	uint32_t rate = 0;
1a000b9a:	2000      	movs	r0, #0
1a000b9c:	e7f1      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		if ((LPC_CREG->CREG6 & 0x07) != 0x4) {
1a000b9e:	4b19      	ldr	r3, [pc, #100]	; (1a000c04 <Chip_Clock_GetClockInputHz+0xa0>)
1a000ba0:	f8d3 312c 	ldr.w	r3, [r3, #300]	; 0x12c
1a000ba4:	f003 0307 	and.w	r3, r3, #7
1a000ba8:	2b04      	cmp	r3, #4
1a000baa:	d027      	beq.n	1a000bfc <Chip_Clock_GetClockInputHz+0x98>
			rate = 25000000; /* MII uses 25 MHz */
1a000bac:	4816      	ldr	r0, [pc, #88]	; (1a000c08 <Chip_Clock_GetClockInputHz+0xa4>)
1a000bae:	e7e8      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = ExtRateIn;
1a000bb0:	4b16      	ldr	r3, [pc, #88]	; (1a000c0c <Chip_Clock_GetClockInputHz+0xa8>)
1a000bb2:	6818      	ldr	r0, [r3, #0]
		break;
1a000bb4:	e7e5      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = OscRateIn;
1a000bb6:	4b16      	ldr	r3, [pc, #88]	; (1a000c10 <Chip_Clock_GetClockInputHz+0xac>)
1a000bb8:	6818      	ldr	r0, [r3, #0]
		break;
1a000bba:	e7e2      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_USB_PLL];
1a000bbc:	4b15      	ldr	r3, [pc, #84]	; (1a000c14 <Chip_Clock_GetClockInputHz+0xb0>)
1a000bbe:	6818      	ldr	r0, [r3, #0]
		break;
1a000bc0:	e7df      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = audio_usb_pll_freq[CGU_AUDIO_PLL];
1a000bc2:	4b14      	ldr	r3, [pc, #80]	; (1a000c14 <Chip_Clock_GetClockInputHz+0xb0>)
1a000bc4:	6858      	ldr	r0, [r3, #4]
		break;
1a000bc6:	e7dc      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetMainPLLHz();
1a000bc8:	f000 f868 	bl	1a000c9c <Chip_Clock_GetMainPLLHz>
		break;
1a000bcc:	e7d9      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_A);
1a000bce:	2100      	movs	r1, #0
1a000bd0:	f000 f898 	bl	1a000d04 <Chip_Clock_GetDivRate>
		break;
1a000bd4:	e7d5      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_B);
1a000bd6:	2101      	movs	r1, #1
1a000bd8:	f000 f894 	bl	1a000d04 <Chip_Clock_GetDivRate>
		break;
1a000bdc:	e7d1      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_C);
1a000bde:	2102      	movs	r1, #2
1a000be0:	f000 f890 	bl	1a000d04 <Chip_Clock_GetDivRate>
		break;
1a000be4:	e7cd      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_D);
1a000be6:	2103      	movs	r1, #3
1a000be8:	f000 f88c 	bl	1a000d04 <Chip_Clock_GetDivRate>
		break;
1a000bec:	e7c9      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = Chip_Clock_GetDivRate(input, CLK_IDIV_E);
1a000bee:	2104      	movs	r1, #4
1a000bf0:	f000 f888 	bl	1a000d04 <Chip_Clock_GetDivRate>
		break;
1a000bf4:	e7c5      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
		rate = CRYSTAL_32K_FREQ_IN;
1a000bf6:	f44f 4000 	mov.w	r0, #32768	; 0x8000
1a000bfa:	e7c2      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
			rate = 50000000; /* RMII uses 50 MHz */
1a000bfc:	4806      	ldr	r0, [pc, #24]	; (1a000c18 <Chip_Clock_GetClockInputHz+0xb4>)
	return rate;
1a000bfe:	e7c0      	b.n	1a000b82 <Chip_Clock_GetClockInputHz+0x1e>
1a000c00:	00b71b00 	.word	0x00b71b00
1a000c04:	40043000 	.word	0x40043000
1a000c08:	017d7840 	.word	0x017d7840
1a000c0c:	1a001d2c 	.word	0x1a001d2c
1a000c10:	1a001d58 	.word	0x1a001d58
1a000c14:	10000058 	.word	0x10000058
1a000c18:	02faf080 	.word	0x02faf080

1a000c1c <Chip_Clock_CalcMainPLLValue>:
{
1a000c1c:	b538      	push	{r3, r4, r5, lr}
1a000c1e:	4605      	mov	r5, r0
1a000c20:	460c      	mov	r4, r1
	ppll->fin = Chip_Clock_GetClockInputHz(ppll->srcin);
1a000c22:	7908      	ldrb	r0, [r1, #4]
1a000c24:	f7ff ff9e 	bl	1a000b64 <Chip_Clock_GetClockInputHz>
1a000c28:	6160      	str	r0, [r4, #20]
	if (freq > MAX_CLOCK_FREQ || freq < (PLL_MIN_CCO_FREQ / 16) || !ppll->fin) {
1a000c2a:	4b19      	ldr	r3, [pc, #100]	; (1a000c90 <Chip_Clock_CalcMainPLLValue+0x74>)
1a000c2c:	442b      	add	r3, r5
1a000c2e:	4a19      	ldr	r2, [pc, #100]	; (1a000c94 <Chip_Clock_CalcMainPLLValue+0x78>)
1a000c30:	4293      	cmp	r3, r2
1a000c32:	d821      	bhi.n	1a000c78 <Chip_Clock_CalcMainPLLValue+0x5c>
1a000c34:	b318      	cbz	r0, 1a000c7e <Chip_Clock_CalcMainPLLValue+0x62>
	ppll->ctrl = 1 << 7; /* Enable direct mode [If possible] */
1a000c36:	2380      	movs	r3, #128	; 0x80
1a000c38:	6023      	str	r3, [r4, #0]
	ppll->nsel = 0;
1a000c3a:	2300      	movs	r3, #0
1a000c3c:	60a3      	str	r3, [r4, #8]
	ppll->psel = 0;
1a000c3e:	60e3      	str	r3, [r4, #12]
	ppll->msel = freq / ppll->fin;
1a000c40:	fbb5 f3f0 	udiv	r3, r5, r0
1a000c44:	6123      	str	r3, [r4, #16]
	if (freq < PLL_MIN_CCO_FREQ || ppll->msel * ppll->fin != freq) {
1a000c46:	4a14      	ldr	r2, [pc, #80]	; (1a000c98 <Chip_Clock_CalcMainPLLValue+0x7c>)
1a000c48:	4295      	cmp	r5, r2
1a000c4a:	d903      	bls.n	1a000c54 <Chip_Clock_CalcMainPLLValue+0x38>
1a000c4c:	fb00 f303 	mul.w	r3, r0, r3
1a000c50:	42ab      	cmp	r3, r5
1a000c52:	d007      	beq.n	1a000c64 <Chip_Clock_CalcMainPLLValue+0x48>
		pll_get_frac(freq, ppll);
1a000c54:	4621      	mov	r1, r4
1a000c56:	4628      	mov	r0, r5
1a000c58:	f7ff fe90 	bl	1a00097c <pll_get_frac>
		if (!ppll->nsel) {
1a000c5c:	68a3      	ldr	r3, [r4, #8]
1a000c5e:	b18b      	cbz	r3, 1a000c84 <Chip_Clock_CalcMainPLLValue+0x68>
		ppll->nsel --;
1a000c60:	3b01      	subs	r3, #1
1a000c62:	60a3      	str	r3, [r4, #8]
	if (ppll->msel == 0) {
1a000c64:	6923      	ldr	r3, [r4, #16]
1a000c66:	b183      	cbz	r3, 1a000c8a <Chip_Clock_CalcMainPLLValue+0x6e>
	if (ppll->psel) {
1a000c68:	68e2      	ldr	r2, [r4, #12]
1a000c6a:	b10a      	cbz	r2, 1a000c70 <Chip_Clock_CalcMainPLLValue+0x54>
		ppll->psel --;
1a000c6c:	3a01      	subs	r2, #1
1a000c6e:	60e2      	str	r2, [r4, #12]
	ppll->msel --;
1a000c70:	3b01      	subs	r3, #1
1a000c72:	6123      	str	r3, [r4, #16]
	return 0;
1a000c74:	2000      	movs	r0, #0
}
1a000c76:	bd38      	pop	{r3, r4, r5, pc}
		return -1;
1a000c78:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c7c:	e7fb      	b.n	1a000c76 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000c7e:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c82:	e7f8      	b.n	1a000c76 <Chip_Clock_CalcMainPLLValue+0x5a>
			return -1;
1a000c84:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c88:	e7f5      	b.n	1a000c76 <Chip_Clock_CalcMainPLLValue+0x5a>
		return - 1;
1a000c8a:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
1a000c8e:	e7f2      	b.n	1a000c76 <Chip_Clock_CalcMainPLLValue+0x5a>
1a000c90:	ff6b3a10 	.word	0xff6b3a10
1a000c94:	0b940510 	.word	0x0b940510
1a000c98:	094c5eff 	.word	0x094c5eff

1a000c9c <Chip_Clock_GetMainPLLHz>:
{
1a000c9c:	b530      	push	{r4, r5, lr}
1a000c9e:	b083      	sub	sp, #12
	uint32_t PLLReg = LPC_CGU->PLL1_CTRL;
1a000ca0:	4d16      	ldr	r5, [pc, #88]	; (1a000cfc <Chip_Clock_GetMainPLLHz+0x60>)
1a000ca2:	6c6c      	ldr	r4, [r5, #68]	; 0x44
	uint32_t freq = Chip_Clock_GetClockInputHz((CHIP_CGU_CLKIN_T) ((PLLReg >> 24) & 0xF));
1a000ca4:	f3c4 6003 	ubfx	r0, r4, #24, #4
1a000ca8:	f7ff ff5c 	bl	1a000b64 <Chip_Clock_GetClockInputHz>
1a000cac:	4684      	mov	ip, r0
	const uint8_t ptab[] = {1, 2, 4, 8};
1a000cae:	4b14      	ldr	r3, [pc, #80]	; (1a000d00 <Chip_Clock_GetMainPLLHz+0x64>)
1a000cb0:	9301      	str	r3, [sp, #4]
	if (!(LPC_CGU->PLL1_STAT & 1)) {
1a000cb2:	6c28      	ldr	r0, [r5, #64]	; 0x40
1a000cb4:	f010 0001 	ands.w	r0, r0, #1
1a000cb8:	d01d      	beq.n	1a000cf6 <Chip_Clock_GetMainPLLHz+0x5a>
	msel = (PLLReg >> 16) & 0xFF;
1a000cba:	f3c4 4207 	ubfx	r2, r4, #16, #8
	nsel = (PLLReg >> 12) & 0x3;
1a000cbe:	f3c4 3301 	ubfx	r3, r4, #12, #2
	psel = (PLLReg >> 8) & 0x3;
1a000cc2:	f3c4 2101 	ubfx	r1, r4, #8, #2
	fbsel = (PLLReg >> 6) & 0x1;
1a000cc6:	f3c4 1080 	ubfx	r0, r4, #6, #1
	m = msel + 1;
1a000cca:	3201      	adds	r2, #1
	n = nsel + 1;
1a000ccc:	3301      	adds	r3, #1
	p = ptab[psel];
1a000cce:	3108      	adds	r1, #8
1a000cd0:	4469      	add	r1, sp
1a000cd2:	f811 1c04 	ldrb.w	r1, [r1, #-4]
	if (direct || fbsel) {
1a000cd6:	f014 0f80 	tst.w	r4, #128	; 0x80
1a000cda:	d108      	bne.n	1a000cee <Chip_Clock_GetMainPLLHz+0x52>
1a000cdc:	b938      	cbnz	r0, 1a000cee <Chip_Clock_GetMainPLLHz+0x52>
	return (m / (2 * p)) * (freq / n);
1a000cde:	0049      	lsls	r1, r1, #1
1a000ce0:	fbb2 f2f1 	udiv	r2, r2, r1
1a000ce4:	fbbc f0f3 	udiv	r0, ip, r3
1a000ce8:	fb02 f000 	mul.w	r0, r2, r0
1a000cec:	e003      	b.n	1a000cf6 <Chip_Clock_GetMainPLLHz+0x5a>
		return m * (freq / n);
1a000cee:	fbbc f3f3 	udiv	r3, ip, r3
1a000cf2:	fb02 f003 	mul.w	r0, r2, r3
}
1a000cf6:	b003      	add	sp, #12
1a000cf8:	bd30      	pop	{r4, r5, pc}
1a000cfa:	bf00      	nop
1a000cfc:	40050000 	.word	0x40050000
1a000d00:	08040201 	.word	0x08040201

1a000d04 <Chip_Clock_GetDivRate>:
{
1a000d04:	b538      	push	{r3, r4, r5, lr}
1a000d06:	460c      	mov	r4, r1
	input = Chip_Clock_GetDividerSource(divider);
1a000d08:	4608      	mov	r0, r1
1a000d0a:	f7ff ff0f 	bl	1a000b2c <Chip_Clock_GetDividerSource>
1a000d0e:	4605      	mov	r5, r0
	div = Chip_Clock_GetDividerDivisor(divider);
1a000d10:	4620      	mov	r0, r4
1a000d12:	f7ff ff19 	bl	1a000b48 <Chip_Clock_GetDividerDivisor>
1a000d16:	4604      	mov	r4, r0
	return Chip_Clock_GetClockInputHz(input) / (div + 1);
1a000d18:	4628      	mov	r0, r5
1a000d1a:	f7ff ff23 	bl	1a000b64 <Chip_Clock_GetClockInputHz>
1a000d1e:	3401      	adds	r4, #1
}
1a000d20:	fbb0 f0f4 	udiv	r0, r0, r4
1a000d24:	bd38      	pop	{r3, r4, r5, pc}
	...

1a000d28 <Chip_Clock_SetBaseClock>:
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
}

/* Sets a CGU Base Clock clock source */
void Chip_Clock_SetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock, CHIP_CGU_CLKIN_T Input, bool autoblocken, bool powerdn)
{
1a000d28:	b430      	push	{r4, r5}
	uint32_t reg = LPC_CGU->BASE_CLK[BaseClock];
1a000d2a:	f100 0c16 	add.w	ip, r0, #22
1a000d2e:	ea4f 0c8c 	mov.w	ip, ip, lsl #2
1a000d32:	f10c 4c80 	add.w	ip, ip, #1073741824	; 0x40000000
1a000d36:	f50c 2ca0 	add.w	ip, ip, #327680	; 0x50000
1a000d3a:	f8dc 4004 	ldr.w	r4, [ip, #4]

	if (BaseClock < CLK_BASE_NONE) {
1a000d3e:	281b      	cmp	r0, #27
1a000d40:	d813      	bhi.n	1a000d6a <Chip_Clock_SetBaseClock+0x42>
		if (Input != CLKINPUT_PD) {
1a000d42:	2911      	cmp	r1, #17
1a000d44:	d01a      	beq.n	1a000d7c <Chip_Clock_SetBaseClock+0x54>
			/* Mask off fields we plan to update */
			reg &= ~((0x1F << 24) | 1 | (1 << 11));
1a000d46:	4d0e      	ldr	r5, [pc, #56]	; (1a000d80 <Chip_Clock_SetBaseClock+0x58>)
1a000d48:	4025      	ands	r5, r4

			if (autoblocken) {
1a000d4a:	b10a      	cbz	r2, 1a000d50 <Chip_Clock_SetBaseClock+0x28>
				reg |= (1 << 11);
1a000d4c:	f445 6500 	orr.w	r5, r5, #2048	; 0x800
			}
			if (powerdn) {
1a000d50:	b10b      	cbz	r3, 1a000d56 <Chip_Clock_SetBaseClock+0x2e>
				reg |= (1 << 0);
1a000d52:	f045 0501 	orr.w	r5, r5, #1
			}

			/* Set clock source */
			reg |= (Input << 24);
1a000d56:	ea45 6501 	orr.w	r5, r5, r1, lsl #24

			LPC_CGU->BASE_CLK[BaseClock] = reg;
1a000d5a:	3016      	adds	r0, #22
1a000d5c:	0080      	lsls	r0, r0, #2
1a000d5e:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d62:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d66:	6045      	str	r5, [r0, #4]
1a000d68:	e008      	b.n	1a000d7c <Chip_Clock_SetBaseClock+0x54>
		}
	}
	else {
		LPC_CGU->BASE_CLK[BaseClock] = reg | 1;	/* Power down this base clock */
1a000d6a:	f044 0401 	orr.w	r4, r4, #1
1a000d6e:	3016      	adds	r0, #22
1a000d70:	0080      	lsls	r0, r0, #2
1a000d72:	f100 4080 	add.w	r0, r0, #1073741824	; 0x40000000
1a000d76:	f500 20a0 	add.w	r0, r0, #327680	; 0x50000
1a000d7a:	6044      	str	r4, [r0, #4]
	}
}
1a000d7c:	bc30      	pop	{r4, r5}
1a000d7e:	4770      	bx	lr
1a000d80:	e0fff7fe 	.word	0xe0fff7fe

1a000d84 <Chip_Clock_GetBaseClock>:
/* Gets a CGU Base Clock clock source */
CHIP_CGU_CLKIN_T Chip_Clock_GetBaseClock(CHIP_CGU_BASE_CLK_T BaseClock)
{
	uint32_t reg;

	if (BaseClock >= CLK_BASE_NONE) {
1a000d84:	281b      	cmp	r0, #27
1a000d86:	d80d      	bhi.n	1a000da4 <Chip_Clock_GetBaseClock+0x20>
		return CLKINPUT_PD;
	}

	reg = LPC_CGU->BASE_CLK[BaseClock];
1a000d88:	f100 0316 	add.w	r3, r0, #22
1a000d8c:	009b      	lsls	r3, r3, #2
1a000d8e:	f103 4380 	add.w	r3, r3, #1073741824	; 0x40000000
1a000d92:	f503 23a0 	add.w	r3, r3, #327680	; 0x50000
1a000d96:	6858      	ldr	r0, [r3, #4]

	/* base clock is powered down? */
	if (reg & 1) {
1a000d98:	f010 0f01 	tst.w	r0, #1
1a000d9c:	d104      	bne.n	1a000da8 <Chip_Clock_GetBaseClock+0x24>
		return CLKINPUT_PD;
	}

	return (CHIP_CGU_CLKIN_T) ((reg >> 24) & 0x1F);
1a000d9e:	f3c0 6004 	ubfx	r0, r0, #24, #5
1a000da2:	4770      	bx	lr
		return CLKINPUT_PD;
1a000da4:	2011      	movs	r0, #17
1a000da6:	4770      	bx	lr
		return CLKINPUT_PD;
1a000da8:	2011      	movs	r0, #17
}
1a000daa:	4770      	bx	lr

1a000dac <Chip_Clock_GetBaseClocktHz>:
{
1a000dac:	b508      	push	{r3, lr}
	return Chip_Clock_GetClockInputHz(Chip_Clock_GetBaseClock(clock));
1a000dae:	f7ff ffe9 	bl	1a000d84 <Chip_Clock_GetBaseClock>
1a000db2:	f7ff fed7 	bl	1a000b64 <Chip_Clock_GetClockInputHz>
}
1a000db6:	bd08      	pop	{r3, pc}

1a000db8 <Chip_Clock_EnableOpts>:
/* Enables a peripheral clock and sets clock states */
void Chip_Clock_EnableOpts(CHIP_CCU_CLK_T clk, bool autoen, bool wakeupen, int div)
{
	uint32_t reg = 1;

	if (autoen) {
1a000db8:	b971      	cbnz	r1, 1a000dd8 <Chip_Clock_EnableOpts+0x20>
	uint32_t reg = 1;
1a000dba:	2101      	movs	r1, #1
		reg |= (1 << 1);
	}
	if (wakeupen) {
1a000dbc:	b10a      	cbz	r2, 1a000dc2 <Chip_Clock_EnableOpts+0xa>
		reg |= (1 << 2);
1a000dbe:	f041 0104 	orr.w	r1, r1, #4
	}

	/* Not all clocks support a divider, but we won't check that here. Only
	   dividers of 1 and 2 are allowed. Assume 1 if not 2 */
	if (div == 2) {
1a000dc2:	2b02      	cmp	r3, #2
1a000dc4:	d00a      	beq.n	1a000ddc <Chip_Clock_EnableOpts+0x24>
		reg |= (1 << 5);
	}

	/* Setup peripheral clock and start running */
	if (clk >= CLK_CCU2_START) {
1a000dc6:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000dca:	d30a      	bcc.n	1a000de2 <Chip_Clock_EnableOpts+0x2a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG = reg;
1a000dcc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000dd0:	4b06      	ldr	r3, [pc, #24]	; (1a000dec <Chip_Clock_EnableOpts+0x34>)
1a000dd2:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
1a000dd6:	4770      	bx	lr
		reg |= (1 << 1);
1a000dd8:	2103      	movs	r1, #3
1a000dda:	e7ef      	b.n	1a000dbc <Chip_Clock_EnableOpts+0x4>
		reg |= (1 << 5);
1a000ddc:	f041 0120 	orr.w	r1, r1, #32
1a000de0:	e7f1      	b.n	1a000dc6 <Chip_Clock_EnableOpts+0xe>
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG = reg;
1a000de2:	3020      	adds	r0, #32
1a000de4:	4b02      	ldr	r3, [pc, #8]	; (1a000df0 <Chip_Clock_EnableOpts+0x38>)
1a000de6:	f843 1030 	str.w	r1, [r3, r0, lsl #3]
	}
}
1a000dea:	4770      	bx	lr
1a000dec:	40052000 	.word	0x40052000
1a000df0:	40051000 	.word	0x40051000

1a000df4 <Chip_Clock_Enable>:

/* Enables a peripheral clock */
void Chip_Clock_Enable(CHIP_CCU_CLK_T clk)
{
	/* Start peripheral clock running */
	if (clk >= CLK_CCU2_START) {
1a000df4:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000df8:	d309      	bcc.n	1a000e0e <Chip_Clock_Enable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG |= 1;
1a000dfa:	4a09      	ldr	r2, [pc, #36]	; (1a000e20 <Chip_Clock_Enable+0x2c>)
1a000dfc:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000e00:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000e04:	f043 0301 	orr.w	r3, r3, #1
1a000e08:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000e0c:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG |= 1;
1a000e0e:	4a05      	ldr	r2, [pc, #20]	; (1a000e24 <Chip_Clock_Enable+0x30>)
1a000e10:	3020      	adds	r0, #32
1a000e12:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000e16:	f043 0301 	orr.w	r3, r3, #1
1a000e1a:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000e1e:	4770      	bx	lr
1a000e20:	40052000 	.word	0x40052000
1a000e24:	40051000 	.word	0x40051000

1a000e28 <Chip_Clock_Disable>:

/* Disables a peripheral clock */
void Chip_Clock_Disable(CHIP_CCU_CLK_T clk)
{
	/* Stop peripheral clock */
	if (clk >= CLK_CCU2_START) {
1a000e28:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000e2c:	d309      	bcc.n	1a000e42 <Chip_Clock_Disable+0x1a>
		LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG &= ~1;
1a000e2e:	4a09      	ldr	r2, [pc, #36]	; (1a000e54 <Chip_Clock_Disable+0x2c>)
1a000e30:	f5a0 7091 	sub.w	r0, r0, #290	; 0x122
1a000e34:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000e38:	f023 0301 	bic.w	r3, r3, #1
1a000e3c:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
1a000e40:	4770      	bx	lr
	}
	else {
		LPC_CCU1->CLKCCU[clk].CFG &= ~1;
1a000e42:	4a05      	ldr	r2, [pc, #20]	; (1a000e58 <Chip_Clock_Disable+0x30>)
1a000e44:	3020      	adds	r0, #32
1a000e46:	f852 3030 	ldr.w	r3, [r2, r0, lsl #3]
1a000e4a:	f023 0301 	bic.w	r3, r3, #1
1a000e4e:	f842 3030 	str.w	r3, [r2, r0, lsl #3]
	}
}
1a000e52:	4770      	bx	lr
1a000e54:	40052000 	.word	0x40052000
1a000e58:	40051000 	.word	0x40051000

1a000e5c <Chip_Clock_GetRate>:
	LPC_CCU2->PM = 0;
}

/* Returns a peripheral clock rate */
uint32_t Chip_Clock_GetRate(CHIP_CCU_CLK_T clk)
{
1a000e5c:	b510      	push	{r4, lr}
1a000e5e:	4603      	mov	r3, r0
	CHIP_CGU_BASE_CLK_T baseclk;
	uint32_t reg, div, rate;

	/* Get CCU config register for clock */
	if (clk >= CLK_CCU2_START) {
1a000e60:	f5b0 7fa1 	cmp.w	r0, #322	; 0x142
1a000e64:	d308      	bcc.n	1a000e78 <Chip_Clock_GetRate+0x1c>
		reg = LPC_CCU2->CLKCCU[clk - CLK_CCU2_START].CFG;
1a000e66:	f5a0 7291 	sub.w	r2, r0, #290	; 0x122
1a000e6a:	490d      	ldr	r1, [pc, #52]	; (1a000ea0 <Chip_Clock_GetRate+0x44>)
1a000e6c:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
	else {
		reg = LPC_CCU1->CLKCCU[clk].CFG;
	}

	/* Is the clock enabled? */
	if (reg & 1) {
1a000e70:	f014 0001 	ands.w	r0, r4, #1
1a000e74:	d106      	bne.n	1a000e84 <Chip_Clock_GetRate+0x28>
	else {
		rate = 0;
	}

	return rate;
}
1a000e76:	bd10      	pop	{r4, pc}
		reg = LPC_CCU1->CLKCCU[clk].CFG;
1a000e78:	f100 0220 	add.w	r2, r0, #32
1a000e7c:	4909      	ldr	r1, [pc, #36]	; (1a000ea4 <Chip_Clock_GetRate+0x48>)
1a000e7e:	f851 4032 	ldr.w	r4, [r1, r2, lsl #3]
1a000e82:	e7f5      	b.n	1a000e70 <Chip_Clock_GetRate+0x14>
		baseclk = Chip_Clock_FindBaseClock(clk);
1a000e84:	4618      	mov	r0, r3
1a000e86:	f7ff fe01 	bl	1a000a8c <Chip_Clock_FindBaseClock>
		rate = Chip_Clock_GetBaseClocktHz(baseclk);
1a000e8a:	f7ff ff8f 	bl	1a000dac <Chip_Clock_GetBaseClocktHz>
		if (((reg >> 5) & 0x7) == 0) {
1a000e8e:	f014 0fe0 	tst.w	r4, #224	; 0xe0
1a000e92:	d103      	bne.n	1a000e9c <Chip_Clock_GetRate+0x40>
			div = 1;
1a000e94:	2301      	movs	r3, #1
		rate = rate / div;
1a000e96:	fbb0 f0f3 	udiv	r0, r0, r3
	return rate;
1a000e9a:	e7ec      	b.n	1a000e76 <Chip_Clock_GetRate+0x1a>
			div = 2;/* No other dividers supported */
1a000e9c:	2302      	movs	r3, #2
1a000e9e:	e7fa      	b.n	1a000e96 <Chip_Clock_GetRate+0x3a>
1a000ea0:	40052000 	.word	0x40052000
1a000ea4:	40051000 	.word	0x40051000

1a000ea8 <Chip_DAC_DeInit>:
	Chip_DAC_SetBias(pDAC, DAC_MAX_UPDATE_RATE_1MHz);
}

/* Shutdown DAC peripheral */
void Chip_DAC_DeInit(LPC_DAC_T *pDAC)
{
1a000ea8:	b508      	push	{r3, lr}
	Chip_Clock_Disable(CLK_APB3_DAC);
1a000eaa:	2002      	movs	r0, #2
1a000eac:	f7ff ffbc 	bl	1a000e28 <Chip_Clock_Disable>
}
1a000eb0:	bd08      	pop	{r3, pc}

1a000eb2 <Chip_DAC_UpdateValue>:
/* Update value to DAC buffer*/
void Chip_DAC_UpdateValue(LPC_DAC_T *pDAC, uint32_t dac_value)
{
	uint32_t tmp;

	tmp = pDAC->CR & DAC_BIAS_EN;
1a000eb2:	6803      	ldr	r3, [r0, #0]
1a000eb4:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
	tmp |= DAC_VALUE(dac_value);
1a000eb8:	0189      	lsls	r1, r1, #6
1a000eba:	b289      	uxth	r1, r1
1a000ebc:	4319      	orrs	r1, r3
	/* Update value */
	pDAC->CR = tmp;
1a000ebe:	6001      	str	r1, [r0, #0]
}
1a000ec0:	4770      	bx	lr

1a000ec2 <Chip_DAC_SetBias>:

/* Set Maximum update rate for DAC */
void Chip_DAC_SetBias(LPC_DAC_T *pDAC, uint32_t bias)
{
	pDAC->CR &= ~DAC_BIAS_EN;
1a000ec2:	6803      	ldr	r3, [r0, #0]
1a000ec4:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
1a000ec8:	6003      	str	r3, [r0, #0]

	if (bias  == DAC_MAX_UPDATE_RATE_400kHz) {
1a000eca:	2901      	cmp	r1, #1
1a000ecc:	d000      	beq.n	1a000ed0 <Chip_DAC_SetBias+0xe>
		pDAC->CR |= DAC_BIAS_EN;
	}
}
1a000ece:	4770      	bx	lr
		pDAC->CR |= DAC_BIAS_EN;
1a000ed0:	6803      	ldr	r3, [r0, #0]
1a000ed2:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
1a000ed6:	6003      	str	r3, [r0, #0]
}
1a000ed8:	e7f9      	b.n	1a000ece <Chip_DAC_SetBias+0xc>

1a000eda <Chip_GPIO_Init>:
 ****************************************************************************/

/* Initialize GPIO block */
void Chip_GPIO_Init(LPC_GPIO_T *pGPIO)
{
}
1a000eda:	4770      	bx	lr

1a000edc <Chip_I2C_EventHandler>:
{
	struct i2c_interface *iic = &i2c[id];
	volatile I2C_STATUS_T *stat;

	/* Only WAIT event needs to be handled */
	if (event != I2C_EVENT_WAIT) {
1a000edc:	2901      	cmp	r1, #1
1a000ede:	d109      	bne.n	1a000ef4 <Chip_I2C_EventHandler+0x18>
		return;
	}

	stat = &iic->mXfer->status;
1a000ee0:	ebc0 00c0 	rsb	r0, r0, r0, lsl #3
1a000ee4:	4b04      	ldr	r3, [pc, #16]	; (1a000ef8 <Chip_I2C_EventHandler+0x1c>)
1a000ee6:	eb03 0380 	add.w	r3, r3, r0, lsl #2
1a000eea:	691a      	ldr	r2, [r3, #16]
	/* Wait for the status to change */
	while (*stat == I2C_STATUS_BUSY) {}
1a000eec:	7d13      	ldrb	r3, [r2, #20]
1a000eee:	b2db      	uxtb	r3, r3
1a000ef0:	2b04      	cmp	r3, #4
1a000ef2:	d0fb      	beq.n	1a000eec <Chip_I2C_EventHandler+0x10>
}
1a000ef4:	4770      	bx	lr
1a000ef6:	bf00      	nop
1a000ef8:	10000000 	.word	0x10000000

1a000efc <Chip_I2C_Init>:
	}
}

/* Initializes the LPC_I2C peripheral with specified parameter */
void Chip_I2C_Init(I2C_ID_T id)
{
1a000efc:	b570      	push	{r4, r5, r6, lr}
1a000efe:	4604      	mov	r4, r0
	Chip_Clock_Enable(i2c[id].clk);
1a000f00:	4e07      	ldr	r6, [pc, #28]	; (1a000f20 <Chip_I2C_Init+0x24>)
1a000f02:	00c5      	lsls	r5, r0, #3
1a000f04:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000f08:	eb06 0383 	add.w	r3, r6, r3, lsl #2
1a000f0c:	8898      	ldrh	r0, [r3, #4]
1a000f0e:	f7ff ff71 	bl	1a000df4 <Chip_Clock_Enable>
	enableClk(id);

	/* Set I2C operation to default */
	LPC_I2Cx(id)->CONCLR = (I2C_CON_AA | I2C_CON_SI | I2C_CON_STA | I2C_CON_I2EN);
1a000f12:	1b2d      	subs	r5, r5, r4
1a000f14:	f856 3025 	ldr.w	r3, [r6, r5, lsl #2]
1a000f18:	226c      	movs	r2, #108	; 0x6c
1a000f1a:	619a      	str	r2, [r3, #24]
}
1a000f1c:	bd70      	pop	{r4, r5, r6, pc}
1a000f1e:	bf00      	nop
1a000f20:	10000000 	.word	0x10000000

1a000f24 <Chip_I2C_SetClockRate>:
	disableClk(id);
}

/* Set up clock rate for LPC_I2C peripheral */
void Chip_I2C_SetClockRate(I2C_ID_T id, uint32_t clockrate)
{
1a000f24:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
1a000f28:	4604      	mov	r4, r0
1a000f2a:	4688      	mov	r8, r1
	return Chip_Clock_GetRate(i2c[id].clk);
1a000f2c:	4d0b      	ldr	r5, [pc, #44]	; (1a000f5c <Chip_I2C_SetClockRate+0x38>)
1a000f2e:	00c6      	lsls	r6, r0, #3
1a000f30:	ebc0 03c0 	rsb	r3, r0, r0, lsl #3
1a000f34:	009f      	lsls	r7, r3, #2
1a000f36:	eb05 0383 	add.w	r3, r5, r3, lsl #2
1a000f3a:	8898      	ldrh	r0, [r3, #4]
1a000f3c:	f7ff ff8e 	bl	1a000e5c <Chip_Clock_GetRate>
	uint32_t SCLValue;

	SCLValue = (getClkRate(id) / clockrate);
1a000f40:	fbb0 f1f8 	udiv	r1, r0, r8
	LPC_I2Cx(id)->SCLH = (uint32_t) (SCLValue >> 1);
1a000f44:	59eb      	ldr	r3, [r5, r7]
1a000f46:	084a      	lsrs	r2, r1, #1
1a000f48:	611a      	str	r2, [r3, #16]
	LPC_I2Cx(id)->SCLL = (uint32_t) (SCLValue - LPC_I2Cx(id)->SCLH);
1a000f4a:	1b36      	subs	r6, r6, r4
1a000f4c:	f855 3026 	ldr.w	r3, [r5, r6, lsl #2]
1a000f50:	691a      	ldr	r2, [r3, #16]
1a000f52:	1a89      	subs	r1, r1, r2
1a000f54:	6159      	str	r1, [r3, #20]
}
1a000f56:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
1a000f5a:	bf00      	nop
1a000f5c:	10000000 	.word	0x10000000

1a000f60 <Chip_SSP_GetClockIndex>:
/* Returns clock index for the register interface */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000f60:	4b03      	ldr	r3, [pc, #12]	; (1a000f70 <Chip_SSP_GetClockIndex+0x10>)
1a000f62:	4298      	cmp	r0, r3
1a000f64:	d001      	beq.n	1a000f6a <Chip_SSP_GetClockIndex+0xa>
		clkSSP = CLK_MX_SSP1;
	}
	else {
		clkSSP = CLK_MX_SSP0;
1a000f66:	2083      	movs	r0, #131	; 0x83
	}

	return clkSSP;
}
1a000f68:	4770      	bx	lr
		clkSSP = CLK_MX_SSP1;
1a000f6a:	20a5      	movs	r0, #165	; 0xa5
1a000f6c:	4770      	bx	lr
1a000f6e:	bf00      	nop
1a000f70:	400c5000 	.word	0x400c5000

1a000f74 <Chip_SSP_GetPeriphClockIndex>:
/* Returns clock index for the peripheral block */
STATIC CHIP_CCU_CLK_T Chip_SSP_GetPeriphClockIndex(LPC_SSP_T *pSSP)
{
	CHIP_CCU_CLK_T clkSSP;

	if (pSSP == LPC_SSP1) {
1a000f74:	4b04      	ldr	r3, [pc, #16]	; (1a000f88 <Chip_SSP_GetPeriphClockIndex+0x14>)
1a000f76:	4298      	cmp	r0, r3
1a000f78:	d002      	beq.n	1a000f80 <Chip_SSP_GetPeriphClockIndex+0xc>
		clkSSP = CLK_APB2_SSP1;
	}
	else {
		clkSSP = CLK_APB0_SSP0;
1a000f7a:	f240 2002 	movw	r0, #514	; 0x202
	}

	return clkSSP;
}
1a000f7e:	4770      	bx	lr
		clkSSP = CLK_APB2_SSP1;
1a000f80:	f44f 70f1 	mov.w	r0, #482	; 0x1e2
1a000f84:	4770      	bx	lr
1a000f86:	bf00      	nop
1a000f88:	400c5000 	.word	0x400c5000

1a000f8c <Chip_SSP_SetClockRate>:

/*Set up output clocks per bit for SSP bus*/
void Chip_SSP_SetClockRate(LPC_SSP_T *pSSP, uint32_t clk_rate, uint32_t prescale)
{
	uint32_t temp;
	temp = pSSP->CR0 & (~(SSP_CR0_SCR(0xFF)));
1a000f8c:	6803      	ldr	r3, [r0, #0]
1a000f8e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
	pSSP->CR0 = temp | (SSP_CR0_SCR(clk_rate));
1a000f92:	0209      	lsls	r1, r1, #8
1a000f94:	b289      	uxth	r1, r1
1a000f96:	4319      	orrs	r1, r3
1a000f98:	6001      	str	r1, [r0, #0]
	pSSP->CPSR = prescale;
1a000f9a:	6102      	str	r2, [r0, #16]
}
1a000f9c:	4770      	bx	lr

1a000f9e <Chip_SSP_SetBitRate>:
	}
}

/* Set the clock frequency for SSP interface */
void Chip_SSP_SetBitRate(LPC_SSP_T *pSSP, uint32_t bitRate)
{
1a000f9e:	b538      	push	{r3, r4, r5, lr}
1a000fa0:	4605      	mov	r5, r0
1a000fa2:	460c      	mov	r4, r1
	uint32_t ssp_clk, cr0_div, cmp_clk, prescale;

	ssp_clk = Chip_Clock_GetRate(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000fa4:	f7ff ffe6 	bl	1a000f74 <Chip_SSP_GetPeriphClockIndex>
1a000fa8:	f7ff ff58 	bl	1a000e5c <Chip_Clock_GetRate>

	cr0_div = 0;
	cmp_clk = 0xFFFFFFFF;
	prescale = 2;
1a000fac:	2202      	movs	r2, #2
	cmp_clk = 0xFFFFFFFF;
1a000fae:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
	cr0_div = 0;
1a000fb2:	2100      	movs	r1, #0

	while (cmp_clk > bitRate) {
1a000fb4:	e000      	b.n	1a000fb8 <Chip_SSP_SetBitRate+0x1a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
		if (cmp_clk > bitRate) {
			cr0_div++;
1a000fb6:	4661      	mov	r1, ip
	while (cmp_clk > bitRate) {
1a000fb8:	42a3      	cmp	r3, r4
1a000fba:	d90d      	bls.n	1a000fd8 <Chip_SSP_SetBitRate+0x3a>
		cmp_clk = ssp_clk / ((cr0_div + 1) * prescale);
1a000fbc:	f101 0c01 	add.w	ip, r1, #1
1a000fc0:	fb01 2302 	mla	r3, r1, r2, r2
1a000fc4:	fbb0 f3f3 	udiv	r3, r0, r3
		if (cmp_clk > bitRate) {
1a000fc8:	429c      	cmp	r4, r3
1a000fca:	d2f5      	bcs.n	1a000fb8 <Chip_SSP_SetBitRate+0x1a>
			if (cr0_div > 0xFF) {
1a000fcc:	f1bc 0fff 	cmp.w	ip, #255	; 0xff
1a000fd0:	d9f1      	bls.n	1a000fb6 <Chip_SSP_SetBitRate+0x18>
				cr0_div = 0;
				prescale += 2;
1a000fd2:	3202      	adds	r2, #2
				cr0_div = 0;
1a000fd4:	2100      	movs	r1, #0
1a000fd6:	e7ef      	b.n	1a000fb8 <Chip_SSP_SetBitRate+0x1a>
			}
		}
	}

	Chip_SSP_SetClockRate(pSSP, cr0_div, prescale);
1a000fd8:	4628      	mov	r0, r5
1a000fda:	f7ff ffd7 	bl	1a000f8c <Chip_SSP_SetClockRate>
}
1a000fde:	bd38      	pop	{r3, r4, r5, pc}

1a000fe0 <Chip_SSP_Init>:

/* Initialize the SSP */
void Chip_SSP_Init(LPC_SSP_T *pSSP)
{
1a000fe0:	b510      	push	{r4, lr}
1a000fe2:	4604      	mov	r4, r0
	Chip_Clock_Enable(Chip_SSP_GetClockIndex(pSSP));
1a000fe4:	f7ff ffbc 	bl	1a000f60 <Chip_SSP_GetClockIndex>
1a000fe8:	f7ff ff04 	bl	1a000df4 <Chip_Clock_Enable>
	Chip_Clock_Enable(Chip_SSP_GetPeriphClockIndex(pSSP));
1a000fec:	4620      	mov	r0, r4
1a000fee:	f7ff ffc1 	bl	1a000f74 <Chip_SSP_GetPeriphClockIndex>
1a000ff2:	f7ff feff 	bl	1a000df4 <Chip_Clock_Enable>
	pSSP->CR1 = (pSSP->CR1 & ~(1 << 2)) | mode;
1a000ff6:	6863      	ldr	r3, [r4, #4]
1a000ff8:	f023 0304 	bic.w	r3, r3, #4
1a000ffc:	6063      	str	r3, [r4, #4]
	pSSP->CR0 = (pSSP->CR0 & ~0xFF) | bits | frameFormat | clockMode;
1a000ffe:	6823      	ldr	r3, [r4, #0]
1a001000:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
1a001004:	f043 0307 	orr.w	r3, r3, #7
1a001008:	6023      	str	r3, [r4, #0]

	Chip_SSP_Set_Mode(pSSP, SSP_MODE_MASTER);
	Chip_SSP_SetFormat(pSSP, SSP_BITS_8, SSP_FRAMEFORMAT_SPI, SSP_CLOCK_CPHA0_CPOL0);
	Chip_SSP_SetBitRate(pSSP, 100000);
1a00100a:	4902      	ldr	r1, [pc, #8]	; (1a001014 <Chip_SSP_Init+0x34>)
1a00100c:	4620      	mov	r0, r4
1a00100e:	f7ff ffc6 	bl	1a000f9e <Chip_SSP_SetBitRate>
}
1a001012:	bd10      	pop	{r4, pc}
1a001014:	000186a0 	.word	0x000186a0

1a001018 <Chip_SetupCoreClock>:
/*****************************************************************************
 * Public functions
 ****************************************************************************/
/* Setup Chip Core clock */
void Chip_SetupCoreClock(CHIP_CGU_CLKIN_T clkin, uint32_t core_freq, bool setbase)
{
1a001018:	b570      	push	{r4, r5, r6, lr}
1a00101a:	b08a      	sub	sp, #40	; 0x28
1a00101c:	4605      	mov	r5, r0
1a00101e:	460e      	mov	r6, r1
1a001020:	4614      	mov	r4, r2
	int i;
	volatile uint32_t delay = 50000; // FIXME: original was 500, fix for horrible crystals. @Eric
1a001022:	f24c 3350 	movw	r3, #50000	; 0xc350
1a001026:	9309      	str	r3, [sp, #36]	; 0x24
	uint32_t direct = 0, pdivide = 0;
	PLL_PARAM_T ppll;

	if (clkin == CLKIN_CRYSTAL) {
1a001028:	2806      	cmp	r0, #6
1a00102a:	d018      	beq.n	1a00105e <Chip_SetupCoreClock+0x46>
		/* Switch main system clocking to crystal */
		Chip_Clock_EnableCrystal();
	}
	Chip_Clock_SetBaseClock(CLK_BASE_MX, clkin, true, false);
1a00102c:	2300      	movs	r3, #0
1a00102e:	2201      	movs	r2, #1
1a001030:	4629      	mov	r1, r5
1a001032:	2004      	movs	r0, #4
1a001034:	f7ff fe78 	bl	1a000d28 <Chip_Clock_SetBaseClock>
 * Saves power if the main PLL is not needed.
 */
__STATIC_INLINE void Chip_Clock_DisableMainPLL(void)
{
	/* power down main PLL */
	LPC_CGU->PLL1_CTRL |= 1;
1a001038:	4a4a      	ldr	r2, [pc, #296]	; (1a001164 <Chip_SetupCoreClock+0x14c>)
1a00103a:	6c53      	ldr	r3, [r2, #68]	; 0x44
1a00103c:	f043 0301 	orr.w	r3, r3, #1
1a001040:	6453      	str	r3, [r2, #68]	; 0x44
	Chip_Clock_DisableMainPLL(); /* Disable PLL */

	/* Calculate the PLL Parameters */
	ppll.srcin = clkin;
1a001042:	f88d 5008 	strb.w	r5, [sp, #8]
	Chip_Clock_CalcMainPLLValue(core_freq, &ppll);
1a001046:	a901      	add	r1, sp, #4
1a001048:	4630      	mov	r0, r6
1a00104a:	f7ff fde7 	bl	1a000c1c <Chip_Clock_CalcMainPLLValue>

	if (core_freq > 110000000UL) {
1a00104e:	4b46      	ldr	r3, [pc, #280]	; (1a001168 <Chip_SetupCoreClock+0x150>)
1a001050:	429e      	cmp	r6, r3
1a001052:	d916      	bls.n	1a001082 <Chip_SetupCoreClock+0x6a>
		if (ppll.ctrl & (1 << 6)) {
1a001054:	9b01      	ldr	r3, [sp, #4]
1a001056:	f013 0f40 	tst.w	r3, #64	; 0x40
1a00105a:	d003      	beq.n	1a001064 <Chip_SetupCoreClock+0x4c>
			while(1);		// to run in integer mode above 110 MHz, you need to use IDIV clock to boot strap CPU to that freq
1a00105c:	e7fe      	b.n	1a00105c <Chip_SetupCoreClock+0x44>
		Chip_Clock_EnableCrystal();
1a00105e:	f7ff fd3f 	bl	1a000ae0 <Chip_Clock_EnableCrystal>
1a001062:	e7e3      	b.n	1a00102c <Chip_SetupCoreClock+0x14>
		} else if (ppll.ctrl & (1 << 7)){
1a001064:	f013 0f80 	tst.w	r3, #128	; 0x80
1a001068:	d005      	beq.n	1a001076 <Chip_SetupCoreClock+0x5e>
			direct = 1;
			ppll.ctrl &= ~(1 << 7);
1a00106a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a00106e:	9301      	str	r3, [sp, #4]
	uint32_t direct = 0, pdivide = 0;
1a001070:	2600      	movs	r6, #0
			direct = 1;
1a001072:	2501      	movs	r5, #1
1a001074:	e007      	b.n	1a001086 <Chip_SetupCoreClock+0x6e>
		} else {
			pdivide = 1;
			ppll.psel++;
1a001076:	9b04      	ldr	r3, [sp, #16]
1a001078:	3301      	adds	r3, #1
1a00107a:	9304      	str	r3, [sp, #16]
			pdivide = 1;
1a00107c:	2601      	movs	r6, #1
	uint32_t direct = 0, pdivide = 0;
1a00107e:	2500      	movs	r5, #0
1a001080:	e001      	b.n	1a001086 <Chip_SetupCoreClock+0x6e>
1a001082:	2600      	movs	r6, #0
1a001084:	4635      	mov	r5, r6
 * Make sure the main PLL is enabled.
 */
__STATIC_INLINE void Chip_Clock_SetupMainPLL(const PLL_PARAM_T *ppll)
{
	/* power up main PLL */
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a001086:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a00108a:	9b01      	ldr	r3, [sp, #4]
1a00108c:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a001090:	9a05      	ldr	r2, [sp, #20]
1a001092:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001096:	9a03      	ldr	r2, [sp, #12]
1a001098:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a00109c:	9a04      	ldr	r2, [sp, #16]
1a00109e:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0010a2:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0010a6:	4a2f      	ldr	r2, [pc, #188]	; (1a001164 <Chip_SetupCoreClock+0x14c>)
1a0010a8:	6453      	str	r3, [r2, #68]	; 0x44
 * @note	The main PLL should be locked prior to using it as a clock input for a base clock.
 */
__STATIC_INLINE int Chip_Clock_MainPLLLocked(void)
{
	/* Return true if locked */
	return (LPC_CGU->PLL1_STAT & 1) != 0;
1a0010aa:	4b2e      	ldr	r3, [pc, #184]	; (1a001164 <Chip_SetupCoreClock+0x14c>)
1a0010ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40

	/* Setup and start the PLL */
	Chip_Clock_SetupMainPLL(&ppll);

	/* Wait for the PLL to lock */
	while(!Chip_Clock_MainPLLLocked()) {}
1a0010ae:	f013 0f01 	tst.w	r3, #1
1a0010b2:	d0fa      	beq.n	1a0010aa <Chip_SetupCoreClock+0x92>

	/* Set core clock base as PLL1 */
	Chip_Clock_SetBaseClock(CLK_BASE_MX, CLKIN_MAINPLL, true, false);
1a0010b4:	2300      	movs	r3, #0
1a0010b6:	2201      	movs	r2, #1
1a0010b8:	2109      	movs	r1, #9
1a0010ba:	2004      	movs	r0, #4
1a0010bc:	f7ff fe34 	bl	1a000d28 <Chip_Clock_SetBaseClock>

	if (direct) {
1a0010c0:	b305      	cbz	r5, 1a001104 <Chip_SetupCoreClock+0xec>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a0010c2:	f24c 3350 	movw	r3, #50000	; 0xc350
1a0010c6:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize*/
1a0010c8:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a0010ca:	1e5a      	subs	r2, r3, #1
1a0010cc:	9209      	str	r2, [sp, #36]	; 0x24
1a0010ce:	2b00      	cmp	r3, #0
1a0010d0:	d1fa      	bne.n	1a0010c8 <Chip_SetupCoreClock+0xb0>
		ppll.ctrl |= 1 << 7;
1a0010d2:	9b01      	ldr	r3, [sp, #4]
1a0010d4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0010d8:	9301      	str	r3, [sp, #4]
    LPC_CGU->PLL1_CTRL = ppll->ctrl | ((uint32_t) ppll->srcin << 24) | (ppll->msel << 16) | (ppll->nsel << 12) | (ppll->psel << 8) | ( 1 << 11);	
1a0010da:	f89d 2008 	ldrb.w	r2, [sp, #8]
1a0010de:	ea43 6302 	orr.w	r3, r3, r2, lsl #24
1a0010e2:	9a05      	ldr	r2, [sp, #20]
1a0010e4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a0010e8:	9a03      	ldr	r2, [sp, #12]
1a0010ea:	ea43 3302 	orr.w	r3, r3, r2, lsl #12
1a0010ee:	9a04      	ldr	r2, [sp, #16]
1a0010f0:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a0010f4:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a0010f8:	4a1a      	ldr	r2, [pc, #104]	; (1a001164 <Chip_SetupCoreClock+0x14c>)
1a0010fa:	6453      	str	r3, [r2, #68]	; 0x44
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
		ppll.psel--;
		Chip_Clock_SetupMainPLL(&ppll); /* Set PDIV to operate at full frequency */
	}

	if (setbase) {
1a0010fc:	2c00      	cmp	r4, #0
1a0010fe:	d12e      	bne.n	1a00115e <Chip_SetupCoreClock+0x146>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
									InitClkStates[i].autoblock_enab, InitClkStates[i].powerdn);
		}
	}
}
1a001100:	b00a      	add	sp, #40	; 0x28
1a001102:	bd70      	pop	{r4, r5, r6, pc}
	} else if (pdivide) {
1a001104:	2e00      	cmp	r6, #0
1a001106:	d0f9      	beq.n	1a0010fc <Chip_SetupCoreClock+0xe4>
		delay = 50000; // FIXME: original was 1000, fix for horrible crystals. @Eric
1a001108:	f24c 3350 	movw	r3, #50000	; 0xc350
1a00110c:	9309      	str	r3, [sp, #36]	; 0x24
		while(delay --){} /* Wait for approx 50 uSec -- for power supply to stabilize */
1a00110e:	9b09      	ldr	r3, [sp, #36]	; 0x24
1a001110:	1e5a      	subs	r2, r3, #1
1a001112:	9209      	str	r2, [sp, #36]	; 0x24
1a001114:	2b00      	cmp	r3, #0
1a001116:	d1fa      	bne.n	1a00110e <Chip_SetupCoreClock+0xf6>
		ppll.psel--;
1a001118:	9a04      	ldr	r2, [sp, #16]
1a00111a:	3a01      	subs	r2, #1
1a00111c:	9204      	str	r2, [sp, #16]
1a00111e:	f89d 1008 	ldrb.w	r1, [sp, #8]
1a001122:	9b01      	ldr	r3, [sp, #4]
1a001124:	ea43 6301 	orr.w	r3, r3, r1, lsl #24
1a001128:	9905      	ldr	r1, [sp, #20]
1a00112a:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
1a00112e:	9903      	ldr	r1, [sp, #12]
1a001130:	ea43 3301 	orr.w	r3, r3, r1, lsl #12
1a001134:	ea43 2302 	orr.w	r3, r3, r2, lsl #8
1a001138:	f443 6300 	orr.w	r3, r3, #2048	; 0x800
1a00113c:	4a09      	ldr	r2, [pc, #36]	; (1a001164 <Chip_SetupCoreClock+0x14c>)
1a00113e:	6453      	str	r3, [r2, #68]	; 0x44
}
1a001140:	e7dc      	b.n	1a0010fc <Chip_SetupCoreClock+0xe4>
			Chip_Clock_SetBaseClock(InitClkStates[i].clk, InitClkStates[i].clkin,
1a001142:	480a      	ldr	r0, [pc, #40]	; (1a00116c <Chip_SetupCoreClock+0x154>)
1a001144:	eb00 0184 	add.w	r1, r0, r4, lsl #2
1a001148:	78cb      	ldrb	r3, [r1, #3]
1a00114a:	788a      	ldrb	r2, [r1, #2]
1a00114c:	7849      	ldrb	r1, [r1, #1]
1a00114e:	f810 0024 	ldrb.w	r0, [r0, r4, lsl #2]
1a001152:	f7ff fde9 	bl	1a000d28 <Chip_Clock_SetBaseClock>
		for (i = 0; i < (sizeof(InitClkStates) / sizeof(InitClkStates[0])); i++) {
1a001156:	3401      	adds	r4, #1
1a001158:	2c11      	cmp	r4, #17
1a00115a:	d9f2      	bls.n	1a001142 <Chip_SetupCoreClock+0x12a>
1a00115c:	e7d0      	b.n	1a001100 <Chip_SetupCoreClock+0xe8>
1a00115e:	2400      	movs	r4, #0
1a001160:	e7fa      	b.n	1a001158 <Chip_SetupCoreClock+0x140>
1a001162:	bf00      	nop
1a001164:	40050000 	.word	0x40050000
1a001168:	068e7780 	.word	0x068e7780
1a00116c:	1a001e48 	.word	0x1a001e48

1a001170 <Chip_UART_GetIndex>:

/* Returns clock index for the peripheral block */
static int Chip_UART_GetIndex(LPC_USART_T *pUART)
{
	uint32_t base = (uint32_t) pUART;
	switch(base) {
1a001170:	4b09      	ldr	r3, [pc, #36]	; (1a001198 <Chip_UART_GetIndex+0x28>)
1a001172:	4298      	cmp	r0, r3
1a001174:	d00b      	beq.n	1a00118e <Chip_UART_GetIndex+0x1e>
1a001176:	f503 5380 	add.w	r3, r3, #4096	; 0x1000
1a00117a:	4298      	cmp	r0, r3
1a00117c:	d009      	beq.n	1a001192 <Chip_UART_GetIndex+0x22>
1a00117e:	f5a3 2380 	sub.w	r3, r3, #262144	; 0x40000
1a001182:	4298      	cmp	r0, r3
1a001184:	d001      	beq.n	1a00118a <Chip_UART_GetIndex+0x1a>
1a001186:	2000      	movs	r0, #0
		case LPC_USART3_BASE:
			return 3;
		default:
			return 0; /* Should never come here */
	}
}
1a001188:	4770      	bx	lr
			return 1;
1a00118a:	2001      	movs	r0, #1
1a00118c:	4770      	bx	lr
			return 2;
1a00118e:	2002      	movs	r0, #2
1a001190:	4770      	bx	lr
			return 3;
1a001192:	2003      	movs	r0, #3
1a001194:	4770      	bx	lr
1a001196:	bf00      	nop
1a001198:	400c1000 	.word	0x400c1000

1a00119c <Chip_UART_Init>:
 * Public functions
 ****************************************************************************/

/* Initializes the pUART peripheral */
void Chip_UART_Init(LPC_USART_T *pUART)
{
1a00119c:	b530      	push	{r4, r5, lr}
1a00119e:	b083      	sub	sp, #12
1a0011a0:	4604      	mov	r4, r0
    volatile uint32_t tmp;

	/* Enable UART clocking. UART base clock(s) must already be enabled */
	Chip_Clock_EnableOpts(UART_PClock[Chip_UART_GetIndex(pUART)], true, true, 1);
1a0011a2:	f7ff ffe5 	bl	1a001170 <Chip_UART_GetIndex>
1a0011a6:	2301      	movs	r3, #1
1a0011a8:	461a      	mov	r2, r3
1a0011aa:	4619      	mov	r1, r3
1a0011ac:	4d0e      	ldr	r5, [pc, #56]	; (1a0011e8 <Chip_UART_Init+0x4c>)
1a0011ae:	f835 0010 	ldrh.w	r0, [r5, r0, lsl #1]
1a0011b2:	f7ff fe01 	bl	1a000db8 <Chip_Clock_EnableOpts>
	pUART->FCR = fcr;
1a0011b6:	2307      	movs	r3, #7
1a0011b8:	60a3      	str	r3, [r4, #8]
    pUART->TER2 = 0;
1a0011ba:	2300      	movs	r3, #0
1a0011bc:	65e3      	str	r3, [r4, #92]	; 0x5c

    /* Disable Tx */
    Chip_UART_TXDisable(pUART);

    /* Disable interrupts */
	pUART->IER = 0;
1a0011be:	6063      	str	r3, [r4, #4]
	/* Set LCR to default state */
	pUART->LCR = 0;
1a0011c0:	60e3      	str	r3, [r4, #12]
	/* Set ACR to default state */
	pUART->ACR = 0;
1a0011c2:	6223      	str	r3, [r4, #32]
    /* Set RS485 control to default state */
	pUART->RS485CTRL = 0;
1a0011c4:	64e3      	str	r3, [r4, #76]	; 0x4c
	/* Set RS485 delay timer to default state */
	pUART->RS485DLY = 0;
1a0011c6:	6563      	str	r3, [r4, #84]	; 0x54
	/* Set RS485 addr match to default state */
	pUART->RS485ADRMATCH = 0;
1a0011c8:	6523      	str	r3, [r4, #80]	; 0x50

    /* Clear MCR */
    if (pUART == LPC_UART1) {
1a0011ca:	4b08      	ldr	r3, [pc, #32]	; (1a0011ec <Chip_UART_Init+0x50>)
1a0011cc:	429c      	cmp	r4, r3
1a0011ce:	d006      	beq.n	1a0011de <Chip_UART_Init+0x42>
	pUART->LCR = config;
1a0011d0:	2303      	movs	r3, #3
1a0011d2:	60e3      	str	r3, [r4, #12]

	/* Default 8N1, with DLAB disabled */
	Chip_UART_ConfigData(pUART, (UART_LCR_WLEN8 | UART_LCR_SBS_1BIT | UART_LCR_PARITY_DIS));

	/* Disable fractional divider */
	pUART->FDR = 0x10;
1a0011d4:	2310      	movs	r3, #16
1a0011d6:	62a3      	str	r3, [r4, #40]	; 0x28

    (void) tmp;
1a0011d8:	9b01      	ldr	r3, [sp, #4]
}
1a0011da:	b003      	add	sp, #12
1a0011dc:	bd30      	pop	{r4, r5, pc}
		pUART->MCR = 0;
1a0011de:	2300      	movs	r3, #0
1a0011e0:	6123      	str	r3, [r4, #16]
		tmp = pUART->MSR;
1a0011e2:	69a3      	ldr	r3, [r4, #24]
1a0011e4:	9301      	str	r3, [sp, #4]
1a0011e6:	e7f3      	b.n	1a0011d0 <Chip_UART_Init+0x34>
1a0011e8:	1a001e98 	.word	0x1a001e98
1a0011ec:	40082000 	.word	0x40082000

1a0011f0 <Chip_UART_SetBaud>:
	return readBytes;
}

/* Determines and sets best dividers to get a target bit rate */
uint32_t Chip_UART_SetBaud(LPC_USART_T *pUART, uint32_t baudrate)
{
1a0011f0:	b538      	push	{r3, r4, r5, lr}
1a0011f2:	4605      	mov	r5, r0
1a0011f4:	460c      	mov	r4, r1
	uint32_t div, divh, divl, clkin;

	/* Determine UART clock in rate without FDR */
	clkin = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a0011f6:	f7ff ffbb 	bl	1a001170 <Chip_UART_GetIndex>
1a0011fa:	4b0c      	ldr	r3, [pc, #48]	; (1a00122c <Chip_UART_SetBaud+0x3c>)
1a0011fc:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001200:	f7ff fe2c 	bl	1a000e5c <Chip_Clock_GetRate>
	div = clkin / (baudrate * 16);
1a001204:	0121      	lsls	r1, r4, #4
1a001206:	fbb0 f1f1 	udiv	r1, r0, r1

	/* High and low halves of the divider */
	divh = div / 256;
	divl = div - (divh * 256);
1a00120a:	b2ca      	uxtb	r2, r1
 * @param	pUART	: Pointer to selected UART peripheral
 * @return	Nothing
 */
STATIC INLINE void Chip_UART_EnableDivisorAccess(LPC_USART_T *pUART)
{
	pUART->LCR |= UART_LCR_DLAB_EN;
1a00120c:	68eb      	ldr	r3, [r5, #12]
1a00120e:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a001212:	60eb      	str	r3, [r5, #12]
 *			order to access the USART Divisor Latches. This function
 *			doesn't alter the DLAB state.
 */
STATIC INLINE void Chip_UART_SetDivisorLatches(LPC_USART_T *pUART, uint8_t dll, uint8_t dlm)
{
	pUART->DLL = (uint32_t) dll;
1a001214:	602a      	str	r2, [r5, #0]
	pUART->DLM = (uint32_t) dlm;
1a001216:	f3c1 2307 	ubfx	r3, r1, #8, #8
1a00121a:	606b      	str	r3, [r5, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a00121c:	68eb      	ldr	r3, [r5, #12]
1a00121e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a001222:	60eb      	str	r3, [r5, #12]
	Chip_UART_SetDivisorLatches(pUART, divl, divh);
	Chip_UART_DisableDivisorAccess(pUART);

	/* Fractional FDR alreadt setup for 1 in UART init */

	return (clkin / div) >> 4;
1a001224:	fbb0 f0f1 	udiv	r0, r0, r1
}
1a001228:	0900      	lsrs	r0, r0, #4
1a00122a:	bd38      	pop	{r3, r4, r5, pc}
1a00122c:	1a001e90 	.word	0x1a001e90

1a001230 <Chip_UART_SetBaudFDR>:
    Chip_UART_ABIntHandler(pUART);
}

/* Determines and sets best dividers to get a target baud rate */
uint32_t Chip_UART_SetBaudFDR(LPC_USART_T *pUART, uint32_t baud)
{
1a001230:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
1a001234:	b083      	sub	sp, #12
1a001236:	9001      	str	r0, [sp, #4]
1a001238:	4688      	mov	r8, r1
	uint32_t sdiv = 0, sm = 1, sd = 0;
	uint32_t pclk, m, d;
	uint32_t odiff = -1UL; /* old best diff */

	/* Get base clock for the corresponding UART */
	pclk = Chip_Clock_GetRate(UART_BClock[Chip_UART_GetIndex(pUART)]);
1a00123a:	f7ff ff99 	bl	1a001170 <Chip_UART_GetIndex>
1a00123e:	4b32      	ldr	r3, [pc, #200]	; (1a001308 <Chip_UART_SetBaudFDR+0xd8>)
1a001240:	f833 0010 	ldrh.w	r0, [r3, r0, lsl #1]
1a001244:	f7ff fe0a 	bl	1a000e5c <Chip_Clock_GetRate>
1a001248:	4606      	mov	r6, r0
	uint32_t odiff = -1UL; /* old best diff */
1a00124a:	f04f 37ff 	mov.w	r7, #4294967295	; 0xffffffff

	/* Loop through all possible fractional divider values */
	for (m = 1; odiff && m < 16; m++) {
1a00124e:	2401      	movs	r4, #1
	uint32_t sdiv = 0, sm = 1, sd = 0;
1a001250:	f04f 0b00 	mov.w	fp, #0
1a001254:	46a2      	mov	sl, r4
1a001256:	46d9      	mov	r9, fp
	for (m = 1; odiff && m < 16; m++) {
1a001258:	e02a      	b.n	1a0012b0 <Chip_UART_SetBaudFDR+0x80>
			/* Upper 32-bit of dval has div */
			div = (uint32_t) (dval >> 32);

			/* Closer to next div */
			if ((int)diff < 0) {
				diff = -diff;
1a00125a:	4242      	negs	r2, r0
				div ++;
1a00125c:	1c4b      	adds	r3, r1, #1
1a00125e:	e017      	b.n	1a001290 <Chip_UART_SetBaudFDR+0x60>
			sd = d;
			sm = m;
			odiff = diff;

			/* On perfect match, break loop */
			if(!diff) {
1a001260:	b30a      	cbz	r2, 1a0012a6 <Chip_UART_SetBaudFDR+0x76>
			odiff = diff;
1a001262:	4617      	mov	r7, r2
			sd = d;
1a001264:	46ab      	mov	fp, r5
			sm = m;
1a001266:	46a2      	mov	sl, r4
			sdiv = div;
1a001268:	4699      	mov	r9, r3
		for (d = 0; d < m; d++) {
1a00126a:	3501      	adds	r5, #1
1a00126c:	42ac      	cmp	r4, r5
1a00126e:	d91e      	bls.n	1a0012ae <Chip_UART_SetBaudFDR+0x7e>
			uint64_t dval = (((uint64_t) pclk << 28) * m) / (baud * (m + d));
1a001270:	0931      	lsrs	r1, r6, #4
1a001272:	0730      	lsls	r0, r6, #28
1a001274:	fba4 0c00 	umull	r0, ip, r4, r0
1a001278:	1962      	adds	r2, r4, r5
1a00127a:	fb08 f202 	mul.w	r2, r8, r2
1a00127e:	2300      	movs	r3, #0
1a001280:	fb04 c101 	mla	r1, r4, r1, ip
1a001284:	f000 fba0 	bl	1a0019c8 <__aeabi_uldivmod>
			diff = (uint32_t) dval;
1a001288:	4602      	mov	r2, r0
			div = (uint32_t) (dval >> 32);
1a00128a:	460b      	mov	r3, r1
			if ((int)diff < 0) {
1a00128c:	2800      	cmp	r0, #0
1a00128e:	dbe4      	blt.n	1a00125a <Chip_UART_SetBaudFDR+0x2a>
			if (odiff < diff || !div || (div >> 16) || (div < 3 && d)) {
1a001290:	4297      	cmp	r7, r2
1a001292:	d3ea      	bcc.n	1a00126a <Chip_UART_SetBaudFDR+0x3a>
1a001294:	2b00      	cmp	r3, #0
1a001296:	d0e8      	beq.n	1a00126a <Chip_UART_SetBaudFDR+0x3a>
1a001298:	0c19      	lsrs	r1, r3, #16
1a00129a:	d1e6      	bne.n	1a00126a <Chip_UART_SetBaudFDR+0x3a>
1a00129c:	2b02      	cmp	r3, #2
1a00129e:	d8df      	bhi.n	1a001260 <Chip_UART_SetBaudFDR+0x30>
1a0012a0:	2d00      	cmp	r5, #0
1a0012a2:	d0dd      	beq.n	1a001260 <Chip_UART_SetBaudFDR+0x30>
1a0012a4:	e7e1      	b.n	1a00126a <Chip_UART_SetBaudFDR+0x3a>
			odiff = diff;
1a0012a6:	4617      	mov	r7, r2
			sd = d;
1a0012a8:	46ab      	mov	fp, r5
			sm = m;
1a0012aa:	46a2      	mov	sl, r4
			sdiv = div;
1a0012ac:	4699      	mov	r9, r3
	for (m = 1; odiff && m < 16; m++) {
1a0012ae:	3401      	adds	r4, #1
1a0012b0:	b11f      	cbz	r7, 1a0012ba <Chip_UART_SetBaudFDR+0x8a>
1a0012b2:	2c0f      	cmp	r4, #15
1a0012b4:	d801      	bhi.n	1a0012ba <Chip_UART_SetBaudFDR+0x8a>
		for (d = 0; d < m; d++) {
1a0012b6:	2500      	movs	r5, #0
1a0012b8:	e7d8      	b.n	1a00126c <Chip_UART_SetBaudFDR+0x3c>
			}
		}
	}

	/* Return 0 if a vaild divisor is not possible */
	if (!sdiv) {
1a0012ba:	f1b9 0f00 	cmp.w	r9, #0
1a0012be:	d01e      	beq.n	1a0012fe <Chip_UART_SetBaudFDR+0xce>
	pUART->LCR |= UART_LCR_DLAB_EN;
1a0012c0:	9901      	ldr	r1, [sp, #4]
1a0012c2:	68cb      	ldr	r3, [r1, #12]
1a0012c4:	f043 0380 	orr.w	r3, r3, #128	; 0x80
1a0012c8:	60cb      	str	r3, [r1, #12]
	pUART->DLL = (uint32_t) dll;
1a0012ca:	fa5f f389 	uxtb.w	r3, r9
1a0012ce:	600b      	str	r3, [r1, #0]
	pUART->DLM = (uint32_t) dlm;
1a0012d0:	f3c9 2307 	ubfx	r3, r9, #8, #8
1a0012d4:	604b      	str	r3, [r1, #4]
	pUART->LCR &= ~UART_LCR_DLAB_EN;
1a0012d6:	68cb      	ldr	r3, [r1, #12]
1a0012d8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
1a0012dc:	60cb      	str	r3, [r1, #12]
	Chip_UART_EnableDivisorAccess(pUART);
	Chip_UART_SetDivisorLatches(pUART, UART_LOAD_DLL(sdiv), UART_LOAD_DLM(sdiv));
	Chip_UART_DisableDivisorAccess(pUART);

	/* Set best fractional divider */
	pUART->FDR = (UART_FDR_MULVAL(sm) | UART_FDR_DIVADDVAL(sd));
1a0012de:	ea4f 130a 	mov.w	r3, sl, lsl #4
1a0012e2:	b2db      	uxtb	r3, r3
1a0012e4:	f00b 020f 	and.w	r2, fp, #15
1a0012e8:	4313      	orrs	r3, r2
1a0012ea:	628b      	str	r3, [r1, #40]	; 0x28

	/* Return actual baud rate */
	return (pclk >> 4) * sm / (sdiv * (sm + sd));
1a0012ec:	0933      	lsrs	r3, r6, #4
1a0012ee:	fb0a f303 	mul.w	r3, sl, r3
1a0012f2:	eb0a 020b 	add.w	r2, sl, fp
1a0012f6:	fb09 f202 	mul.w	r2, r9, r2
1a0012fa:	fbb3 f9f2 	udiv	r9, r3, r2
}
1a0012fe:	4648      	mov	r0, r9
1a001300:	b003      	add	sp, #12
1a001302:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
1a001306:	bf00      	nop
1a001308:	1a001e90 	.word	0x1a001e90

1a00130c <SystemInit>:
 */

#include <board.h>

void SystemInit(void)
{
1a00130c:	b508      	push	{r3, lr}
   // to use CMSIS.
   volatile unsigned int *pCREG_M0APPMAP = (volatile unsigned int *) 0x40043404;
   // CMSIS : CREG->M0APPMAP = <address of vector table>
   *pCREG_M0APPMAP = (unsigned int)g_pfnVectors;
#else
   SCB->VTOR = (unsigned int) &g_pfnVectors;
1a00130e:	4a0b      	ldr	r2, [pc, #44]	; (1a00133c <SystemInit+0x30>)
1a001310:	4b0b      	ldr	r3, [pc, #44]	; (1a001340 <SystemInit+0x34>)
1a001312:	609a      	str	r2, [r3, #8]
 */
__STATIC_INLINE uint32_t SCB_GetFPUType(void)
{
  uint32_t mvfr0;

  mvfr0 = FPU->MVFR0;
1a001314:	f503 7300 	add.w	r3, r3, #512	; 0x200
1a001318:	6c1b      	ldr	r3, [r3, #64]	; 0x40
  if      ((mvfr0 & (FPU_MVFR0_Single_precision_Msk | FPU_MVFR0_Double_precision_Msk)) == 0x020U)
1a00131a:	f403 637f 	and.w	r3, r3, #4080	; 0xff0
1a00131e:	2b20      	cmp	r3, #32
1a001320:	d004      	beq.n	1a00132c <SystemInit+0x20>

   if (SCB_GetFPUType() > 0)
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */

   /* Board specific SystemInit only in M4 */
   Board_SystemInit();
1a001322:	f7ff f9e9 	bl	1a0006f8 <Board_SystemInit>
   Board_Init();
1a001326:	f7ff f97f 	bl	1a000628 <Board_Init>
#endif
}
1a00132a:	bd08      	pop	{r3, pc}
      SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
1a00132c:	4a04      	ldr	r2, [pc, #16]	; (1a001340 <SystemInit+0x34>)
1a00132e:	f8d2 3088 	ldr.w	r3, [r2, #136]	; 0x88
1a001332:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
1a001336:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88
1a00133a:	e7f2      	b.n	1a001322 <SystemInit+0x16>
1a00133c:	1a000000 	.word	0x1a000000
1a001340:	e000ed00 	.word	0xe000ed00

1a001344 <cyclesCounterInit>:
 * @return TRUE si esta OK, FALSE en caso de error.
 */
bool_t cyclesCounterInit( uint32_t clockSpeed )
{
   //Asigna  a la variable local ClockSpeed el valor recibido como argumento.
   ClockSpeed = clockSpeed;
1a001344:	4b04      	ldr	r3, [pc, #16]	; (1a001358 <cyclesCounterInit+0x14>)
1a001346:	6018      	str	r0, [r3, #0]
   //Iniciar el contador de ciclos de clock.
   DWT_CTRL  |= 1; // *DWT_CTRL  |= 1;
1a001348:	4a04      	ldr	r2, [pc, #16]	; (1a00135c <cyclesCounterInit+0x18>)
1a00134a:	6813      	ldr	r3, [r2, #0]
1a00134c:	f043 0301 	orr.w	r3, r3, #1
1a001350:	6013      	str	r3, [r2, #0]
   return TRUE;
}
1a001352:	2001      	movs	r0, #1
1a001354:	4770      	bx	lr
1a001356:	bf00      	nop
1a001358:	10000038 	.word	0x10000038
1a00135c:	e0001000 	.word	0xe0001000

1a001360 <adcInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  ADC_ENABLE, ADC_DISABLE
 * @return: none
*/
void adcInit( adcInit_t config )
{
1a001360:	b530      	push	{r4, r5, lr}
1a001362:	b083      	sub	sp, #12
   T_FIL3  ---- 7   ADC0_0 (ANALOG_SEL)
   T_COL1  ---- 132 ADC0_4 (ANALOG_SEL)
   ENET_MDC --- 140 ADC1_6 (ANALOG_SEL)
   */
   
   switch(config) {
1a001364:	b118      	cbz	r0, 1a00136e <adcInit+0xe>
1a001366:	2801      	cmp	r0, #1
1a001368:	d04a      	beq.n	1a001400 <adcInit+0xa0>
         /* Disable ADC peripheral */
         Chip_ADC_DeInit( LPC_ADC0 );
         break;
      }

}
1a00136a:	b003      	add	sp, #12
1a00136c:	bd30      	pop	{r4, r5, pc}
         ADC_CLOCK_SETUP_T ADCSetup = {
1a00136e:	4b26      	ldr	r3, [pc, #152]	; (1a001408 <adcInit+0xa8>)
1a001370:	466d      	mov	r5, sp
1a001372:	e893 0003 	ldmia.w	r3, {r0, r1}
1a001376:	e885 0003 	stmia.w	r5, {r0, r1}
         Chip_ADC_Init( LPC_ADC0, &ADCSetup );
1a00137a:	4c24      	ldr	r4, [pc, #144]	; (1a00140c <adcInit+0xac>)
1a00137c:	4629      	mov	r1, r5
1a00137e:	4620      	mov	r0, r4
1a001380:	f7ff f9f6 	bl	1a000770 <Chip_ADC_Init>
         Chip_ADC_SetBurstCmd( LPC_ADC0, DISABLE );
1a001384:	2100      	movs	r1, #0
1a001386:	4620      	mov	r0, r4
1a001388:	f7ff fa89 	bl	1a00089e <Chip_ADC_SetBurstCmd>
         Chip_ADC_SetSampleRate( LPC_ADC0, &ADCSetup, ADC_MAX_SAMPLE_RATE/2 );
1a00138c:	4a20      	ldr	r2, [pc, #128]	; (1a001410 <adcInit+0xb0>)
1a00138e:	4629      	mov	r1, r5
1a001390:	4620      	mov	r0, r4
1a001392:	f7ff fa53 	bl	1a00083c <Chip_ADC_SetSampleRate>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH1, DISABLE );
1a001396:	2200      	movs	r2, #0
1a001398:	2101      	movs	r1, #1
1a00139a:	4620      	mov	r0, r4
1a00139c:	f7ff fa6d 	bl	1a00087a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH1, DISABLE );
1a0013a0:	2200      	movs	r2, #0
1a0013a2:	2101      	movs	r1, #1
1a0013a4:	4620      	mov	r0, r4
1a0013a6:	f7ff fa2b 	bl	1a000800 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH2, DISABLE );
1a0013aa:	2200      	movs	r2, #0
1a0013ac:	2102      	movs	r1, #2
1a0013ae:	4620      	mov	r0, r4
1a0013b0:	f7ff fa63 	bl	1a00087a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH2, DISABLE );
1a0013b4:	2200      	movs	r2, #0
1a0013b6:	2102      	movs	r1, #2
1a0013b8:	4620      	mov	r0, r4
1a0013ba:	f7ff fa21 	bl	1a000800 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH3, DISABLE );
1a0013be:	2200      	movs	r2, #0
1a0013c0:	2103      	movs	r1, #3
1a0013c2:	4620      	mov	r0, r4
1a0013c4:	f7ff fa59 	bl	1a00087a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH3, DISABLE );
1a0013c8:	2200      	movs	r2, #0
1a0013ca:	2103      	movs	r1, #3
1a0013cc:	4620      	mov	r0, r4
1a0013ce:	f7ff fa17 	bl	1a000800 <Chip_ADC_Int_SetChannelCmd>
         Chip_ADC_EnableChannel( LPC_ADC0, ADC_CH4, DISABLE );
1a0013d2:	2200      	movs	r2, #0
1a0013d4:	2104      	movs	r1, #4
1a0013d6:	4620      	mov	r0, r4
1a0013d8:	f7ff fa4f 	bl	1a00087a <Chip_ADC_EnableChannel>
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH4, DISABLE );
1a0013dc:	2200      	movs	r2, #0
1a0013de:	2104      	movs	r1, #4
1a0013e0:	4620      	mov	r0, r4
1a0013e2:	f7ff fa0d 	bl	1a000800 <Chip_ADC_Int_SetChannelCmd>
	LPC_SCU->ENAIO[ADC_ID] |= 1UL << channel;
1a0013e6:	4a0b      	ldr	r2, [pc, #44]	; (1a001414 <adcInit+0xb4>)
1a0013e8:	f8d2 3c88 	ldr.w	r3, [r2, #3208]	; 0xc88
1a0013ec:	f043 0310 	orr.w	r3, r3, #16
1a0013f0:	f8c2 3c88 	str.w	r3, [r2, #3208]	; 0xc88
         Chip_ADC_Int_SetChannelCmd( LPC_ADC0, ADC_CH5, DISABLE ); // Revisar codigo
1a0013f4:	2200      	movs	r2, #0
1a0013f6:	2105      	movs	r1, #5
1a0013f8:	4620      	mov	r0, r4
1a0013fa:	f7ff fa01 	bl	1a000800 <Chip_ADC_Int_SetChannelCmd>
      break;
1a0013fe:	e7b4      	b.n	1a00136a <adcInit+0xa>
         Chip_ADC_DeInit( LPC_ADC0 );
1a001400:	4802      	ldr	r0, [pc, #8]	; (1a00140c <adcInit+0xac>)
1a001402:	f7ff f9d5 	bl	1a0007b0 <Chip_ADC_DeInit>
}
1a001406:	e7b0      	b.n	1a00136a <adcInit+0xa>
1a001408:	1a001ea0 	.word	0x1a001ea0
1a00140c:	400e3000 	.word	0x400e3000
1a001410:	00030d40 	.word	0x00030d40
1a001414:	40086000 	.word	0x40086000

1a001418 <adcRead>:
 * @brief   Get the value of one ADC channel. Mode: BLOCKING
 * @param   AI0 ... AIn
 * @return  analog value
 */
uint16_t adcRead( adcMap_t analogInput )
{
1a001418:	b570      	push	{r4, r5, r6, lr}
1a00141a:	b082      	sub	sp, #8
   uint8_t lpcAdcChannel = analogInput + 1;
1a00141c:	1c44      	adds	r4, r0, #1
1a00141e:	b2e4      	uxtb	r4, r4
   uint16_t analogValue = 0;
1a001420:	2600      	movs	r6, #0
1a001422:	f8ad 6006 	strh.w	r6, [sp, #6]

   // Enable channel
   Chip_ADC_EnableChannel(LPC_ADC0, lpcAdcChannel, ENABLE);
1a001426:	4d11      	ldr	r5, [pc, #68]	; (1a00146c <adcRead+0x54>)
1a001428:	2201      	movs	r2, #1
1a00142a:	4621      	mov	r1, r4
1a00142c:	4628      	mov	r0, r5
1a00142e:	f7ff fa24 	bl	1a00087a <Chip_ADC_EnableChannel>

   // Start conversion
   Chip_ADC_SetStartMode(LPC_ADC0, ADC_START_NOW, ADC_TRIGGERMODE_RISING);
1a001432:	4632      	mov	r2, r6
1a001434:	2101      	movs	r1, #1
1a001436:	4628      	mov	r0, r5
1a001438:	f7ff f9f0 	bl	1a00081c <Chip_ADC_SetStartMode>

   // Wait for conversion complete
   while(
      (Chip_ADC_ReadStatus(LPC_ADC0, lpcAdcChannel, ADC_DR_DONE_STAT) != SET)
1a00143c:	2200      	movs	r2, #0
1a00143e:	4621      	mov	r1, r4
1a001440:	480a      	ldr	r0, [pc, #40]	; (1a00146c <adcRead+0x54>)
1a001442:	f7ff f9c4 	bl	1a0007ce <Chip_ADC_ReadStatus>
1a001446:	2801      	cmp	r0, #1
1a001448:	d1f8      	bne.n	1a00143c <adcRead+0x24>
   );

   // Enable Read value
   Chip_ADC_ReadValue( LPC_ADC0, lpcAdcChannel, &analogValue );
1a00144a:	4d08      	ldr	r5, [pc, #32]	; (1a00146c <adcRead+0x54>)
1a00144c:	f10d 0206 	add.w	r2, sp, #6
1a001450:	4621      	mov	r1, r4
1a001452:	4628      	mov	r0, r5
1a001454:	f7ff f9b7 	bl	1a0007c6 <Chip_ADC_ReadValue>

   // Disable channel
   Chip_ADC_EnableChannel( LPC_ADC0, lpcAdcChannel, DISABLE );
1a001458:	2200      	movs	r2, #0
1a00145a:	4621      	mov	r1, r4
1a00145c:	4628      	mov	r0, r5
1a00145e:	f7ff fa0c 	bl	1a00087a <Chip_ADC_EnableChannel>

   return analogValue;
}
1a001462:	f8bd 0006 	ldrh.w	r0, [sp, #6]
1a001466:	b002      	add	sp, #8
1a001468:	bd70      	pop	{r4, r5, r6, pc}
1a00146a:	bf00      	nop
1a00146c:	400e3000 	.word	0x400e3000

1a001470 <dacInit>:
 * @brief:  enable/disable the ADC and DAC peripheral
 * @param:  DAC_ENABLE, DAC_DISABLE
 * @return: none
*/
void dacInit( dacInit_t config )
{
1a001470:	b510      	push	{r4, lr}

   switch(config) {
1a001472:	b110      	cbz	r0, 1a00147a <dacInit+0xa>
1a001474:	2801      	cmp	r0, #1
1a001476:	d016      	beq.n	1a0014a6 <dacInit+0x36>
      /* Disable DAC peripheral */
      Chip_DAC_DeInit( LPC_DAC );
      break;
   }

}
1a001478:	bd10      	pop	{r4, pc}
      Chip_Clock_EnableOpts(CLK_APB3_DAC, true, true, 1);
1a00147a:	2301      	movs	r3, #1
1a00147c:	461a      	mov	r2, r3
1a00147e:	4619      	mov	r1, r3
1a001480:	2002      	movs	r0, #2
1a001482:	f7ff fc99 	bl	1a000db8 <Chip_Clock_EnableOpts>
      Chip_DAC_SetBias(LPC_DAC, DAC_MAX_UPDATE_RATE_400kHz);
1a001486:	4c0a      	ldr	r4, [pc, #40]	; (1a0014b0 <dacInit+0x40>)
1a001488:	2101      	movs	r1, #1
1a00148a:	4620      	mov	r0, r4
1a00148c:	f7ff fd19 	bl	1a000ec2 <Chip_DAC_SetBias>
 */
STATIC INLINE void Chip_DAC_ConfigDAConverterControl(LPC_DAC_T *pDAC, uint32_t dacFlags)
{
	uint32_t temp;

	temp = pDAC->CTRL & ~DAC_DACCTRL_MASK;
1a001490:	6863      	ldr	r3, [r4, #4]
1a001492:	f023 030f 	bic.w	r3, r3, #15
	pDAC->CTRL = temp | dacFlags;
1a001496:	f043 0308 	orr.w	r3, r3, #8
1a00149a:	6063      	str	r3, [r4, #4]
      Chip_DAC_UpdateValue(LPC_DAC, 0);
1a00149c:	2100      	movs	r1, #0
1a00149e:	4620      	mov	r0, r4
1a0014a0:	f7ff fd07 	bl	1a000eb2 <Chip_DAC_UpdateValue>
      break;
1a0014a4:	e7e8      	b.n	1a001478 <dacInit+0x8>
      Chip_DAC_DeInit( LPC_DAC );
1a0014a6:	4802      	ldr	r0, [pc, #8]	; (1a0014b0 <dacInit+0x40>)
1a0014a8:	f7ff fcfe 	bl	1a000ea8 <Chip_DAC_DeInit>
}
1a0014ac:	e7e4      	b.n	1a001478 <dacInit+0x8>
1a0014ae:	bf00      	nop
1a0014b0:	400e1000 	.word	0x400e1000

1a0014b4 <dacWrite>:
 * @param   value: analog value to be writen in the DAC, from 0 to 1023
 * @return  none
 */
void dacWrite( dacMap_t analogOutput, uint16_t value )
{
   if( analogOutput == 0 ) {
1a0014b4:	b948      	cbnz	r0, 1a0014ca <dacWrite+0x16>
{
1a0014b6:	b508      	push	{r3, lr}
      if( value > 1023 ) {
1a0014b8:	f5b1 6f80 	cmp.w	r1, #1024	; 0x400
1a0014bc:	d301      	bcc.n	1a0014c2 <dacWrite+0xe>
         value = 1023;
1a0014be:	f240 31ff 	movw	r1, #1023	; 0x3ff
      }
      Chip_DAC_UpdateValue( LPC_DAC, value );
1a0014c2:	4802      	ldr	r0, [pc, #8]	; (1a0014cc <dacWrite+0x18>)
1a0014c4:	f7ff fcf5 	bl	1a000eb2 <Chip_DAC_UpdateValue>
   }
}
1a0014c8:	bd08      	pop	{r3, pc}
1a0014ca:	4770      	bx	lr
1a0014cc:	400e1000 	.word	0x400e1000

1a0014d0 <gpioObtainPinInit>:

static void gpioObtainPinInit( gpioMap_t pin,
                               int8_t *pinNamePort, int8_t *pinNamePin,
                               int8_t *func, int8_t *gpioPort,
                               int8_t *gpioPin )
{
1a0014d0:	b410      	push	{r4}

   *pinNamePort = gpioPinsInit[pin].pinName.port;
1a0014d2:	4c0c      	ldr	r4, [pc, #48]	; (1a001504 <gpioObtainPinInit+0x34>)
1a0014d4:	eb00 0080 	add.w	r0, r0, r0, lsl #2
1a0014d8:	eb04 0c00 	add.w	ip, r4, r0
1a0014dc:	5620      	ldrsb	r0, [r4, r0]
1a0014de:	7008      	strb	r0, [r1, #0]
   *pinNamePin  = gpioPinsInit[pin].pinName.pin;
1a0014e0:	f99c 1001 	ldrsb.w	r1, [ip, #1]
1a0014e4:	7011      	strb	r1, [r2, #0]
   *func        = gpioPinsInit[pin].func;
1a0014e6:	f99c 2002 	ldrsb.w	r2, [ip, #2]
1a0014ea:	701a      	strb	r2, [r3, #0]
   *gpioPort    = gpioPinsInit[pin].gpio.port;
1a0014ec:	f99c 2003 	ldrsb.w	r2, [ip, #3]
1a0014f0:	9b01      	ldr	r3, [sp, #4]
1a0014f2:	701a      	strb	r2, [r3, #0]
   *gpioPin     = gpioPinsInit[pin].gpio.pin;
1a0014f4:	f99c 2004 	ldrsb.w	r2, [ip, #4]
1a0014f8:	9b02      	ldr	r3, [sp, #8]
1a0014fa:	701a      	strb	r2, [r3, #0]
}
1a0014fc:	f85d 4b04 	ldr.w	r4, [sp], #4
1a001500:	4770      	bx	lr
1a001502:	bf00      	nop
1a001504:	1a001ea8 	.word	0x1a001ea8

1a001508 <gpioInit>:

/*==================[external functions definition]==========================*/

bool_t gpioInit( gpioMap_t pin, gpioInit_t config )
{
   if( pin == VCC ){
1a001508:	f110 0f02 	cmn.w	r0, #2
1a00150c:	f000 80c6 	beq.w	1a00169c <gpioInit+0x194>
{
1a001510:	b530      	push	{r4, r5, lr}
1a001512:	b085      	sub	sp, #20
1a001514:	460c      	mov	r4, r1
	  return FALSE;
   }
   if( pin == GND ){
1a001516:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a00151a:	f000 80c1 	beq.w	1a0016a0 <gpioInit+0x198>
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a00151e:	2300      	movs	r3, #0
1a001520:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a001524:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a001528:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a00152c:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a001530:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a001534:	f10d 030b 	add.w	r3, sp, #11
1a001538:	9301      	str	r3, [sp, #4]
1a00153a:	ab03      	add	r3, sp, #12
1a00153c:	9300      	str	r3, [sp, #0]
1a00153e:	f10d 030d 	add.w	r3, sp, #13
1a001542:	f10d 020e 	add.w	r2, sp, #14
1a001546:	f10d 010f 	add.w	r1, sp, #15
1a00154a:	f7ff ffc1 	bl	1a0014d0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   switch(config) {
1a00154e:	2c05      	cmp	r4, #5
1a001550:	f200 80a9 	bhi.w	1a0016a6 <gpioInit+0x19e>
1a001554:	e8df f004 	tbb	[pc, r4]
1a001558:	44268008 	.word	0x44268008
1a00155c:	0362      	.short	0x0362

   case GPIO_ENABLE:
      /* Initializes GPIO */
      Chip_GPIO_Init(LPC_GPIO_PORT);
1a00155e:	4853      	ldr	r0, [pc, #332]	; (1a0016ac <gpioInit+0x1a4>)
1a001560:	f7ff fcbb 	bl	1a000eda <Chip_GPIO_Init>
   bool_t ret_val     = 1;
1a001564:	2001      	movs	r0, #1
      break;
1a001566:	e09c      	b.n	1a0016a2 <gpioInit+0x19a>

   case GPIO_INPUT:
      Chip_SCU_PinMux(
1a001568:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00156c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001570:	f89d 200d 	ldrb.w	r2, [sp, #13]
	LPC_SCU->SFSP[port][pin] = modefunc;
1a001574:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001578:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00157c:	494c      	ldr	r1, [pc, #304]	; (1a0016b0 <gpioInit+0x1a8>)
1a00157e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001582:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a001586:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a00158a:	2001      	movs	r0, #1
1a00158c:	fa00 f101 	lsl.w	r1, r0, r1
{
	if (out) {
		pGPIO->DIR[portNum] |= bitValue;
	}
	else {
		pGPIO->DIR[portNum] &= ~bitValue;
1a001590:	4c46      	ldr	r4, [pc, #280]	; (1a0016ac <gpioInit+0x1a4>)
1a001592:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a001596:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00159a:	ea22 0201 	bic.w	r2, r2, r1
1a00159e:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0015a2:	e07e      	b.n	1a0016a2 <gpioInit+0x19a>
      break;

   case GPIO_INPUT_PULLUP:
      Chip_SCU_PinMux(
1a0015a4:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0015a8:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0015ac:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0015b0:	f042 02c0 	orr.w	r2, r2, #192	; 0xc0
1a0015b4:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0015b8:	493d      	ldr	r1, [pc, #244]	; (1a0016b0 <gpioInit+0x1a8>)
1a0015ba:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLUP | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0015be:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0015c2:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a0015c6:	2001      	movs	r0, #1
1a0015c8:	fa00 f101 	lsl.w	r1, r0, r1
1a0015cc:	4c37      	ldr	r4, [pc, #220]	; (1a0016ac <gpioInit+0x1a4>)
1a0015ce:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a0015d2:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a0015d6:	ea22 0201 	bic.w	r2, r2, r1
1a0015da:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a0015de:	e060      	b.n	1a0016a2 <gpioInit+0x19a>
      break;

   case GPIO_INPUT_PULLDOWN:
      Chip_SCU_PinMux(
1a0015e0:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a0015e4:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a0015e8:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a0015ec:	f042 02d8 	orr.w	r2, r2, #216	; 0xd8
1a0015f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a0015f4:	492e      	ldr	r1, [pc, #184]	; (1a0016b0 <gpioInit+0x1a8>)
1a0015f6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_PULLDOWN | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a0015fa:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0015fe:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a001602:	2001      	movs	r0, #1
1a001604:	fa00 f101 	lsl.w	r1, r0, r1
1a001608:	4c28      	ldr	r4, [pc, #160]	; (1a0016ac <gpioInit+0x1a4>)
1a00160a:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00160e:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a001612:	ea22 0201 	bic.w	r2, r2, r1
1a001616:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a00161a:	e042      	b.n	1a0016a2 <gpioInit+0x19a>
      break;
   case GPIO_INPUT_PULLUP_PULLDOWN:
      Chip_SCU_PinMux(
1a00161c:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a001620:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001624:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001628:	f042 02c8 	orr.w	r2, r2, #200	; 0xc8
1a00162c:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a001630:	491f      	ldr	r1, [pc, #124]	; (1a0016b0 <gpioInit+0x1a8>)
1a001632:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_REPEATER | SCU_MODE_INBUFF_EN | SCU_MODE_ZIF_DIS,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_INPUT );
1a001636:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a00163a:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a00163e:	2001      	movs	r0, #1
1a001640:	fa00 f101 	lsl.w	r1, r0, r1
1a001644:	4c19      	ldr	r4, [pc, #100]	; (1a0016ac <gpioInit+0x1a4>)
1a001646:	f503 6300 	add.w	r3, r3, #2048	; 0x800
1a00164a:	f854 2023 	ldr.w	r2, [r4, r3, lsl #2]
1a00164e:	ea22 0201 	bic.w	r2, r2, r1
1a001652:	f844 2023 	str.w	r2, [r4, r3, lsl #2]
1a001656:	e024      	b.n	1a0016a2 <gpioInit+0x19a>
      break;

   case GPIO_OUTPUT:
      Chip_SCU_PinMux(
1a001658:	f89d 100f 	ldrb.w	r1, [sp, #15]
1a00165c:	f89d 300e 	ldrb.w	r3, [sp, #14]
1a001660:	f89d 200d 	ldrb.w	r2, [sp, #13]
1a001664:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a001668:	eb03 1341 	add.w	r3, r3, r1, lsl #5
1a00166c:	4910      	ldr	r1, [pc, #64]	; (1a0016b0 <gpioInit+0x1a8>)
1a00166e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
         pinNamePort,
         pinNamePin,
         SCU_MODE_INACT | SCU_MODE_ZIF_DIS | SCU_MODE_INBUFF_EN,
         func
      );
      Chip_GPIO_SetDir( LPC_GPIO_PORT, gpioPort, ( 1 << gpioPin ), GPIO_OUTPUT );
1a001672:	f89d 000c 	ldrb.w	r0, [sp, #12]
1a001676:	f99d 100b 	ldrsb.w	r1, [sp, #11]
1a00167a:	2201      	movs	r2, #1
1a00167c:	408a      	lsls	r2, r1
		pGPIO->DIR[portNum] |= bitValue;
1a00167e:	4b0b      	ldr	r3, [pc, #44]	; (1a0016ac <gpioInit+0x1a4>)
1a001680:	f500 6c00 	add.w	ip, r0, #2048	; 0x800
1a001684:	f853 502c 	ldr.w	r5, [r3, ip, lsl #2]
1a001688:	432a      	orrs	r2, r5
1a00168a:	f843 202c 	str.w	r2, [r3, ip, lsl #2]
      Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, 0);
1a00168e:	b2c9      	uxtb	r1, r1
	pGPIO->B[port][pin] = setting;
1a001690:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001694:	2200      	movs	r2, #0
1a001696:	545a      	strb	r2, [r3, r1]
   bool_t ret_val     = 1;
1a001698:	4620      	mov	r0, r4
}
1a00169a:	e002      	b.n	1a0016a2 <gpioInit+0x19a>
	  return FALSE;
1a00169c:	2000      	movs	r0, #0
      break;
   }

   return ret_val;

}
1a00169e:	4770      	bx	lr
	  return FALSE;
1a0016a0:	2000      	movs	r0, #0
}
1a0016a2:	b005      	add	sp, #20
1a0016a4:	bd30      	pop	{r4, r5, pc}
   switch(config) {
1a0016a6:	2000      	movs	r0, #0
1a0016a8:	e7fb      	b.n	1a0016a2 <gpioInit+0x19a>
1a0016aa:	bf00      	nop
1a0016ac:	400f4000 	.word	0x400f4000
1a0016b0:	40086000 	.word	0x40086000

1a0016b4 <gpioWrite>:


bool_t gpioWrite( gpioMap_t pin, bool_t value )
{
   if( pin == VCC ){
1a0016b4:	f110 0f02 	cmn.w	r0, #2
1a0016b8:	d02d      	beq.n	1a001716 <gpioWrite+0x62>
{
1a0016ba:	b510      	push	{r4, lr}
1a0016bc:	b084      	sub	sp, #16
1a0016be:	460c      	mov	r4, r1
	  return FALSE;
   }
   if( pin == GND ){
1a0016c0:	f1b0 3fff 	cmp.w	r0, #4294967295	; 0xffffffff
1a0016c4:	d029      	beq.n	1a00171a <gpioWrite+0x66>
	  return FALSE;
   }

   bool_t ret_val     = 1;

   int8_t pinNamePort = 0;
1a0016c6:	2300      	movs	r3, #0
1a0016c8:	f88d 300f 	strb.w	r3, [sp, #15]
   int8_t pinNamePin  = 0;
1a0016cc:	f88d 300e 	strb.w	r3, [sp, #14]

   int8_t func        = 0;
1a0016d0:	f88d 300d 	strb.w	r3, [sp, #13]

   int8_t gpioPort    = 0;
1a0016d4:	f88d 300c 	strb.w	r3, [sp, #12]
   int8_t gpioPin     = 0;
1a0016d8:	f88d 300b 	strb.w	r3, [sp, #11]

   gpioObtainPinInit( pin, &pinNamePort, &pinNamePin, &func,
1a0016dc:	f10d 030b 	add.w	r3, sp, #11
1a0016e0:	9301      	str	r3, [sp, #4]
1a0016e2:	ab03      	add	r3, sp, #12
1a0016e4:	9300      	str	r3, [sp, #0]
1a0016e6:	f10d 030d 	add.w	r3, sp, #13
1a0016ea:	f10d 020e 	add.w	r2, sp, #14
1a0016ee:	f10d 010f 	add.w	r1, sp, #15
1a0016f2:	f7ff feed 	bl	1a0014d0 <gpioObtainPinInit>
                      &gpioPort, &gpioPin );

   Chip_GPIO_SetPinState( LPC_GPIO_PORT, gpioPort, gpioPin, value);
1a0016f6:	f89d 300c 	ldrb.w	r3, [sp, #12]
1a0016fa:	f89d 200b 	ldrb.w	r2, [sp, #11]
1a0016fe:	1e21      	subs	r1, r4, #0
1a001700:	bf18      	it	ne
1a001702:	2101      	movne	r1, #1
	pGPIO->B[port][pin] = setting;
1a001704:	015b      	lsls	r3, r3, #5
1a001706:	f103 2340 	add.w	r3, r3, #1073758208	; 0x40004000
1a00170a:	f503 2370 	add.w	r3, r3, #983040	; 0xf0000
1a00170e:	5499      	strb	r1, [r3, r2]

   return ret_val;
1a001710:	2001      	movs	r0, #1
}
1a001712:	b004      	add	sp, #16
1a001714:	bd10      	pop	{r4, pc}
	  return FALSE;
1a001716:	2000      	movs	r0, #0
}
1a001718:	4770      	bx	lr
	  return FALSE;
1a00171a:	2000      	movs	r0, #0
1a00171c:	e7f9      	b.n	1a001712 <gpioWrite+0x5e>
	...

1a001720 <tickRead>:
   #ifdef USE_FREERTOS
      return xTaskGetTickCount();
   #else
      return tickCounter;
   #endif
}
1a001720:	4b01      	ldr	r3, [pc, #4]	; (1a001728 <tickRead+0x8>)
1a001722:	e9d3 0100 	ldrd	r0, r1, [r3]
1a001726:	4770      	bx	lr
1a001728:	10000068 	.word	0x10000068

1a00172c <tickPowerSet>:
void tickPowerSet( bool_t power )
{
   #ifdef USE_FREERTOS
      uartWriteString( UART_USB, "Use of tickPowerSet() in a program with freeRTOS has no effect\r\n" );
   #else
      if( power ) {
1a00172c:	b120      	cbz	r0, 1a001738 <tickPowerSet+0xc>
         // Enable SysTick IRQ and SysTick Timer
         SysTick->CTRL = SysTick_CTRL_CLKSOURCE_Msk |
1a00172e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
1a001732:	2207      	movs	r2, #7
1a001734:	611a      	str	r2, [r3, #16]
1a001736:	4770      	bx	lr
                         SysTick_CTRL_TICKINT_Msk   |
                         SysTick_CTRL_ENABLE_Msk;
      } else {
         // Disable SysTick IRQ and SysTick Timer
         SysTick->CTRL = 0x0000000;
1a001738:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
1a00173c:	2200      	movs	r2, #0
1a00173e:	611a      	str	r2, [r3, #16]
      }
   #endif
}
1a001740:	4770      	bx	lr
	...

1a001744 <tickInit>:
{
1a001744:	b510      	push	{r4, lr}
      if( tickRateMSvalue == 0 ) {
1a001746:	ea50 0301 	orrs.w	r3, r0, r1
1a00174a:	d028      	beq.n	1a00179e <tickInit+0x5a>
         if( (tickRateMSvalue >= 1) && (tickRateMSvalue <= 50) ) {
1a00174c:	1e42      	subs	r2, r0, #1
1a00174e:	f141 33ff 	adc.w	r3, r1, #4294967295	; 0xffffffff
1a001752:	2a32      	cmp	r2, #50	; 0x32
1a001754:	f173 0300 	sbcs.w	r3, r3, #0
1a001758:	d226      	bcs.n	1a0017a8 <tickInit+0x64>
            tickRateMS = tickRateMSvalue;
1a00175a:	4b14      	ldr	r3, [pc, #80]	; (1a0017ac <tickInit+0x68>)
1a00175c:	6018      	str	r0, [r3, #0]
1a00175e:	6059      	str	r1, [r3, #4]
            SysTick_Config( SystemCoreClock * tickRateMSvalue / 1000 );
1a001760:	4b13      	ldr	r3, [pc, #76]	; (1a0017b0 <tickInit+0x6c>)
1a001762:	681c      	ldr	r4, [r3, #0]
1a001764:	fba4 0c00 	umull	r0, ip, r4, r0
1a001768:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
1a00176c:	2300      	movs	r3, #0
1a00176e:	fb04 c101 	mla	r1, r4, r1, ip
1a001772:	f000 f929 	bl	1a0019c8 <__aeabi_uldivmod>
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
1a001776:	3801      	subs	r0, #1
1a001778:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
1a00177c:	d20a      	bcs.n	1a001794 <tickInit+0x50>
  {
    return (1UL);                                                   /* Reload value impossible */
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
1a00177e:	f04f 23e0 	mov.w	r3, #3758153728	; 0xe000e000
1a001782:	6158      	str	r0, [r3, #20]
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
1a001784:	4a0b      	ldr	r2, [pc, #44]	; (1a0017b4 <tickInit+0x70>)
1a001786:	21e0      	movs	r1, #224	; 0xe0
1a001788:	f882 1023 	strb.w	r1, [r2, #35]	; 0x23
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
1a00178c:	2200      	movs	r2, #0
1a00178e:	619a      	str	r2, [r3, #24]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
1a001790:	2207      	movs	r2, #7
1a001792:	611a      	str	r2, [r3, #16]
            tickPowerSet( ON );
1a001794:	2001      	movs	r0, #1
1a001796:	f7ff ffc9 	bl	1a00172c <tickPowerSet>
      bool_t ret_val = 1;
1a00179a:	2001      	movs	r0, #1
}
1a00179c:	bd10      	pop	{r4, pc}
         tickPowerSet( OFF );
1a00179e:	2000      	movs	r0, #0
1a0017a0:	f7ff ffc4 	bl	1a00172c <tickPowerSet>
         ret_val = 0;
1a0017a4:	2000      	movs	r0, #0
1a0017a6:	e7f9      	b.n	1a00179c <tickInit+0x58>
            ret_val = 0;
1a0017a8:	2000      	movs	r0, #0
1a0017aa:	e7f7      	b.n	1a00179c <tickInit+0x58>
1a0017ac:	10000040 	.word	0x10000040
1a0017b0:	10000054 	.word	0x10000054
1a0017b4:	e000ed00 	.word	0xe000ed00

1a0017b8 <SysTick_Handler>:

//__attribute__ ((section(".after_vectors")))

// SysTick Timer ISR Handler
void tickerCallback( void )   // Before SysTick_Handler
{
1a0017b8:	b508      	push	{r3, lr}
   // Increment Tick counters
   tickCounter++;
1a0017ba:	4a07      	ldr	r2, [pc, #28]	; (1a0017d8 <SysTick_Handler+0x20>)
1a0017bc:	6813      	ldr	r3, [r2, #0]
1a0017be:	6851      	ldr	r1, [r2, #4]
1a0017c0:	3301      	adds	r3, #1
1a0017c2:	f141 0100 	adc.w	r1, r1, #0
1a0017c6:	6013      	str	r3, [r2, #0]
1a0017c8:	6051      	str	r1, [r2, #4]
   // Execute Tick Hook function if pointer is not NULL
   if( (tickHookFunction != NULL) ) {
1a0017ca:	4b04      	ldr	r3, [pc, #16]	; (1a0017dc <SysTick_Handler+0x24>)
1a0017cc:	681b      	ldr	r3, [r3, #0]
1a0017ce:	b113      	cbz	r3, 1a0017d6 <SysTick_Handler+0x1e>
      (* tickHookFunction )( callBackFuncParams );
1a0017d0:	4a03      	ldr	r2, [pc, #12]	; (1a0017e0 <SysTick_Handler+0x28>)
1a0017d2:	6810      	ldr	r0, [r2, #0]
1a0017d4:	4798      	blx	r3
   }
}
1a0017d6:	bd08      	pop	{r3, pc}
1a0017d8:	10000068 	.word	0x10000068
1a0017dc:	10000070 	.word	0x10000070
1a0017e0:	10000060 	.word	0x10000060

1a0017e4 <uartTxReady>:
}

// Return TRUE if have space in TX FIFO
bool_t uartTxReady( uartMap_t uart )
{
   return Chip_UART_ReadLineStatus( lpcUarts[uart].uartAddr ) & UART_LSR_THRE;
1a0017e4:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a0017e8:	4b03      	ldr	r3, [pc, #12]	; (1a0017f8 <uartTxReady+0x14>)
1a0017ea:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
 * @note	Mask bits of the returned status value with UART_LSR_*
 *			definitions for specific statuses.
 */
STATIC INLINE uint32_t Chip_UART_ReadLineStatus(LPC_USART_T *pUART)
{
	return pUART->LSR;
1a0017ee:	6958      	ldr	r0, [r3, #20]
}
1a0017f0:	f000 0020 	and.w	r0, r0, #32
1a0017f4:	4770      	bx	lr
1a0017f6:	bf00      	nop
1a0017f8:	1a001f90 	.word	0x1a001f90

1a0017fc <uartTxWrite>:
}

// Write in TX FIFO
void uartTxWrite( uartMap_t uart, const uint8_t value )
{
   Chip_UART_SendByte( lpcUarts[uart].uartAddr, value );
1a0017fc:	eb00 0040 	add.w	r0, r0, r0, lsl #1
1a001800:	4b02      	ldr	r3, [pc, #8]	; (1a00180c <uartTxWrite+0x10>)
1a001802:	f853 3020 	ldr.w	r3, [r3, r0, lsl #2]
	pUART->THR = (uint32_t) data;
1a001806:	6019      	str	r1, [r3, #0]
}
1a001808:	4770      	bx	lr
1a00180a:	bf00      	nop
1a00180c:	1a001f90 	.word	0x1a001f90

1a001810 <uartInit>:

//-------------------------------------------------------------

// UART Initialization
void uartInit( uartMap_t uart, uint32_t baudRate )
{
1a001810:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
1a001814:	4604      	mov	r4, r0
1a001816:	4689      	mov	r9, r1
   // Initialize UART
   Chip_UART_Init( lpcUarts[uart].uartAddr );
1a001818:	4d19      	ldr	r5, [pc, #100]	; (1a001880 <uartInit+0x70>)
1a00181a:	eb00 0340 	add.w	r3, r0, r0, lsl #1
1a00181e:	eb05 0683 	add.w	r6, r5, r3, lsl #2
1a001822:	f855 7023 	ldr.w	r7, [r5, r3, lsl #2]
1a001826:	4638      	mov	r0, r7
1a001828:	f7ff fcb8 	bl	1a00119c <Chip_UART_Init>
   // Set Baud rate
   Chip_UART_SetBaud( lpcUarts[uart].uartAddr, baudRate );
1a00182c:	4649      	mov	r1, r9
1a00182e:	4638      	mov	r0, r7
1a001830:	f7ff fcde 	bl	1a0011f0 <Chip_UART_SetBaud>
	pUART->FCR = fcr;
1a001834:	2307      	movs	r3, #7
1a001836:	60bb      	str	r3, [r7, #8]
	return (uint8_t) (pUART->RBR & UART_RBR_MASKBIT);
1a001838:	683b      	ldr	r3, [r7, #0]
    pUART->TER2 = UART_TER2_TXEN;
1a00183a:	2301      	movs	r3, #1
1a00183c:	65fb      	str	r3, [r7, #92]	; 0x5c
   
   // Enable UART Transmission
   Chip_UART_TXEnable( lpcUarts[uart].uartAddr );
   
   // Configure SCU UARTn_TXD pin
   Chip_SCU_PinMux( lpcUarts[uart].txPin.lpcScuPort,
1a00183e:	7930      	ldrb	r0, [r6, #4]
                    lpcUarts[uart].txPin.lpcScuPin,
1a001840:	7973      	ldrb	r3, [r6, #5]
                    MD_PDN,
                    lpcUarts[uart].txPin.lpcScuFunc );
1a001842:	79b2      	ldrb	r2, [r6, #6]
1a001844:	f042 0218 	orr.w	r2, r2, #24
1a001848:	490e      	ldr	r1, [pc, #56]	; (1a001884 <uartInit+0x74>)
1a00184a:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a00184e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
                    
   // Configure SCU UARTn_RXD pin
   Chip_SCU_PinMux( lpcUarts[uart].rxPin.lpcScuPort,
1a001852:	79f0      	ldrb	r0, [r6, #7]
                    lpcUarts[uart].rxPin.lpcScuPin,
1a001854:	7a33      	ldrb	r3, [r6, #8]
                    MD_PLN | MD_EZI | MD_ZI,
                    lpcUarts[uart].rxPin.lpcScuFunc );
1a001856:	7a72      	ldrb	r2, [r6, #9]
1a001858:	f042 02d0 	orr.w	r2, r2, #208	; 0xd0
1a00185c:	eb03 1340 	add.w	r3, r3, r0, lsl #5
1a001860:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

   // Specific configurations for RS485
   if( uart == UART_485 ) {
1a001864:	2c01      	cmp	r4, #1
1a001866:	d001      	beq.n	1a00186c <uartInit+0x5c>
      Chip_SCU_PinMux( lpcUart485DirPin.lpcScuPort,
                       lpcUart485DirPin.lpcScuPin,
                       MD_PDN,
                       lpcUart485DirPin.lpcScuFunc );
   }
}
1a001868:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 * @note	Use an Or'ed value of UART_RS485CTRL_* definitions with this
 *			call to set specific options.
 */
STATIC INLINE void Chip_UART_SetRS485Flags(LPC_USART_T *pUART, uint32_t ctrl)
{
	pUART->RS485CTRL |= ctrl;
1a00186c:	4a06      	ldr	r2, [pc, #24]	; (1a001888 <uartInit+0x78>)
1a00186e:	6cd3      	ldr	r3, [r2, #76]	; 0x4c
1a001870:	f043 0330 	orr.w	r3, r3, #48	; 0x30
1a001874:	64d3      	str	r3, [r2, #76]	; 0x4c
1a001876:	221a      	movs	r2, #26
1a001878:	f8c1 2308 	str.w	r2, [r1, #776]	; 0x308
1a00187c:	e7f4      	b.n	1a001868 <uartInit+0x58>
1a00187e:	bf00      	nop
1a001880:	1a001f90 	.word	0x1a001f90
1a001884:	40086000 	.word	0x40086000
1a001888:	40081000 	.word	0x40081000

1a00188c <uartWriteByte>:
   return retVal;
}

// Blocking Write 1 byte to TX FIFO
void uartWriteByte( uartMap_t uart, const uint8_t value )
{
1a00188c:	b538      	push	{r3, r4, r5, lr}
1a00188e:	4604      	mov	r4, r0
1a001890:	460d      	mov	r5, r1
   // Wait for space in FIFO (blocking)
   while( uartTxReady( uart ) == FALSE );
1a001892:	4620      	mov	r0, r4
1a001894:	f7ff ffa6 	bl	1a0017e4 <uartTxReady>
1a001898:	2800      	cmp	r0, #0
1a00189a:	d0fa      	beq.n	1a001892 <uartWriteByte+0x6>
   // Send byte
   uartTxWrite( uart, value );
1a00189c:	4629      	mov	r1, r5
1a00189e:	4620      	mov	r0, r4
1a0018a0:	f7ff ffac 	bl	1a0017fc <uartTxWrite>
}
1a0018a4:	bd38      	pop	{r3, r4, r5, pc}

1a0018a6 <uartWriteString>:

// Blocking Send a string
void uartWriteString( uartMap_t uart, const char* str )
{
1a0018a6:	b538      	push	{r3, r4, r5, lr}
1a0018a8:	4605      	mov	r5, r0
1a0018aa:	460c      	mov	r4, r1
   while( *str != 0 ) {
1a0018ac:	e003      	b.n	1a0018b6 <uartWriteString+0x10>
      uartWriteByte( uart, (uint8_t)*str );
1a0018ae:	4628      	mov	r0, r5
1a0018b0:	f7ff ffec 	bl	1a00188c <uartWriteByte>
      str++;
1a0018b4:	3401      	adds	r4, #1
   while( *str != 0 ) {
1a0018b6:	7821      	ldrb	r1, [r4, #0]
1a0018b8:	2900      	cmp	r1, #0
1a0018ba:	d1f8      	bne.n	1a0018ae <uartWriteString+0x8>
   }
}
1a0018bc:	bd38      	pop	{r3, r4, r5, pc}
	...

1a0018c0 <USB0_IRQHandler>:
/**
 * @brief   Handle interrupt from USB
 * @return  Nothing
 */
#ifndef USB_HOST_ONLY // Parche para envitar conflictos con biblioteca host
void USB_IRQHandler(void){
1a0018c0:	b508      	push	{r3, lr}
   USBD_API->hw->ISR(g_hUsb);
1a0018c2:	4b04      	ldr	r3, [pc, #16]	; (1a0018d4 <USB0_IRQHandler+0x14>)
1a0018c4:	681b      	ldr	r3, [r3, #0]
1a0018c6:	681b      	ldr	r3, [r3, #0]
1a0018c8:	68db      	ldr	r3, [r3, #12]
1a0018ca:	4a03      	ldr	r2, [pc, #12]	; (1a0018d8 <USB0_IRQHandler+0x18>)
1a0018cc:	6810      	ldr	r0, [r2, #0]
1a0018ce:	4798      	blx	r3
}
1a0018d0:	bd08      	pop	{r3, pc}
1a0018d2:	bf00      	nop
1a0018d4:	10000078 	.word	0x10000078
1a0018d8:	10000074 	.word	0x10000074

1a0018dc <boardInit>:

/*==================[external functions definition]==========================*/

/* Set up and initialize board hardware */
void boardInit(void)
{
1a0018dc:	b508      	push	{r3, lr}
   // Read clock settings and update SystemCoreClock variable
   SystemCoreClockUpdate();
1a0018de:	f7fe ffef 	bl	1a0008c0 <SystemCoreClockUpdate>

   cyclesCounterInit( SystemCoreClock );
1a0018e2:	4b1a      	ldr	r3, [pc, #104]	; (1a00194c <boardInit+0x70>)
1a0018e4:	6818      	ldr	r0, [r3, #0]
1a0018e6:	f7ff fd2d 	bl	1a001344 <cyclesCounterInit>

   // Inicializar el conteo de Ticks con resolucion de 1ms (si no se usa freeRTOS)
   #ifndef USE_FREERTOS
      tickInit( 1 );
1a0018ea:	2001      	movs	r0, #1
1a0018ec:	2100      	movs	r1, #0
1a0018ee:	f7ff ff29 	bl	1a001744 <tickInit>
      //#error CIAA-NXP

   #elif BOARD==edu_ciaa_nxp

      // Inicializar GPIOs
      gpioInit( 0, GPIO_ENABLE );
1a0018f2:	2105      	movs	r1, #5
1a0018f4:	2000      	movs	r0, #0
1a0018f6:	f7ff fe07 	bl	1a001508 <gpioInit>

      // Configuracion de pines de entrada para Teclas de la EDU-CIAA-NXP
      gpioInit( TEC1, GPIO_INPUT );
1a0018fa:	2100      	movs	r1, #0
1a0018fc:	2024      	movs	r0, #36	; 0x24
1a0018fe:	f7ff fe03 	bl	1a001508 <gpioInit>
      gpioInit( TEC2, GPIO_INPUT );
1a001902:	2100      	movs	r1, #0
1a001904:	2025      	movs	r0, #37	; 0x25
1a001906:	f7ff fdff 	bl	1a001508 <gpioInit>
      gpioInit( TEC3, GPIO_INPUT );
1a00190a:	2100      	movs	r1, #0
1a00190c:	2026      	movs	r0, #38	; 0x26
1a00190e:	f7ff fdfb 	bl	1a001508 <gpioInit>
      gpioInit( TEC4, GPIO_INPUT );
1a001912:	2100      	movs	r1, #0
1a001914:	2027      	movs	r0, #39	; 0x27
1a001916:	f7ff fdf7 	bl	1a001508 <gpioInit>

      // Configuracion de pines de salida para Leds de la EDU-CIAA-NXP
      gpioInit( LEDR, GPIO_OUTPUT );
1a00191a:	2101      	movs	r1, #1
1a00191c:	2028      	movs	r0, #40	; 0x28
1a00191e:	f7ff fdf3 	bl	1a001508 <gpioInit>
      gpioInit( LEDG, GPIO_OUTPUT );
1a001922:	2101      	movs	r1, #1
1a001924:	2029      	movs	r0, #41	; 0x29
1a001926:	f7ff fdef 	bl	1a001508 <gpioInit>
      gpioInit( LEDB, GPIO_OUTPUT );
1a00192a:	2101      	movs	r1, #1
1a00192c:	202a      	movs	r0, #42	; 0x2a
1a00192e:	f7ff fdeb 	bl	1a001508 <gpioInit>
      gpioInit( LED1, GPIO_OUTPUT );
1a001932:	2101      	movs	r1, #1
1a001934:	202b      	movs	r0, #43	; 0x2b
1a001936:	f7ff fde7 	bl	1a001508 <gpioInit>
      gpioInit( LED2, GPIO_OUTPUT );
1a00193a:	2101      	movs	r1, #1
1a00193c:	202c      	movs	r0, #44	; 0x2c
1a00193e:	f7ff fde3 	bl	1a001508 <gpioInit>
      gpioInit( LED3, GPIO_OUTPUT );
1a001942:	2101      	movs	r1, #1
1a001944:	202d      	movs	r0, #45	; 0x2d
1a001946:	f7ff fddf 	bl	1a001508 <gpioInit>
   #else
      #error BOARD compile variable must be defined

   #endif

}
1a00194a:	bd08      	pop	{r3, pc}
1a00194c:	10000054 	.word	0x10000054

1a001950 <delayInit>:


/* ---- Non Blocking Delay ---- */

void delayInit( delay_t * delay, tick_t duration )
{
1a001950:	b510      	push	{r4, lr}
1a001952:	4604      	mov	r4, r0
1a001954:	4610      	mov	r0, r2
1a001956:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a001958:	4b04      	ldr	r3, [pc, #16]	; (1a00196c <delayInit+0x1c>)
1a00195a:	e9d3 2300 	ldrd	r2, r3, [r3]
1a00195e:	f000 f833 	bl	1a0019c8 <__aeabi_uldivmod>
1a001962:	e9c4 0102 	strd	r0, r1, [r4, #8]
   delay->running = 0;
1a001966:	2300      	movs	r3, #0
1a001968:	7423      	strb	r3, [r4, #16]
}
1a00196a:	bd10      	pop	{r4, pc}
1a00196c:	10000040 	.word	0x10000040

1a001970 <delayRead>:

bool_t delayRead( delay_t * delay )
{
1a001970:	b538      	push	{r3, r4, r5, lr}
1a001972:	4604      	mov	r4, r0
   bool_t timeArrived = 0;

   if( !delay->running ) {
1a001974:	7c05      	ldrb	r5, [r0, #16]
1a001976:	b93d      	cbnz	r5, 1a001988 <delayRead+0x18>
      delay->startTime = tickRead();
1a001978:	f7ff fed2 	bl	1a001720 <tickRead>
1a00197c:	e9c4 0100 	strd	r0, r1, [r4]
      delay->running = 1;
1a001980:	2301      	movs	r3, #1
1a001982:	7423      	strb	r3, [r4, #16]
         delay->running = 0;
      }
   }

   return timeArrived;
}
1a001984:	4628      	mov	r0, r5
1a001986:	bd38      	pop	{r3, r4, r5, pc}
      if ( (tick_t)(tickRead() - delay->startTime) >= delay->duration ) {
1a001988:	f7ff feca 	bl	1a001720 <tickRead>
1a00198c:	6823      	ldr	r3, [r4, #0]
1a00198e:	6862      	ldr	r2, [r4, #4]
1a001990:	1ac0      	subs	r0, r0, r3
1a001992:	eb61 0102 	sbc.w	r1, r1, r2
1a001996:	68a2      	ldr	r2, [r4, #8]
1a001998:	68e3      	ldr	r3, [r4, #12]
1a00199a:	4290      	cmp	r0, r2
1a00199c:	4199      	sbcs	r1, r3
1a00199e:	d303      	bcc.n	1a0019a8 <delayRead+0x38>
         delay->running = 0;
1a0019a0:	2300      	movs	r3, #0
1a0019a2:	7423      	strb	r3, [r4, #16]
         timeArrived = 1;
1a0019a4:	2501      	movs	r5, #1
1a0019a6:	e7ed      	b.n	1a001984 <delayRead+0x14>
   bool_t timeArrived = 0;
1a0019a8:	2500      	movs	r5, #0
1a0019aa:	e7eb      	b.n	1a001984 <delayRead+0x14>

1a0019ac <delayWrite>:

void delayWrite( delay_t * delay, tick_t duration )
{
1a0019ac:	b510      	push	{r4, lr}
1a0019ae:	4604      	mov	r4, r0
1a0019b0:	4610      	mov	r0, r2
1a0019b2:	4619      	mov	r1, r3
   delay->duration = duration/tickRateMS;
1a0019b4:	4b03      	ldr	r3, [pc, #12]	; (1a0019c4 <delayWrite+0x18>)
1a0019b6:	e9d3 2300 	ldrd	r2, r3, [r3]
1a0019ba:	f000 f805 	bl	1a0019c8 <__aeabi_uldivmod>
1a0019be:	e9c4 0102 	strd	r0, r1, [r4, #8]
}
1a0019c2:	bd10      	pop	{r4, pc}
1a0019c4:	10000040 	.word	0x10000040

1a0019c8 <__aeabi_uldivmod>:
1a0019c8:	b953      	cbnz	r3, 1a0019e0 <__aeabi_uldivmod+0x18>
1a0019ca:	b94a      	cbnz	r2, 1a0019e0 <__aeabi_uldivmod+0x18>
1a0019cc:	2900      	cmp	r1, #0
1a0019ce:	bf08      	it	eq
1a0019d0:	2800      	cmpeq	r0, #0
1a0019d2:	bf1c      	itt	ne
1a0019d4:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
1a0019d8:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
1a0019dc:	f000 b94a 	b.w	1a001c74 <__aeabi_idiv0>
1a0019e0:	f1ad 0c08 	sub.w	ip, sp, #8
1a0019e4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
1a0019e8:	f000 f806 	bl	1a0019f8 <__udivmoddi4>
1a0019ec:	f8dd e004 	ldr.w	lr, [sp, #4]
1a0019f0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
1a0019f4:	b004      	add	sp, #16
1a0019f6:	4770      	bx	lr

1a0019f8 <__udivmoddi4>:
1a0019f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
1a0019fc:	468c      	mov	ip, r1
1a0019fe:	468e      	mov	lr, r1
1a001a00:	9e08      	ldr	r6, [sp, #32]
1a001a02:	4615      	mov	r5, r2
1a001a04:	4604      	mov	r4, r0
1a001a06:	4619      	mov	r1, r3
1a001a08:	2b00      	cmp	r3, #0
1a001a0a:	f040 80af 	bne.w	1a001b6c <__udivmoddi4+0x174>
1a001a0e:	4572      	cmp	r2, lr
1a001a10:	fab2 f782 	clz	r7, r2
1a001a14:	d943      	bls.n	1a001a9e <__udivmoddi4+0xa6>
1a001a16:	b14f      	cbz	r7, 1a001a2c <__udivmoddi4+0x34>
1a001a18:	f1c7 0320 	rsb	r3, r7, #32
1a001a1c:	fa0e fc07 	lsl.w	ip, lr, r7
1a001a20:	fa20 f303 	lsr.w	r3, r0, r3
1a001a24:	40bd      	lsls	r5, r7
1a001a26:	ea43 0c0c 	orr.w	ip, r3, ip
1a001a2a:	40bc      	lsls	r4, r7
1a001a2c:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001a30:	b2a8      	uxth	r0, r5
1a001a32:	fbbc f8fe 	udiv	r8, ip, lr
1a001a36:	0c23      	lsrs	r3, r4, #16
1a001a38:	fb0e cc18 	mls	ip, lr, r8, ip
1a001a3c:	fb08 f900 	mul.w	r9, r8, r0
1a001a40:	ea43 430c 	orr.w	r3, r3, ip, lsl #16
1a001a44:	4599      	cmp	r9, r3
1a001a46:	d928      	bls.n	1a001a9a <__udivmoddi4+0xa2>
1a001a48:	18eb      	adds	r3, r5, r3
1a001a4a:	f108 32ff 	add.w	r2, r8, #4294967295	; 0xffffffff
1a001a4e:	d204      	bcs.n	1a001a5a <__udivmoddi4+0x62>
1a001a50:	4599      	cmp	r9, r3
1a001a52:	d902      	bls.n	1a001a5a <__udivmoddi4+0x62>
1a001a54:	f1a8 0202 	sub.w	r2, r8, #2
1a001a58:	442b      	add	r3, r5
1a001a5a:	eba3 0309 	sub.w	r3, r3, r9
1a001a5e:	fbb3 fcfe 	udiv	ip, r3, lr
1a001a62:	b2a4      	uxth	r4, r4
1a001a64:	fb0e 331c 	mls	r3, lr, ip, r3
1a001a68:	fb0c f000 	mul.w	r0, ip, r0
1a001a6c:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
1a001a70:	42a0      	cmp	r0, r4
1a001a72:	d979      	bls.n	1a001b68 <__udivmoddi4+0x170>
1a001a74:	192c      	adds	r4, r5, r4
1a001a76:	f10c 33ff 	add.w	r3, ip, #4294967295	; 0xffffffff
1a001a7a:	d204      	bcs.n	1a001a86 <__udivmoddi4+0x8e>
1a001a7c:	42a0      	cmp	r0, r4
1a001a7e:	d902      	bls.n	1a001a86 <__udivmoddi4+0x8e>
1a001a80:	f1ac 0302 	sub.w	r3, ip, #2
1a001a84:	442c      	add	r4, r5
1a001a86:	1a24      	subs	r4, r4, r0
1a001a88:	ea43 4002 	orr.w	r0, r3, r2, lsl #16
1a001a8c:	b11e      	cbz	r6, 1a001a96 <__udivmoddi4+0x9e>
1a001a8e:	40fc      	lsrs	r4, r7
1a001a90:	2300      	movs	r3, #0
1a001a92:	6034      	str	r4, [r6, #0]
1a001a94:	6073      	str	r3, [r6, #4]
1a001a96:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
1a001a9a:	4642      	mov	r2, r8
1a001a9c:	e7dd      	b.n	1a001a5a <__udivmoddi4+0x62>
1a001a9e:	b902      	cbnz	r2, 1a001aa2 <__udivmoddi4+0xaa>
1a001aa0:	deff      	udf	#255	; 0xff
1a001aa2:	b9e7      	cbnz	r7, 1a001ade <__udivmoddi4+0xe6>
1a001aa4:	ebae 0302 	sub.w	r3, lr, r2
1a001aa8:	2101      	movs	r1, #1
1a001aaa:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001aae:	b2a8      	uxth	r0, r5
1a001ab0:	fbb3 fcfe 	udiv	ip, r3, lr
1a001ab4:	0c22      	lsrs	r2, r4, #16
1a001ab6:	fb0e 331c 	mls	r3, lr, ip, r3
1a001aba:	fb0c f800 	mul.w	r8, ip, r0
1a001abe:	ea42 4303 	orr.w	r3, r2, r3, lsl #16
1a001ac2:	4598      	cmp	r8, r3
1a001ac4:	d94e      	bls.n	1a001b64 <__udivmoddi4+0x16c>
1a001ac6:	18eb      	adds	r3, r5, r3
1a001ac8:	f10c 32ff 	add.w	r2, ip, #4294967295	; 0xffffffff
1a001acc:	d204      	bcs.n	1a001ad8 <__udivmoddi4+0xe0>
1a001ace:	4598      	cmp	r8, r3
1a001ad0:	d902      	bls.n	1a001ad8 <__udivmoddi4+0xe0>
1a001ad2:	f1ac 0202 	sub.w	r2, ip, #2
1a001ad6:	442b      	add	r3, r5
1a001ad8:	eba3 0308 	sub.w	r3, r3, r8
1a001adc:	e7bf      	b.n	1a001a5e <__udivmoddi4+0x66>
1a001ade:	f1c7 0120 	rsb	r1, r7, #32
1a001ae2:	fa2e f301 	lsr.w	r3, lr, r1
1a001ae6:	40bd      	lsls	r5, r7
1a001ae8:	fa0e fe07 	lsl.w	lr, lr, r7
1a001aec:	fa20 f101 	lsr.w	r1, r0, r1
1a001af0:	ea41 010e 	orr.w	r1, r1, lr
1a001af4:	ea4f 4e15 	mov.w	lr, r5, lsr #16
1a001af8:	b2aa      	uxth	r2, r5
1a001afa:	fbb3 fcfe 	udiv	ip, r3, lr
1a001afe:	fb0e 301c 	mls	r0, lr, ip, r3
1a001b02:	0c0b      	lsrs	r3, r1, #16
1a001b04:	fb0c f802 	mul.w	r8, ip, r2
1a001b08:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a001b0c:	4598      	cmp	r8, r3
1a001b0e:	fa04 f407 	lsl.w	r4, r4, r7
1a001b12:	d923      	bls.n	1a001b5c <__udivmoddi4+0x164>
1a001b14:	18eb      	adds	r3, r5, r3
1a001b16:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
1a001b1a:	d204      	bcs.n	1a001b26 <__udivmoddi4+0x12e>
1a001b1c:	4598      	cmp	r8, r3
1a001b1e:	d902      	bls.n	1a001b26 <__udivmoddi4+0x12e>
1a001b20:	f1ac 0002 	sub.w	r0, ip, #2
1a001b24:	442b      	add	r3, r5
1a001b26:	eba3 0308 	sub.w	r3, r3, r8
1a001b2a:	fbb3 fcfe 	udiv	ip, r3, lr
1a001b2e:	fb0c f802 	mul.w	r8, ip, r2
1a001b32:	fb0e 321c 	mls	r2, lr, ip, r3
1a001b36:	b28b      	uxth	r3, r1
1a001b38:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
1a001b3c:	4598      	cmp	r8, r3
1a001b3e:	d90f      	bls.n	1a001b60 <__udivmoddi4+0x168>
1a001b40:	18eb      	adds	r3, r5, r3
1a001b42:	f10c 31ff 	add.w	r1, ip, #4294967295	; 0xffffffff
1a001b46:	d204      	bcs.n	1a001b52 <__udivmoddi4+0x15a>
1a001b48:	4598      	cmp	r8, r3
1a001b4a:	d902      	bls.n	1a001b52 <__udivmoddi4+0x15a>
1a001b4c:	f1ac 0102 	sub.w	r1, ip, #2
1a001b50:	442b      	add	r3, r5
1a001b52:	eba3 0308 	sub.w	r3, r3, r8
1a001b56:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
1a001b5a:	e7a6      	b.n	1a001aaa <__udivmoddi4+0xb2>
1a001b5c:	4660      	mov	r0, ip
1a001b5e:	e7e2      	b.n	1a001b26 <__udivmoddi4+0x12e>
1a001b60:	4661      	mov	r1, ip
1a001b62:	e7f6      	b.n	1a001b52 <__udivmoddi4+0x15a>
1a001b64:	4662      	mov	r2, ip
1a001b66:	e7b7      	b.n	1a001ad8 <__udivmoddi4+0xe0>
1a001b68:	4663      	mov	r3, ip
1a001b6a:	e78c      	b.n	1a001a86 <__udivmoddi4+0x8e>
1a001b6c:	4573      	cmp	r3, lr
1a001b6e:	d905      	bls.n	1a001b7c <__udivmoddi4+0x184>
1a001b70:	b10e      	cbz	r6, 1a001b76 <__udivmoddi4+0x17e>
1a001b72:	e9c6 0e00 	strd	r0, lr, [r6]
1a001b76:	2100      	movs	r1, #0
1a001b78:	4608      	mov	r0, r1
1a001b7a:	e78c      	b.n	1a001a96 <__udivmoddi4+0x9e>
1a001b7c:	fab3 f783 	clz	r7, r3
1a001b80:	b987      	cbnz	r7, 1a001ba4 <__udivmoddi4+0x1ac>
1a001b82:	4573      	cmp	r3, lr
1a001b84:	d301      	bcc.n	1a001b8a <__udivmoddi4+0x192>
1a001b86:	4282      	cmp	r2, r0
1a001b88:	d80a      	bhi.n	1a001ba0 <__udivmoddi4+0x1a8>
1a001b8a:	1a84      	subs	r4, r0, r2
1a001b8c:	eb6e 0303 	sbc.w	r3, lr, r3
1a001b90:	2001      	movs	r0, #1
1a001b92:	469c      	mov	ip, r3
1a001b94:	2e00      	cmp	r6, #0
1a001b96:	d06a      	beq.n	1a001c6e <__udivmoddi4+0x276>
1a001b98:	e9c6 4c00 	strd	r4, ip, [r6]
1a001b9c:	2100      	movs	r1, #0
1a001b9e:	e77a      	b.n	1a001a96 <__udivmoddi4+0x9e>
1a001ba0:	4638      	mov	r0, r7
1a001ba2:	e7f7      	b.n	1a001b94 <__udivmoddi4+0x19c>
1a001ba4:	f1c7 0c20 	rsb	ip, r7, #32
1a001ba8:	40bb      	lsls	r3, r7
1a001baa:	fa22 f40c 	lsr.w	r4, r2, ip
1a001bae:	431c      	orrs	r4, r3
1a001bb0:	fa20 f10c 	lsr.w	r1, r0, ip
1a001bb4:	fa2e f30c 	lsr.w	r3, lr, ip
1a001bb8:	fa0e fe07 	lsl.w	lr, lr, r7
1a001bbc:	ea41 010e 	orr.w	r1, r1, lr
1a001bc0:	ea4f 4914 	mov.w	r9, r4, lsr #16
1a001bc4:	fa00 f507 	lsl.w	r5, r0, r7
1a001bc8:	fbb3 f8f9 	udiv	r8, r3, r9
1a001bcc:	fa1f fe84 	uxth.w	lr, r4
1a001bd0:	fb09 3018 	mls	r0, r9, r8, r3
1a001bd4:	0c0b      	lsrs	r3, r1, #16
1a001bd6:	fb08 fa0e 	mul.w	sl, r8, lr
1a001bda:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
1a001bde:	459a      	cmp	sl, r3
1a001be0:	fa02 f207 	lsl.w	r2, r2, r7
1a001be4:	d93f      	bls.n	1a001c66 <__udivmoddi4+0x26e>
1a001be6:	18e3      	adds	r3, r4, r3
1a001be8:	f108 30ff 	add.w	r0, r8, #4294967295	; 0xffffffff
1a001bec:	d204      	bcs.n	1a001bf8 <__udivmoddi4+0x200>
1a001bee:	459a      	cmp	sl, r3
1a001bf0:	d902      	bls.n	1a001bf8 <__udivmoddi4+0x200>
1a001bf2:	f1a8 0002 	sub.w	r0, r8, #2
1a001bf6:	4423      	add	r3, r4
1a001bf8:	eba3 030a 	sub.w	r3, r3, sl
1a001bfc:	b289      	uxth	r1, r1
1a001bfe:	fbb3 f8f9 	udiv	r8, r3, r9
1a001c02:	fb09 3318 	mls	r3, r9, r8, r3
1a001c06:	fb08 fe0e 	mul.w	lr, r8, lr
1a001c0a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
1a001c0e:	458e      	cmp	lr, r1
1a001c10:	d92b      	bls.n	1a001c6a <__udivmoddi4+0x272>
1a001c12:	1861      	adds	r1, r4, r1
1a001c14:	f108 33ff 	add.w	r3, r8, #4294967295	; 0xffffffff
1a001c18:	d204      	bcs.n	1a001c24 <__udivmoddi4+0x22c>
1a001c1a:	458e      	cmp	lr, r1
1a001c1c:	d902      	bls.n	1a001c24 <__udivmoddi4+0x22c>
1a001c1e:	f1a8 0302 	sub.w	r3, r8, #2
1a001c22:	4421      	add	r1, r4
1a001c24:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
1a001c28:	fba0 9802 	umull	r9, r8, r0, r2
1a001c2c:	eba1 010e 	sub.w	r1, r1, lr
1a001c30:	4541      	cmp	r1, r8
1a001c32:	46ce      	mov	lr, r9
1a001c34:	4643      	mov	r3, r8
1a001c36:	d302      	bcc.n	1a001c3e <__udivmoddi4+0x246>
1a001c38:	d106      	bne.n	1a001c48 <__udivmoddi4+0x250>
1a001c3a:	454d      	cmp	r5, r9
1a001c3c:	d204      	bcs.n	1a001c48 <__udivmoddi4+0x250>
1a001c3e:	ebb9 0e02 	subs.w	lr, r9, r2
1a001c42:	eb68 0304 	sbc.w	r3, r8, r4
1a001c46:	3801      	subs	r0, #1
1a001c48:	b18e      	cbz	r6, 1a001c6e <__udivmoddi4+0x276>
1a001c4a:	ebb5 020e 	subs.w	r2, r5, lr
1a001c4e:	eb61 0103 	sbc.w	r1, r1, r3
1a001c52:	fa01 fc0c 	lsl.w	ip, r1, ip
1a001c56:	fa22 f307 	lsr.w	r3, r2, r7
1a001c5a:	ea4c 0303 	orr.w	r3, ip, r3
1a001c5e:	40f9      	lsrs	r1, r7
1a001c60:	e9c6 3100 	strd	r3, r1, [r6]
1a001c64:	e79a      	b.n	1a001b9c <__udivmoddi4+0x1a4>
1a001c66:	4640      	mov	r0, r8
1a001c68:	e7c6      	b.n	1a001bf8 <__udivmoddi4+0x200>
1a001c6a:	4643      	mov	r3, r8
1a001c6c:	e7da      	b.n	1a001c24 <__udivmoddi4+0x22c>
1a001c6e:	4631      	mov	r1, r6
1a001c70:	e711      	b.n	1a001a96 <__udivmoddi4+0x9e>
	...

1a001c74 <__aeabi_idiv0>:
1a001c74:	4770      	bx	lr
1a001c76:	bf00      	nop

1a001c78 <__libc_init_array>:
1a001c78:	b570      	push	{r4, r5, r6, lr}
1a001c7a:	4d0d      	ldr	r5, [pc, #52]	; (1a001cb0 <__libc_init_array+0x38>)
1a001c7c:	4c0d      	ldr	r4, [pc, #52]	; (1a001cb4 <__libc_init_array+0x3c>)
1a001c7e:	1b64      	subs	r4, r4, r5
1a001c80:	10a4      	asrs	r4, r4, #2
1a001c82:	2600      	movs	r6, #0
1a001c84:	42a6      	cmp	r6, r4
1a001c86:	d109      	bne.n	1a001c9c <__libc_init_array+0x24>
1a001c88:	4d0b      	ldr	r5, [pc, #44]	; (1a001cb8 <__libc_init_array+0x40>)
1a001c8a:	4c0c      	ldr	r4, [pc, #48]	; (1a001cbc <__libc_init_array+0x44>)
1a001c8c:	f7fe fc0b 	bl	1a0004a6 <_init>
1a001c90:	1b64      	subs	r4, r4, r5
1a001c92:	10a4      	asrs	r4, r4, #2
1a001c94:	2600      	movs	r6, #0
1a001c96:	42a6      	cmp	r6, r4
1a001c98:	d105      	bne.n	1a001ca6 <__libc_init_array+0x2e>
1a001c9a:	bd70      	pop	{r4, r5, r6, pc}
1a001c9c:	f855 3b04 	ldr.w	r3, [r5], #4
1a001ca0:	4798      	blx	r3
1a001ca2:	3601      	adds	r6, #1
1a001ca4:	e7ee      	b.n	1a001c84 <__libc_init_array+0xc>
1a001ca6:	f855 3b04 	ldr.w	r3, [r5], #4
1a001caa:	4798      	blx	r3
1a001cac:	3601      	adds	r6, #1
1a001cae:	e7f2      	b.n	1a001c96 <__libc_init_array+0x1e>
1a001cb0:	1a000300 	.word	0x1a000300
1a001cb4:	1a000300 	.word	0x1a000300
1a001cb8:	1a000300 	.word	0x1a000300
1a001cbc:	1a000304 	.word	0x1a000304

1a001cc0 <memset>:
1a001cc0:	4402      	add	r2, r0
1a001cc2:	4603      	mov	r3, r0
1a001cc4:	4293      	cmp	r3, r2
1a001cc6:	d100      	bne.n	1a001cca <memset+0xa>
1a001cc8:	4770      	bx	lr
1a001cca:	f803 1b01 	strb.w	r1, [r3], #1
1a001cce:	e7f9      	b.n	1a001cc4 <memset+0x4>
1a001cd0:	7778797a 	.word	0x7778797a
1a001cd4:	73747576 	.word	0x73747576
1a001cd8:	6f707172 	.word	0x6f707172
1a001cdc:	6b6c6d6e 	.word	0x6b6c6d6e
1a001ce0:	6768696a 	.word	0x6768696a
1a001ce4:	63646566 	.word	0x63646566
1a001ce8:	38396162 	.word	0x38396162
1a001cec:	34353637 	.word	0x34353637
1a001cf0:	30313233 	.word	0x30313233
1a001cf4:	34333231 	.word	0x34333231
1a001cf8:	38373635 	.word	0x38373635
1a001cfc:	63626139 	.word	0x63626139
1a001d00:	67666564 	.word	0x67666564
1a001d04:	6b6a6968 	.word	0x6b6a6968
1a001d08:	6f6e6d6c 	.word	0x6f6e6d6c
1a001d0c:	73727170 	.word	0x73727170
1a001d10:	77767574 	.word	0x77767574
1a001d14:	007a7978 	.word	0x007a7978
1a001d18:	20434441 	.word	0x20434441
1a001d1c:	20314843 	.word	0x20314843
1a001d20:	756c6176 	.word	0x756c6176
1a001d24:	00203a65 	.word	0x00203a65
1a001d28:	000a0d3b 	.word	0x000a0d3b

1a001d2c <ExtRateIn>:
1a001d2c:	00000000                                ....

1a001d30 <GpioButtons>:
1a001d30:	08000400 09010900                       ........

1a001d38 <GpioLeds>:
1a001d38:	01050005 0e000205 0c010b01              ............

1a001d44 <GpioPorts>:
1a001d44:	03030003 0f050403 05031005 07030603     ................
1a001d54:	00000802                                ....

1a001d58 <OscRateIn>:
1a001d58:	00b71b00                                ....

1a001d5c <InitClkStates>:
1a001d5c:	01010f01                                ....

1a001d60 <pinmuxing>:
1a001d60:	00440002 00440102 00440202 00400a02     ..D...D...D...@.
1a001d70:	00400b02 00400c02 00500001 00500101     ..@...@...P...P.
1a001d80:	00500201 00500601 00500106 00500406     ..P...P...P...P.
1a001d90:	00500506 00540706 00540806 00500906     ..P...T...T...P.
1a001da0:	00500a06 00500b06 00500c06 00f0040f     ..P...P...P.....
1a001db0:	00d50301 00d50401 00160107 00560207     ..............V.
1a001dc0:	00520302 00520402 00520509 00570609     ..R...R...R...W.
1a001dd0:	00570206 0f0f0f03 000000ff              ..W.........

1a001ddc <periph_to_base>:
1a001ddc:	00050000 0020000a 00090024 00400040     ...... .$...@.@.
1a001dec:	00600005 000400a6 00c300c0 00e00002     ..`.............
1a001dfc:	000100e0 01000100 01200003 00060120     .......... . ...
1a001e0c:	01400140 0142000c 00190142 01620162     @.@...B.B...b.b.
1a001e1c:	01820013 00120182 01a201a2 01c20011     ................
1a001e2c:	001001c2 01e201e2 0202000f 000e0202     ................
1a001e3c:	02220222 0223000d 001c0223              "."...#.#...

1a001e48 <InitClkStates>:
1a001e48:	00010100 00010909 0001090a 01010701     ................
1a001e58:	00010902 00010906 0101090c 0001090d     ................
1a001e68:	0001090e 0001090f 00010910 00010911     ................
1a001e78:	00010912 00010913 00011114 00011119     ................
1a001e88:	0001111a 0001111b                       ........

1a001e90 <UART_BClock>:
1a001e90:	01a201c2 01620182                       ......b.

1a001e98 <UART_PClock>:
1a001e98:	00820081 00a200a1 00061a80 0000000a     ................

1a001ea8 <gpioPinsInit>:
1a001ea8:	02000104 00050701 05010d03 04080100     ................
1a001eb8:	02020002 02000304 00000403 04070002     ................
1a001ec8:	030c0300 09050402 05040103 04030208     ................
1a001ed8:	04020305 06040504 0802000c 03000b06     ................
1a001ee8:	00090607 07060503 060f0504 03030004     ................
1a001ef8:	02000404 00050404 06040502 04060200     ................
1a001f08:	0c050408 05040a04 0003010e 14010a00     ................
1a001f18:	010f0000 0d000012 00001101 0010010c     ................
1a001f28:	07070300 000f0300 01000001 00000000     ................
1a001f38:	000a0600 08060603 06100504 04030005     ................
1a001f48:	03000106 04090400 04010d05 010b0000     ................
1a001f58:	0200000f 00000001 00010104 02010800     ................
1a001f68:	01090000 09010006 05040002 04010200     ................
1a001f78:	02020105 02020504 0e00000a 01000b02     ................
1a001f88:	000c020b 00000c01                       ........

1a001f90 <lpcUarts>:
1a001f90:	40081000 06020406 00180205 40081000     ...@...........@
1a001fa0:	09070509 00180706 40082000 00000000     ......... .@....
1a001fb0:	00190000 400c1000 07060107 001a0602     .......@........
1a001fc0:	400c1000 01010f01 001a0110 400c2000     ...@......... .@
1a001fd0:	02020302 001b0204                       ........
